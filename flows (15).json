[
    {
        "id": "21806d7921e0acd4",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d9cd39ad889ab371",
        "type": "tab",
        "label": "PT100",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "e4f387899e137f5c",
        "type": "tab",
        "label": "PID",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "80f453a0456b8b82",
        "type": "tab",
        "label": "Water level",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f2d74b707d15b316",
        "type": "tab",
        "label": "Flow 3",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4fcfb5eb3f2ab4ae",
        "type": "tab",
        "label": "KSB",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "5191202c2ef822cf",
        "type": "tab",
        "label": "timestamp test",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f0460a659c6716ef",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "17633a1dbc329ae5",
        "type": "tab",
        "label": "Flow 4",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "5e96725d744eaa37",
        "type": "group",
        "z": "80f453a0456b8b82",
        "name": "Converter",
        "style": {
            "label": true,
            "stroke": "#6f2fa0",
            "color": "#6f2fa0"
        },
        "nodes": [
            "ed435b0fbf7fb36d",
            "e25b1a76bb893852",
            "aeb6da7f85a0d0f5",
            "7cea03b4faefd0b9",
            "7a634765374f4041",
            "c4f360da46b71f0b",
            "01756e6ad09a4f9f"
        ],
        "x": 54,
        "y": 59,
        "w": 652,
        "h": 182
    },
    {
        "id": "75983bbd6ac30d95",
        "type": "group",
        "z": "80f453a0456b8b82",
        "name": "Valve ",
        "style": {
            "label": true,
            "stroke": "#ff0000",
            "color": "#ff0000"
        },
        "nodes": [
            "dcfa105875f39316",
            "377084a34de35c07",
            "8aeb43e5192ec39b",
            "07d2da6b7059d242"
        ],
        "x": 54,
        "y": 259,
        "w": 592,
        "h": 142
    },
    {
        "id": "dccc7c8251b52ce8",
        "type": "group",
        "z": "80f453a0456b8b82",
        "name": "Pump",
        "style": {
            "label": true,
            "stroke": "#0070c0",
            "color": "#0070c0"
        },
        "nodes": [
            "12cafad8e41b8938",
            "d7de9b2ded6fb737",
            "bb4bf94a6209a5bb",
            "ba9399433861454e",
            "b58a132c7dd9a8fb",
            "7b54e9c753b7f94d",
            "1f8baa5f8c7cec60"
        ],
        "x": 54,
        "y": 419,
        "w": 672,
        "h": 202
    },
    {
        "id": "4a1602ff16ab2894",
        "type": "group",
        "z": "80f453a0456b8b82",
        "name": "Controller",
        "style": {
            "label": true,
            "stroke": "#000000",
            "color": "#000000"
        },
        "nodes": [
            "4e1a4bfb2e17433c",
            "bdd04b06f2e55caf",
            "b7b3a3476fdcd2b6",
            "f2ec5bf7467ff3b8",
            "3644d9ab18a430c7",
            "4b917623582131ce",
            "4da8e6b1bcfe00c4",
            "a1bc34c86c21e093",
            "7d4526acdef6684a",
            "0135eac0d08c77aa",
            "19e707c411a01151",
            "30bf7dcece14a655"
        ],
        "x": 834,
        "y": 599,
        "w": 752,
        "h": 302
    },
    {
        "id": "7290f8343757911d",
        "type": "group",
        "z": "80f453a0456b8b82",
        "name": "Auto Status",
        "style": {
            "label": true,
            "stroke": "#ffC000",
            "color": "#ffC000"
        },
        "nodes": [
            "c72a753f48ac18cc",
            "2e8c60649eeceb8e",
            "e044d98988a640e2",
            "b104b5a8c68407ef",
            "ef909e9f9fac275f",
            "9ce438e97e0a0ebe",
            "a66f299aba2b56dd",
            "e9d2e127aa2f50aa"
        ],
        "x": 54,
        "y": 639,
        "w": 772,
        "h": 162
    },
    {
        "id": "42d2c8e06ee97b15",
        "type": "group",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "Save to Context",
        "style": {
            "stroke": "#b797cf",
            "label": true
        },
        "nodes": [
            "dcfcfffab8ad381e",
            "e1738dc8b4d4f3ff",
            "c4632f066fadc072"
        ],
        "x": 68,
        "y": 53,
        "w": 924,
        "h": 754
    },
    {
        "id": "1be41bfb03a3b383",
        "type": "group",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "Mqtt",
        "style": {
            "stroke": "#ffbfbf",
            "label": true
        },
        "nodes": [
            "5f6c662ab3aa669b",
            "1928bd3aedd7bfba",
            "4f3115d94159b6ce",
            "585e906aeb4b2062"
        ],
        "x": 534,
        "y": 859,
        "w": 712,
        "h": 142
    },
    {
        "id": "979607fe3e2bf2cc",
        "type": "group",
        "z": "80f453a0456b8b82",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "d081bb4c128c1470",
            "307c6f4095d38804",
            "daa150e27ab35291"
        ],
        "x": 34,
        "y": 1619,
        "w": 512,
        "h": 82
    },
    {
        "id": "ef4637834bce4f91",
        "type": "group",
        "z": "80f453a0456b8b82",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "c58d3dba93b14599",
            "2eaf39c6440e65bc",
            "e7bc057a40b49e08",
            "926261a080753a98",
            "5117df789af5cb8e"
        ],
        "x": 34,
        "y": 1719,
        "w": 652,
        "h": 122
    },
    {
        "id": "80116ec6cfc99089",
        "type": "group",
        "z": "80f453a0456b8b82",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "3431abb53053f8c7",
            "228cfd92882e603e",
            "21ff56ae4a82e2f5"
        ],
        "x": 34,
        "y": 1859,
        "w": 572,
        "h": 82
    },
    {
        "id": "57be2e2ab19d9c48",
        "type": "group",
        "z": "80f453a0456b8b82",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "d18568650406fcb4",
            "3b3902f8895880ff",
            "32fe89fc2c751b4a",
            "adab9e240b0cb4d6",
            "867ec5143159640c"
        ],
        "x": 34,
        "y": 1969,
        "w": 932,
        "h": 142
    },
    {
        "id": "c5c5d6bbc7362491",
        "type": "group",
        "z": "4fcfb5eb3f2ab4ae",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "124e65a93e8ff8ff",
            "de10c15ca37b5d7d",
            "12b197014b40df29",
            "90de30eb259a99f1",
            "1635787a014fbcf3",
            "80b8eaccfc0f411f",
            "36660cbe1d9cb823",
            "535197766c6e65ad",
            "cf3ac8a5310e5482",
            "4093c0203da34418",
            "f861bd103a5522e3",
            "96ab568f46edd394",
            "d1c9508a556b3280",
            "18f9d5949bf75297",
            "96f2ba61a8b584de",
            "7d960e0a73597c41",
            "7749ccf11f62e0c7",
            "c4f759d4ae2041b3"
        ],
        "x": 14,
        "y": 3119,
        "w": 912,
        "h": 402
    },
    {
        "id": "d02383e94e219d36",
        "type": "group",
        "z": "4fcfb5eb3f2ab4ae",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "8f28983014f1a2dc",
            "b47f8386cc83ed22",
            "bdb0d662718acdb2",
            "9d6fc4a1802e9dc2",
            "fda5f5b3436dd186",
            "532b4f1502309d38",
            "e861f8a3cc5d4eb9",
            "8ba5753f51c443e3",
            "e044818ea809772c",
            "cdb5b07a2e50b3c1",
            "5ec19074d2883167",
            "e6ca95a1760b5766"
        ],
        "x": 14,
        "y": 859,
        "w": 512,
        "h": 482
    },
    {
        "id": "f417980e4201f509",
        "type": "group",
        "z": "4fcfb5eb3f2ab4ae",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "6283ef19963039c0",
            "f1faa70bf1f18b22",
            "9fa91f3a18b746de",
            "2c1107898f8f9788",
            "9e046dec848af17e",
            "76b1186fe316bfac",
            "8c6ba61e7edbf195",
            "7f084d0dd9278afd",
            "125e4be6794201e5",
            "3e001d861478b5c0",
            "8d549d78b34cdbec",
            "73bf289de370e027"
        ],
        "x": 14,
        "y": 1419,
        "w": 452,
        "h": 482
    },
    {
        "id": "964d7c3fb11a2e95",
        "type": "group",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "Mqtt",
        "style": {
            "stroke": "#ffbfbf",
            "label": true
        },
        "nodes": [
            "f480fc709da67e3d",
            "24af0ef449b142c4",
            "4ac712fc5252fc9e",
            "5dc20b8e0c7ef1dd"
        ],
        "x": 474,
        "y": 1499,
        "w": 642,
        "h": 142
    },
    {
        "id": "410eaebcc7fe632c",
        "type": "group",
        "z": "4fcfb5eb3f2ab4ae",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "dabedf0a8c23a4af",
            "c4de13be4bd0d885",
            "2d5592b6aeb0771c",
            "c8ac5d6bc2e573fb",
            "b6dfb2b8295e507a",
            "68fdbd31d827c2ee",
            "a3b93213eab1028b",
            "ad9467ae62cebac4",
            "94511fa99dc2bbd3",
            "24d895ccb29106e9",
            "594806ec4d1fc5e2",
            "06bfc371eb21679c"
        ],
        "x": 14,
        "y": 1939,
        "w": 452,
        "h": 482
    },
    {
        "id": "d675fac31ae93fea",
        "type": "group",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "Mqtt",
        "style": {
            "stroke": "#ffbfbf",
            "label": true
        },
        "nodes": [
            "1f454f2dcef6011a",
            "a5ded0533818dd82",
            "c423e9f4936733a6",
            "401cca24edf1a9d8"
        ],
        "x": 474,
        "y": 2019,
        "w": 612,
        "h": 142
    },
    {
        "id": "9687b13c30b407e1",
        "type": "group",
        "z": "4fcfb5eb3f2ab4ae",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "afc3cab9c81b73a7",
            "52e247f56bb2abd9",
            "757176de3140a7a3",
            "c796e0ca830b65b3",
            "fe7bbcf8ba3a65f0",
            "6350608441faef53",
            "928dd49137398212",
            "da9f71b3e9e7d689",
            "c97605570775976a",
            "ce1d041a42f33ed2",
            "a24e07ec5f65fdce",
            "b3408edc82270c86",
            "8502cb83a777cd54"
        ],
        "x": 14,
        "y": 2479,
        "w": 1108,
        "h": 482
    },
    {
        "id": "ececf140d322ed44",
        "type": "group",
        "z": "80f453a0456b8b82",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "affba8b3f73d34b3",
            "b4e70bb7eba98ea1",
            "dda03c84dece3ed1",
            "7ab869d6e614b069",
            "9655f984873b1bd0",
            "cbb9a1ef3faffe22",
            "d6b010e38d75ed2c",
            "c940dffc44f5609a",
            "f497e788fcd507e7"
        ],
        "x": 434,
        "y": 1299,
        "w": 652,
        "h": 302
    },
    {
        "id": "dcfcfffab8ad381e",
        "type": "group",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "42d2c8e06ee97b15",
        "name": "Holding Registers",
        "style": {
            "stroke": "#ffff00",
            "label": true
        },
        "nodes": [
            "a9fbbd32442f8cca",
            "97281017c9f923a0",
            "b788adfb096118f5",
            "5086bedb603cb11e",
            "cc6fc3ae65fa2bb8",
            "f01c38f25460f5b2",
            "391c66f356138ea0",
            "adbfa094f2ff5982",
            "3d60dbc3560ccefb",
            "4f356be1385e7850",
            "93738164dad620be",
            "ff72c4068dde1af4",
            "d15d169327e075ff",
            "a8b21cf9ce5a240d",
            "81e9e22276df4abb",
            "7eaf991b83fa6b55",
            "7ff581d4614fe97f",
            "ec558adedd6d2418",
            "f0e700f2928b46f2",
            "f4a528d55c4bf7c6",
            "368052f67f59de76",
            "d1bf379febb9ca8b",
            "4e99947bff98853a",
            "5d904419efb40643",
            "09e23be23dde6ceb",
            "bad470461c456bf1",
            "c0df6fb1fb14c10d",
            "69923f8abf2f73dc",
            "c017df6d088584f2",
            "2fd4343883d6ef64",
            "4fd64a13732ec3e4",
            "beb776cea4a50442"
        ],
        "x": 94,
        "y": 79,
        "w": 872,
        "h": 502
    },
    {
        "id": "e1738dc8b4d4f3ff",
        "type": "group",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "42d2c8e06ee97b15",
        "name": "Alarms",
        "style": {
            "stroke": "#001f60",
            "label": true
        },
        "nodes": [
            "e1b08b7445db5653",
            "8ab81393195ed7eb",
            "a0c2b733a5bfc2ed",
            "494855ba78f5d50b"
        ],
        "x": 94,
        "y": 599,
        "w": 872,
        "h": 82
    },
    {
        "id": "c4632f066fadc072",
        "type": "group",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "42d2c8e06ee97b15",
        "name": "Output Status",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "16a11446366bd08b",
            "d4d74499d0aa8520",
            "4674217c13431770",
            "53e1cc01d04b8b3c"
        ],
        "x": 94,
        "y": 699,
        "w": 872,
        "h": 82
    },
    {
        "id": "b3408edc82270c86",
        "type": "group",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "9687b13c30b407e1",
        "name": "Mqtt",
        "style": {
            "stroke": "#ffbfbf",
            "label": true
        },
        "nodes": [
            "bfd7d2470f0ba57b",
            "fcf13b8ade4f9662",
            "c78f485209248f41",
            "c06a3f8be61d19c1"
        ],
        "x": 454,
        "y": 2559,
        "w": 642,
        "h": 142
    },
    {
        "id": "d23f54c5318a2fcd",
        "type": "mqtt-broker",
        "name": "broker.hivemq.com",
        "broker": "broker.hivemq.com",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "ea380550660ffbb0",
        "type": "mqtt-broker",
        "name": "",
        "broker": "0a8926ff283644b5894dedaed07f99a2.s1.eu.hivemq.cloud",
        "port": "8883",
        "tls": "",
        "clientid": "officetank",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "ea8d26bb2b04da52",
        "type": "mqtt-broker",
        "name": "",
        "broker": "13.232.159.32",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "7ef85feec8cfd696",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.235",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "01d9b3416f11dbd1",
        "type": "modbus-client",
        "name": "sha",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.235",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": 100,
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "e6061f97cd692ea3",
        "type": "modbus-client",
        "name": "sha",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.235",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "85fc58de720ca0e8",
        "type": "mqtt-broker",
        "name": "",
        "broker": "0a8926ff283644b5894dedaed07f99a2.s1.eu.hivemq.cloud",
        "port": "8883",
        "tls": "",
        "clientid": "ESP32_Client",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "7ef3fd84e68e27e3",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "3cd29c1c9ad0f7b1",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "aa85c3f7bf22cf0f",
        "type": "ui_group",
        "name": "Tank",
        "tab": "7ef3fd84e68e27e3",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "350b799651ac704a",
        "type": "ui-base",
        "name": "My Dashboard",
        "path": "/dashboard",
        "appIcon": "",
        "includeClientData": true,
        "acceptsClientConfig": [
            "ui-notification",
            "ui-control"
        ],
        "showPathInSidebar": false,
        "headerContent": "page",
        "navigationStyle": "default",
        "titleBarStyle": "default",
        "showReconnectNotification": true,
        "notificationDisplayTime": 1,
        "showDisconnectNotification": true
    },
    {
        "id": "23306ed336a5f9b2",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#ffffff",
            "primary": "#0094CE",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "density": "default",
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "1b7b73eccccd148a",
        "type": "ui-page",
        "name": "Page 1",
        "ui": "350b799651ac704a",
        "path": "/page1",
        "icon": "home",
        "layout": "grid",
        "theme": "23306ed336a5f9b2",
        "breakpoints": [
            {
                "name": "Default",
                "px": 0,
                "cols": 3
            },
            {
                "name": "Tablet",
                "px": 576,
                "cols": 6
            },
            {
                "name": "Small Desktop",
                "px": 768,
                "cols": 9
            },
            {
                "name": "Desktop",
                "px": 1024,
                "cols": 12
            }
        ],
        "order": 1,
        "className": "",
        "visible": true,
        "disabled": false
    },
    {
        "id": "6c70ad4706733f5d",
        "type": "ui-group",
        "name": "Group 2",
        "page": "1b7b73eccccd148a",
        "width": "6",
        "height": "1",
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": true,
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "2d80e3d9a3d27fa1",
        "type": "ui-group",
        "name": "Group 1",
        "page": "1b7b73eccccd148a",
        "width": "6",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "8ecd50b3548c5980",
        "type": "email-transport",
        "name": "IoT(tank)",
        "host": "smtp.gmail.com",
        "port": "587",
        "secure": false,
        "authType": "login",
        "proxy": ""
    },
    {
        "id": "d8ce63d6d210f2a6",
        "type": "ui-group",
        "name": "SENSOR",
        "page": "452980489746c81b",
        "width": 12,
        "height": 1,
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "1c6f457dfe15977b",
        "type": "ui-group",
        "name": "Custom Bar Chart",
        "page": "d0621b8f20aee671",
        "width": "6",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "452980489746c81b",
        "type": "ui-page",
        "name": "Water",
        "ui": "350b799651ac704a",
        "path": "/water",
        "icon": "home",
        "layout": "grid",
        "theme": "c36118d89231e820",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 5,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "d0621b8f20aee671",
        "type": "ui-page",
        "name": "Charts",
        "ui": "350b799651ac704a",
        "path": "/charts",
        "icon": "home",
        "layout": "notebook",
        "theme": "5075a7d8e4947586",
        "order": 4,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "c36118d89231e820",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#ffffff",
            "primary": "#0094CE",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "density": "default",
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "5075a7d8e4947586",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#ffffff",
            "primary": "#0094CE",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "8e6415e43363b94c",
        "type": "ui-group",
        "name": "Group 5",
        "page": "452980489746c81b",
        "width": "6",
        "height": "1",
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "ea5c3d2dcfb3462e",
        "type": "ui-group",
        "name": "Upload CSV File",
        "page": "76f6b77509a74a17",
        "width": "12",
        "height": "1",
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "76f6b77509a74a17",
        "type": "ui-page",
        "name": "Upload CSV",
        "ui": "350b799651ac704a",
        "path": "/",
        "icon": "upload",
        "layout": "grid",
        "theme": "c5ed292f3032aa43",
        "order": 2,
        "className": "",
        "visible": true,
        "disabled": false
    },
    {
        "id": "b73dc5151c8cd587",
        "type": "ui-group",
        "name": "CSV Table",
        "page": "76f6b77509a74a17",
        "width": "12",
        "height": "1",
        "order": 3,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "c5ed292f3032aa43",
        "type": "ui-theme",
        "name": "Theme Name",
        "colors": {
            "surface": "#16709c",
            "primary": "#0094ce",
            "bgPage": "#828282",
            "groupBg": "#ffffff",
            "groupOutline": "#242323"
        },
        "sizes": {
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "67f1643d7a8fdfdd",
        "type": "ui-page",
        "name": "View & Edit Data",
        "ui": "350b799651ac704a",
        "path": "/view",
        "icon": "table",
        "layout": "grid",
        "theme": "c5ed292f3032aa43",
        "order": 3,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "cb26f0fdda386fe7",
        "type": "ui-group",
        "name": "View Data",
        "page": "67f1643d7a8fdfdd",
        "width": "12",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "649fd14f6796fc42",
        "type": "ui-group",
        "name": "Edit Data",
        "page": "67f1643d7a8fdfdd",
        "width": "12",
        "height": "1",
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "a1e08ea77703ac6b",
        "type": "ui-group",
        "name": "Setting Separator",
        "page": "76f6b77509a74a17",
        "width": "12",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "53e4bfc0a27b69e4",
        "type": "ui-group",
        "name": "Insert New Record",
        "page": "67f1643d7a8fdfdd",
        "width": "12",
        "height": "1",
        "order": 3,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "fb79b5093b5e05ec",
        "type": "mqtt-broker",
        "name": "",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "tls": "d50d0c9f.31e858",
        "clientid": "",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "d50d0c9f.31e858",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false
    },
    {
        "id": "4ff28409594cd1dc",
        "type": "mqtt-broker",
        "name": "",
        "broker": "0a8926ff283644b5894dedaed07f99a2.s1.eu.hivemq.cloud",
        "port": "8883",
        "tls": "d50d0c9f.31e858",
        "clientid": "ESP32Client",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "23a89b23442543e0",
        "type": "mqtt-broker",
        "name": "",
        "broker": "0a8926ff283644b5894dedaed07f99a2.s1.eu.hivemq.cloud",
        "port": "8883",
        "tls": "d50d0c9f.31e858",
        "clientid": "servernodered",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "c7f34cdebde38425",
        "type": "mqtt-broker",
        "name": "",
        "broker": "test.mosquitto.org",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "5f0410d3f06f7681",
        "type": "mqtt-broker",
        "name": "",
        "broker": "0a8926ff283644b5894dedaed07f99a2.s1.eu.hivemq.cloud",
        "port": "8883",
        "tls": "de766f091410f1ac",
        "clientid": "KSB_test",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "de766f091410f1ac",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": true,
        "alpnprotocol": ""
    },
    {
        "id": "7f29005b7899d141",
        "type": "mqtt-broker",
        "name": "",
        "broker": "0a8926ff283644b5894dedaed07f99a2.s1.eu.hivemq.cloud",
        "port": "8883",
        "tls": "d50d0c9f.31e858",
        "clientid": "",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "04bf017aa0e84f8d",
        "type": "ui-group",
        "name": "Group 14",
        "page": "78c5d29433f0b4a5",
        "width": 6,
        "height": 1,
        "order": 3,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "78c5d29433f0b4a5",
        "type": "ui-page",
        "name": "Energy JE",
        "ui": "350b799651ac704a",
        "path": "/page5",
        "icon": "home",
        "layout": "grid",
        "theme": "c36118d89231e820",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 5,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "c321939b60789b45",
        "type": "mqtt-broker",
        "name": "",
        "broker": "test.mosquitto.org",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "73b98da839438a44",
        "type": "mqtt-broker",
        "name": "",
        "broker": "0a8926ff283644b5894dedaed07f99a2.s1.eu.hivemq.cloud",
        "port": "8883",
        "tls": "",
        "clientid": "",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "91d3600bf490b026",
        "type": "email-transport",
        "name": "",
        "host": "smtp.gmail.com",
        "port": "587",
        "secure": false,
        "authType": "login",
        "proxy": ""
    },
    {
        "id": "16e96d3dc53033e3",
        "type": "mqtt-broker",
        "name": "",
        "broker": "0a8926ff283644b5894dedaed07f99a2.s1.eu.hivemq.cloud",
        "port": "8883",
        "tls": "d50d0c9f.31e858",
        "clientid": "123456789",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "37eb654cded142f3",
        "type": "postgresDB",
        "name": "iot@127.0.0.1:5432/postgres",
        "host": "127.0.0.1",
        "port": "5432",
        "database": "Demo_DB",
        "ssl": true,
        "max": "10",
        "min": 1,
        "idle": "1000"
    },
    {
        "id": "9636684b0bd7f1ee",
        "type": "mqtt in",
        "z": "21806d7921e0acd4",
        "name": "",
        "topic": "AMPL/sensor/data",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "7f29005b7899d141",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 60,
        "wires": [
            [
                "67e3a99ab2ba659e"
            ]
        ]
    },
    {
        "id": "ec171d263f78bdb6",
        "type": "debug",
        "z": "21806d7921e0acd4",
        "name": "debug 113",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 350,
        "y": 180,
        "wires": []
    },
    {
        "id": "67e3a99ab2ba659e",
        "type": "function",
        "z": "21806d7921e0acd4",
        "name": "function 129",
        "func": "var a = msg.payload.PM1P0;\nvar b = msg.payload.PM2P5;\nvar c = msg.payload.PM4P0;\nvar d = msg.payload.PM10P0;\nvar e = msg.payload.RH;\nvar f = msg.payload.Temp;\nvar g = msg.payload.VOCIndex;\nvar h = msg.payload.NOXIndex;\nvar i = msg.payload.message;\n\nflow.set(\"PM1P0\", a);\nflow.set(\"PM2P5\", b);\nflow.set(\"PM4P0\", c);\nflow.set(\"PM10P0\", d);\nflow.set(\"RH\", e);\nflow.set(\"Temp\", f);\nflow.set(\"VOCIndex\", g);\nflow.set(\"NOXIndex\", h);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "be8340d5cc0f1663",
        "type": "function",
        "z": "21806d7921e0acd4",
        "name": "function 130",
        "func": "//let Timestamp = flow.set(\"Timestamp\", new Date().toISOString());\nlet PM1P0 = flow.get(\"PM1P0\");\nlet PM2P5 = flow.get(\"PM2P5\");\nlet PM4P0 = flow.get(\"PM4P0\");\nlet PM10P0 = flow.get(\"PM10P0\");\nlet RH = flow.get(\"RH\");\nlet Temp = flow.get(\"Temp\");\nlet VOCIndex = flow.get(\"VOCIndex\");\nlet NOXIndex = flow.get(\"NOXIndex\");\n\nlet now = new Date();\nnow = new Date(now.toLocaleString(\"en-US\", { timeZone: \"Asia/Kolkata\" }));\n\nlet Timestamp = now.getFullYear() + \"-\" +\n    String(now.getMonth() + 1).padStart(2, '0') + \"-\" +\n    String(now.getDate()).padStart(2, '0') + \" \" +\n    String(now.getHours()).padStart(2, '0') + \":\" +\n    String(now.getMinutes()).padStart(2, '0') + \":\" +\n    String(now.getSeconds()).padStart(2, '0');\n\nmsg.payload = {\n    Timestamp,\n    VOCIndex,\n    NOXIndex,\n    Temp,\n    RH,\n    PM1P0,\n    PM2P5,\n    PM4P0,\n    PM10P0,\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 120,
        "wires": [
            [
                "13281330b9538361",
                "c1a16236234615de"
            ]
        ]
    },
    {
        "id": "20b8fa74efd38c2a",
        "type": "inject",
        "z": "21806d7921e0acd4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 120,
        "wires": [
            [
                "be8340d5cc0f1663"
            ]
        ]
    },
    {
        "id": "13281330b9538361",
        "type": "mqtt out",
        "z": "21806d7921e0acd4",
        "name": "",
        "topic": "AMPL/Sensor/Data",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "7f29005b7899d141",
        "x": 550,
        "y": 120,
        "wires": []
    },
    {
        "id": "8e467d34a1733a01",
        "type": "mqtt in",
        "z": "21806d7921e0acd4",
        "name": "",
        "topic": "AMPL/Sensor/Data",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "7f29005b7899d141",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 180,
        "wires": [
            [
                "ec171d263f78bdb6"
            ]
        ]
    },
    {
        "id": "1f6fad2c0ca45086",
        "type": "mqtt in",
        "z": "21806d7921e0acd4",
        "name": "",
        "topic": "office/energymeter/ground",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "7f29005b7899d141",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 210,
        "y": 300,
        "wires": [
            [
                "6292e64e5cc00641",
                "85c2299db95842aa"
            ]
        ]
    },
    {
        "id": "6292e64e5cc00641",
        "type": "debug",
        "z": "21806d7921e0acd4",
        "name": "debug 116",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 430,
        "y": 280,
        "wires": []
    },
    {
        "id": "85c2299db95842aa",
        "type": "mqtt out",
        "z": "21806d7921e0acd4",
        "name": "",
        "topic": "AMPL/Energymeter/Ground",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "7f29005b7899d141",
        "x": 480,
        "y": 320,
        "wires": []
    },
    {
        "id": "d9301260b1e8dcdc",
        "type": "comment",
        "z": "21806d7921e0acd4",
        "name": "Calculated Fields",
        "info": "var lastIndex = test.values.size() - 1;\n\n// Get first and last *objects*\nvar firstObj = test.values.get(0);\nvar lastObj = test.values.get(lastIndex);\n\n// Extract just the numeric values\nvar firstValue = firstObj.value;\nvar lastValue = lastObj.value;\n\n// Calculate difference\nvar detail = firstValue - lastValue;\n\nreturn {\n    value: lastValue,   // last numeric value\n    value1: firstValue, // first numeric value\n    details: detail     // difference\n};\n\n\n\n\n\n\n\n// Get first and second objects\nvar firstObj = test1.values.get(0);\nvar secondObj = test1.values.get(1);\n\n// Extract numeric values\nvar firstValue = firstObj.value;\nvar secondValue = secondObj.value;\n\n// Calculate difference (optional)\nvar detail = firstValue - secondValue;\n\nreturn {\n    first: firstValue,\n    second: secondValue,\n    difference: detail\n};",
        "x": 860,
        "y": 300,
        "wires": []
    },
    {
        "id": "c1a16236234615de",
        "type": "mqtt out",
        "z": "21806d7921e0acd4",
        "name": "",
        "topic": "sensor/data/sen55",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d23f54c5318a2fcd",
        "x": 590,
        "y": 180,
        "wires": []
    },
    {
        "id": "d31c078acf963767",
        "type": "mqtt in",
        "z": "d9cd39ad889ab371",
        "name": "",
        "topic": "Device/sensor/PT100",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "85fc58de720ca0e8",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 320,
        "y": 180,
        "wires": [
            [
                "9cd8f4413d3d6ae6"
            ]
        ]
    },
    {
        "id": "9cd8f4413d3d6ae6",
        "type": "debug",
        "z": "d9cd39ad889ab371",
        "name": "debug 31",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 180,
        "wires": []
    },
    {
        "id": "d24df5891a82b464",
        "type": "inject",
        "z": "e4f387899e137f5c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"pv\": 10, \"sp\": 20}",
        "payloadType": "str",
        "x": 530,
        "y": 160,
        "wires": [
            [
                "ad8e89c17c4a1251",
                "de0e5e1c06ec259d"
            ]
        ]
    },
    {
        "id": "ad8e89c17c4a1251",
        "type": "exec",
        "z": "e4f387899e137f5c",
        "command": "/home/ABS/pid-venv/bin/python /home/ABS/echo_test.py",
        "addpay": "payload",
        "append": "pv,sp",
        "useSpawn": "true",
        "timer": "5",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 790,
        "y": 360,
        "wires": [
            [
                "99b73a42af933a9b"
            ],
            [
                "3e279dbf4015496b"
            ],
            [
                "8bec468ed5e05f71"
            ]
        ]
    },
    {
        "id": "99b73a42af933a9b",
        "type": "debug",
        "z": "e4f387899e137f5c",
        "name": "debug 39",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 260,
        "wires": []
    },
    {
        "id": "25c04b3723603ee1",
        "type": "function",
        "z": "e4f387899e137f5c",
        "name": "function 49",
        "func": "msg.payload = JSON.stringify({\n    pv: 10,\n    sp: 20,\n    kp: 2,\n    ki: 1,\n    kd: 0.5\n});\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "3e279dbf4015496b",
        "type": "debug",
        "z": "e4f387899e137f5c",
        "name": "debug 40",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 340,
        "wires": []
    },
    {
        "id": "8bec468ed5e05f71",
        "type": "debug",
        "z": "e4f387899e137f5c",
        "name": "debug 41",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1154.8125,
        "y": 401.8125,
        "wires": []
    },
    {
        "id": "de0e5e1c06ec259d",
        "type": "debug",
        "z": "e4f387899e137f5c",
        "name": "debug 42",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 120,
        "wires": []
    },
    {
        "id": "ed435b0fbf7fb36d",
        "type": "function",
        "z": "80f453a0456b8b82",
        "g": "5e96725d744eaa37",
        "name": "Store to context",
        "func": "// Values in mm\nvar a = msg.payload[0]; // TopTank in mm\nflow.set('ttm', a);\n\nvar b = msg.payload[1]; // UnderTank in mm\nflow.set('utm', b);\n\n\n// Conversion factor: 4.825 litres per mm\nvar upvalueInLitres = 5.002;\nvar downvalueInLitres = 4.825;\n\n// Total tank capacity in litres (example values, replace with actual capacities)\nvar TopTankCapacity = 5102; // Maximum capacity for TopTank in litres\nvar UnderTankCapacity = 6080; // Maximum capacity for UnderTank in litres\n\n// Calculate values\nvar TopTankLitres = a * upvalueInLitres;\nflow.set('ttl', TopTankLitres);\n\nvar UnderTankLitres = b * downvalueInLitres;\nflow.set('ugl', UnderTankLitres);\n\n// Calculate percentages\nvar TopTankPercentage = (TopTankLitres / TopTankCapacity) * 100;\nflow.set('ttp', TopTankPercentage);\n\nvar UnderTankPercentage = (UnderTankLitres / UnderTankCapacity) * 100;\nflow.set('utp', UnderTankPercentage);\n\nvar TOP_PLUS_UG = TopTankLitres + UnderTankLitres;\nflow.set('totalwater', TOP_PLUS_UG);\n\n// Construct the payload\n\n// msg.payload = {\n//     UnderLitres: UnderTankLitres\n// }\n\n// return msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 200,
        "wires": [
            [
                "01756e6ad09a4f9f"
            ]
        ]
    },
    {
        "id": "e25b1a76bb893852",
        "type": "debug",
        "z": "80f453a0456b8b82",
        "g": "5e96725d744eaa37",
        "name": "debug 14",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 100,
        "wires": []
    },
    {
        "id": "4e1a4bfb2e17433c",
        "type": "mqtt in",
        "z": "80f453a0456b8b82",
        "g": "4a1602ff16ab2894",
        "name": "",
        "topic": "v1/devices/me/rpc/request/+",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "ea8d26bb2b04da52",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 980,
        "y": 760,
        "wires": [
            [
                "bdd04b06f2e55caf",
                "b7b3a3476fdcd2b6",
                "4b917623582131ce"
            ]
        ]
    },
    {
        "id": "bdd04b06f2e55caf",
        "type": "function",
        "z": "80f453a0456b8b82",
        "g": "4a1602ff16ab2894",
        "name": "Mode Selection",
        "func": "if (msg.payload.method === \"modeSelection\") {\n    return { payload: msg.payload.params };  // Wrap the string in an object\n} ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 720,
        "wires": [
            [
                "7d4526acdef6684a",
                "4da8e6b1bcfe00c4"
            ]
        ]
    },
    {
        "id": "b7b3a3476fdcd2b6",
        "type": "function",
        "z": "80f453a0456b8b82",
        "g": "4a1602ff16ab2894",
        "name": "Valve control",
        "func": "if (msg.payload.method === \"setState\") {\n    return { payload: msg.payload.params };  // Wrap the string in an object\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 760,
        "wires": [
            [
                "a1bc34c86c21e093",
                "f2ec5bf7467ff3b8"
            ]
        ]
    },
    {
        "id": "f2ec5bf7467ff3b8",
        "type": "debug",
        "z": "80f453a0456b8b82",
        "g": "4a1602ff16ab2894",
        "name": "debug 5",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1480,
        "y": 780,
        "wires": []
    },
    {
        "id": "3644d9ab18a430c7",
        "type": "debug",
        "z": "80f453a0456b8b82",
        "g": "4a1602ff16ab2894",
        "name": "debug 6",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1480,
        "y": 860,
        "wires": []
    },
    {
        "id": "4b917623582131ce",
        "type": "function",
        "z": "80f453a0456b8b82",
        "g": "4a1602ff16ab2894",
        "name": "Motor Control",
        "func": "if (msg.payload.method === \"setmotor\") {\n    return { payload: msg.payload.params };  // Wrap the string in an object\n} ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 800,
        "wires": [
            [
                "3644d9ab18a430c7",
                "0135eac0d08c77aa"
            ]
        ]
    },
    {
        "id": "dcfa105875f39316",
        "type": "debug",
        "z": "80f453a0456b8b82",
        "g": "75983bbd6ac30d95",
        "name": "debug 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 300,
        "wires": []
    },
    {
        "id": "12cafad8e41b8938",
        "type": "debug",
        "z": "80f453a0456b8b82",
        "g": "dccc7c8251b52ce8",
        "name": "debug 18",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 460,
        "wires": []
    },
    {
        "id": "4da8e6b1bcfe00c4",
        "type": "debug",
        "z": "80f453a0456b8b82",
        "g": "4a1602ff16ab2894",
        "name": "debug 30",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1480,
        "y": 700,
        "wires": []
    },
    {
        "id": "aeb6da7f85a0d0f5",
        "type": "modbus-read",
        "z": "80f453a0456b8b82",
        "g": "5e96725d744eaa37",
        "name": "",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "HoldingRegister",
        "adr": "4197",
        "quantity": "4",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "7ef85feec8cfd696",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 170,
        "y": 200,
        "wires": [
            [
                "ed435b0fbf7fb36d",
                "7cea03b4faefd0b9"
            ],
            []
        ]
    },
    {
        "id": "377084a34de35c07",
        "type": "modbus-read",
        "z": "80f453a0456b8b82",
        "g": "75983bbd6ac30d95",
        "name": "valve status",
        "topic": "office/level",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Coil",
        "adr": "1281",
        "quantity": "1",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "e6061f97cd692ea3",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 170,
        "y": 320,
        "wires": [
            [
                "8aeb43e5192ec39b",
                "07d2da6b7059d242"
            ],
            []
        ]
    },
    {
        "id": "d7de9b2ded6fb737",
        "type": "modbus-read",
        "z": "80f453a0456b8b82",
        "g": "dccc7c8251b52ce8",
        "name": "motor status",
        "topic": "office/level",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Coil",
        "adr": "1280",
        "quantity": "1",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "e6061f97cd692ea3",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 170,
        "y": 540,
        "wires": [
            [
                "bb4bf94a6209a5bb",
                "1f8baa5f8c7cec60"
            ],
            []
        ]
    },
    {
        "id": "7cea03b4faefd0b9",
        "type": "modbus-response",
        "z": "80f453a0456b8b82",
        "g": "5e96725d744eaa37",
        "name": "",
        "registerShowMax": 20,
        "x": 570,
        "y": 200,
        "wires": []
    },
    {
        "id": "8aeb43e5192ec39b",
        "type": "modbus-response",
        "z": "80f453a0456b8b82",
        "g": "75983bbd6ac30d95",
        "name": "",
        "registerShowMax": 20,
        "x": 370,
        "y": 360,
        "wires": []
    },
    {
        "id": "bb4bf94a6209a5bb",
        "type": "modbus-response",
        "z": "80f453a0456b8b82",
        "g": "dccc7c8251b52ce8",
        "name": "",
        "registerShowMax": 20,
        "x": 470,
        "y": 580,
        "wires": []
    },
    {
        "id": "a1bc34c86c21e093",
        "type": "modbus-write",
        "z": "80f453a0456b8b82",
        "g": "4a1602ff16ab2894",
        "name": "Valve Control(M)",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Coil",
        "adr": "2348",
        "quantity": "1",
        "server": "01d9b3416f11dbd1",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1430,
        "y": 740,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "7d4526acdef6684a",
        "type": "modbus-write",
        "z": "80f453a0456b8b82",
        "g": "4a1602ff16ab2894",
        "name": "Mode selection",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Coil",
        "adr": "2560",
        "quantity": "1",
        "server": "01d9b3416f11dbd1",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1420,
        "y": 660,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "0135eac0d08c77aa",
        "type": "modbus-write",
        "z": "80f453a0456b8b82",
        "g": "4a1602ff16ab2894",
        "name": "Motor Control(M)",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Coil",
        "adr": "2349",
        "quantity": "1",
        "server": "01d9b3416f11dbd1",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1430,
        "y": 820,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "c72a753f48ac18cc",
        "type": "modbus-read",
        "z": "80f453a0456b8b82",
        "g": "7290f8343757911d",
        "name": "Auto Running",
        "topic": "office/level",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Coil",
        "adr": "2058",
        "quantity": "1",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": true,
        "startDelayTime": "",
        "server": "e6061f97cd692ea3",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 170,
        "y": 680,
        "wires": [
            [
                "e044d98988a640e2"
            ],
            [
                "ef909e9f9fac275f"
            ]
        ]
    },
    {
        "id": "2e8c60649eeceb8e",
        "type": "debug",
        "z": "80f453a0456b8b82",
        "g": "7290f8343757911d",
        "name": "debug 32",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 740,
        "wires": []
    },
    {
        "id": "e044d98988a640e2",
        "type": "function",
        "z": "80f453a0456b8b82",
        "g": "7290f8343757911d",
        "name": "function 30",
        "func": "// // Convert true/false to 1/0\nvar autoRunning = msg.payload [0]?1:0;\nflow.set(\"auto_Running\", autoRunning);\n\n// // Format the data as JSON for ThingsBoard\nmsg.payload = {\n     \"auto_Running\": autoRunning\n };\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 680,
        "wires": [
            [
                "b104b5a8c68407ef"
            ]
        ]
    },
    {
        "id": "b58a132c7dd9a8fb",
        "type": "debug",
        "z": "80f453a0456b8b82",
        "g": "dccc7c8251b52ce8",
        "name": "debug 34",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 540,
        "wires": []
    },
    {
        "id": "ba9399433861454e",
        "type": "mqtt in",
        "z": "80f453a0456b8b82",
        "g": "dccc7c8251b52ce8",
        "name": "",
        "topic": "local/rpiserver",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "ea380550660ffbb0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 450,
        "y": 520,
        "wires": [
            [
                "7b54e9c753b7f94d",
                "b58a132c7dd9a8fb"
            ]
        ]
    },
    {
        "id": "b104b5a8c68407ef",
        "type": "function",
        "z": "80f453a0456b8b82",
        "g": "7290f8343757911d",
        "name": "function 35",
        "func": "// Get the current valve status from flow context\nvar currentStatus = flow.get(\"auto_Running\");\n\n// Get the previous stored status\nvar previousStatus = flow.get(\"previous_autoRunning\");\n\n// If previousStatus is null (first run), initialize it without sending a message\nif (previousStatus === null) {\n    flow.set(\"previous_autoRunning\", currentStatus);\n    return null; // Do not send a message on first run\n}\n\n// If status hasn't changed, return null (no message)\nif (currentStatus === previousStatus) {\n    return null;\n}\n\n// Update the stored status\nflow.set(\"previous_autoRunning\", currentStatus);\n\n// Format the data as JSON for ThingsBoard\nmsg.payload = { \"Auto_Running\": currentStatus };\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 680,
        "wires": [
            [
                "2e8c60649eeceb8e",
                "4e6b8623ba9d405d"
            ]
        ]
    },
    {
        "id": "7a634765374f4041",
        "type": "function",
        "z": "80f453a0456b8b82",
        "g": "5e96725d744eaa37",
        "name": "Level",
        "func": "msg.payload = {\n    // Separate individual values for TopTank\n    \"TopTank_mm\": flow.get('ttm'),\n    \"TopTank_litres\": flow.get('ttl'),  // Keep as a number\n    \"TopTank_percentage\": flow.get('ttp'),  // Keep as a number\n\n    // Separate individual values for UnderTank\n    \"UnderTank_mm\": flow.get('utm'),\n    \"UnderTank_litres\": flow.get('ugl'),  // Keep as a number\n    \"UnderTank_percentage\": flow.get('utp'),  // Keep as a number\n    \"TOP_PLUS_UG\": flow.get('totalwater')\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 100,
        "wires": [
            [
                "e25b1a76bb893852",
                "4e6b8623ba9d405d"
            ]
        ]
    },
    {
        "id": "c4f360da46b71f0b",
        "type": "inject",
        "z": "80f453a0456b8b82",
        "g": "5e96725d744eaa37",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 100,
        "wires": [
            [
                "7a634765374f4041"
            ]
        ]
    },
    {
        "id": "7b54e9c753b7f94d",
        "type": "function",
        "z": "80f453a0456b8b82",
        "g": "dccc7c8251b52ce8",
        "name": "function 42",
        "func": "// Cumulative flow MQTT se mil raha hai, isko flow context mein store karte hain\nvar cumulativeFlow = msg.payload;\nflow.set(\"CumulFlow\", cumulativeFlow);\n\nmsg.payload = {\n    \"cumulative_flow\": cumulativeFlow\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "1f8baa5f8c7cec60",
        "type": "function",
        "z": "80f453a0456b8b82",
        "g": "dccc7c8251b52ce8",
        "name": "function 43",
        "func": "// Motor status retrieve \nvar motorStatus = msg.payload[0] ? 1 : 0;\nvar previousStatus = flow.get(\"previous_motorStatus\");\nvar cumulativeFlow = flow.get(\"CumulFlow\");\n\n// Last ON timestamp\nvar lastOnTime = flow.get(\"motor_onTime\");\n\n// Retrieve previous start and stop flow values\nvar startFlow = flow.get(\"start\");\nvar stopFlow = flow.get(\"stop\");\n\n// Motor status ko store \nflow.set(\"motor_status\", motorStatus);\n\n// Ensure cumulative flow is valid\nif (cumulativeFlow === undefined || cumulativeFlow === null) {\n    return null;\n}\n\n// Initialize previousStatus on first run\nif (previousStatus === undefined || previousStatus === null) {\n    flow.set(\"previous_motorStatus\", motorStatus);\n    if (motorStatus === 1) {\n        flow.set(\"motor_onTime\", Date.now());\n    }\n    msg.payload = { \n        \"motor_status\": motorStatus, \n        \"motor\": motorStatus === 1 ? \"Pump ON\" : \"Pump OFF\",\n        \"cumulative_flow\": cumulativeFlow\n    };\n    node.warn(msg.payload);\n}\n\n// Agar status change nahi hua toh kuch mat bhejo\nif (motorStatus === previousStatus) {\n    return null;\n}\n\n// Update stored status\nflow.set(\"previous_motorStatus\", motorStatus);\n\n// Jab motor ON ho (0 → 1)\nif (motorStatus === 1) {\n    flow.set(\"motor_onTime\", Date.now());\n    startFlow = cumulativeFlow;\n    flow.set(\"start\", startFlow);\n    \n    msg.payload = { \n        \"motor_status\": 1,\n        \"motor\": \"Pump ON\",\n        \"cumulative_flow\": cumulativeFlow,\n        \"TimeM\":flow.get(\"time\")\n    };\n    return msg;\n}\n\n// Jab motor OFF ho (1 → 0)\nif (motorStatus === 0 && lastOnTime) {\n    var elapsedTime = Math.floor((Date.now() - lastOnTime) / 1000); // Convert milliseconds to seconds\n\n    var elapsedTimeMin = elapsedTime / 60; // minutes\n\n    flow.set(\"motor_onTime\", null);\n    \n\n    stopFlow = cumulativeFlow;\n    flow.set(\"stop\", stopFlow);\n\n    // Format elapsed time properly\n    var totalHours = Math.floor(elapsedTime / 3600);\n    var remainingMinutes = Math.floor((elapsedTime % 3600) / 60);\n    var remainingSeconds = elapsedTime % 60;\n    // var formattedTime = `${totalHours}_hrs_${remainingMinutes}_minutes_${remainingSeconds}_sec`;\n    var formattedTime = `${totalHours}_hrs_${remainingMinutes}_mins`;\n    //var fullMinutes = Math.floor(elapsedTime / 60); // total minutes (no seconds)\n    var fullMinutesM = flow.set(\"fullMinutesM\",Math.floor(elapsedTime / 60)); // total minutes (no seconds)\n\n    // Calculate total water pumped and round to 2 decimal places\n    var totalWaterPumped = ((parseFloat(stopFlow) - parseFloat(startFlow)) * 1000).toFixed(2);\n    \n    // Reset start and stop values\n    flow.set(\"start\", null);\n    flow.set(\"stop\", null);\n\n    var litersPerMinute = parseFloat(totalWaterPumped) / parseFloat(elapsedTimeMin)\n\n\n    msg.payload = { \n        \"motor_status\": 0,\n        \"motor\": \"Pump OFF\",\n        \"motor_on_duration\": formattedTime,\n        \"cumulative_flow\": cumulativeFlow,\n        \"start_flow\": startFlow,\n        \"stop_flow\": stopFlow,\n        \"totalWaterPumpedTop\": totalWaterPumped,\n        \"LPM_motor\": litersPerMinute.toFixed(2),\n        \"Pump_on_minutes\": flow.get(\"fullMinutesM\"),\n        \"TimeM\":flow.get(\"time\")\n    };\n    return msg;\n}\n\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 460,
        "wires": [
            [
                "12cafad8e41b8938",
                "4e6b8623ba9d405d"
            ]
        ]
    },
    {
        "id": "07d2da6b7059d242",
        "type": "function",
        "z": "80f453a0456b8b82",
        "g": "75983bbd6ac30d95",
        "name": "function 44",
        "func": "// Convert true/false to 1/0\nvar valveStatus = msg.payload[0] ? 1 : 0;\nflow.set(\"Valve_status\", valveStatus);\n\n// Get previous valve status\nvar previousValveStatus = flow.get(\"previous_ValveStatus\");\n\n// Get the current underground tank liters\nvar currentLitres = flow.get(\"utm\");\n\n// Retrieve stored values\nvar valveStart = flow.get(\"valveStart\");\nvar valveStop = flow.get(\"valveStop\");\nvar lastOnTime = flow.get(\"Valve_onTime\");\n\nvar now =  new Date();\nvar time = now.toLocaleTimeString('en-GB');  \nflow.set(\"time\",time);\n\n// Format data for ThingsBoard\nmsg.payload = {\n    \"Valve_status\": valveStatus\n};\n\n// Initialize previous status on first run\nif (previousValveStatus === undefined || previousValveStatus === null) {\n    flow.set(\"previous_ValveStatus\", valveStatus);\n    if (valveStatus === 1) {\n        flow.set(\"Valve_onTime\", Date.now());  // Store start time\n        flow.set(\"valveStart\", currentLitres); // Store liters when turned ON\n    }\n    return msg;\n}\n\n// If valve status has not changed, do nothing\nif (valveStatus === previousValveStatus) {\n    return null;\n}\n\n// Update previous valve status\nflow.set(\"previous_ValveStatus\", valveStatus);\n\n// When valve turns ON, store underground tank liters and start time\nif (valveStatus === 1) {\n    flow.set(\"Valve_onTime\", Date.now());\n    valveStart = currentLitres;\n    flow.set(\"valveStart\", valveStart);\n\n    msg.payload = {\n        \"Valve_status\": 1,\n        \"Valve\": \"Valve ON\",\n        \"valveStart\": valveStart,\n        \"TimeV\":flow.get(\"time\")\n    };\n    return msg;\n}\n\n// When valve turns OFF, store underground tank liters and calculate usage & duration\nif (valveStatus === 0) {\n    valveStop = currentLitres;\n    flow.set(\"valveStop\", valveStop);\n\n    var totalWaterUsed = 0;\n    if (!isNaN(valveStart) && !isNaN(valveStop)) {\n        totalWaterUsed = parseFloat(valveStop) - parseFloat(valveStart);\n    }\n\n    // Calculate ON duration\n    var elapsedTime = lastOnTime ? (Date.now() - lastOnTime) / 1000 : 0; // Convert ms to sec\n    var totalHours = Math.floor(elapsedTime / 3600);\n    var remainingMinutes = Math.floor((elapsedTime % 3600) / 60);\n    var remainingSeconds = Math.floor(elapsedTime % 60); // Corrected seconds calculation\n    // var formattedTime = `${totalHours}_hrs_${remainingMinutes}_minutes_${remainingSeconds}_sec`;\n    var formattedTime = `${totalHours}_hrs_${remainingMinutes}_mins`;\n    var fullMinutesV = flow.set(\"fullMinutesV\",Math.floor(elapsedTime / 60)); // total minutes (no seconds)\n\n    var totalLitres = totalWaterUsed * 4.825;\n    flow.set('midcwater', totalLitres);\n\n    // var LPM = (totalWaterUsed * 4.825) / (elapsedTime / 60)\n    var lpm = elapsedTime > 0 ? (totalLitres / (elapsedTime / 60)) : 0;\n\n\n\n    msg.payload = {\n        \"Valve_status\": 0,\n        \"Valve\": \"Valve OFF\",\n        \"Valve_on_duration\": formattedTime, // Corrected time format\n        \"valveStart\": valveStart,\n        \"valveStop\": valveStop,\n        \"totalWaterPumpedUnder\": totalLitres,\n        \"LPM_valve\": parseFloat(lpm.toFixed(2)),\n        \"Valve_on_minutes\": flow.get(\"fullMinutesV\"),\n        \"TimeV\":flow.get(\"time\")\n        // \"time_valve\": new Date().toLocaleTimeString('en-GB')\n    };\n\n    // Reset stored values\n    flow.set(\"valveStart\", null);\n    flow.set(\"valveStop\", null);\n    flow.set(\"Valve_onTime\", null);\n\n    return msg;\n}\n\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 300,
        "wires": [
            [
                "4e6b8623ba9d405d",
                "dcfa105875f39316"
            ]
        ]
    },
    {
        "id": "ef909e9f9fac275f",
        "type": "function",
        "z": "80f453a0456b8b82",
        "g": "7290f8343757911d",
        "name": "function 43",
        "func": "// Define threshold values for 'ttp' and 'utp'\nconst ttpThreshold = 55;  // Example threshold for ttp\nconst utpThreshold = 75;  // Example threshold for utp\n\n// Get current values from flow context\nvar autoRunning = flow.get(\"auto_Running\");\nvar ttp = flow.get(\"ttp\");\nvar utp = flow.get(\"utp\");\n\n// Get previous stored status\nvar previousAutoRunning = flow.get(\"previous_autoRunning\") || 1; // Default to 1 (running)\nvar previousAlertSent = flow.get(\"previousAlertSent\") || false; // Track if alert was already sent\n\n// Check if auto_Running is 0 and either ttp OR utp is below its threshold\nif (autoRunning === 0 && (ttp < ttpThreshold || utp < utpThreshold)) {\n    if (!previousAlertSent) {\n        // Send message only once\n        flow.set(\"previousAlertSent\", true); // Mark alert as sent\n        msg.payload = JSON.stringify({  // Convert to string\n            \"ALERT\": \"Auto Running stopped! Check Overhead Tank Percentage & Underground Tank Percentage.\", \n            \"Auto_Running\": autoRunning, \n            \"Top_Tank_Percentage\": ttp, \n            \"Underground_Tank_Percentage\": utp \n        });\n        return msg;\n    } \n// } else {\n//     // Reset alert flag when conditions are not met\n//     flow.set(\"previousAlertSent\", false);\n// }\n\n// // Update stored status\n// flow.set(\"previous_autoRunning\", autoRunning);\n\nreturn null; // No message if conditions aren't met\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 720,
        "wires": [
            [
                "2e8c60649eeceb8e",
                "e9d2e127aa2f50aa"
            ]
        ]
    },
    {
        "id": "01756e6ad09a4f9f",
        "type": "debug",
        "z": "80f453a0456b8b82",
        "g": "5e96725d744eaa37",
        "name": "debug 37",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 160,
        "wires": []
    },
    {
        "id": "9ce438e97e0a0ebe",
        "type": "inject",
        "z": "80f453a0456b8b82",
        "d": true,
        "g": "7290f8343757911d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 760,
        "wires": [
            [
                "a66f299aba2b56dd"
            ]
        ]
    },
    {
        "id": "a66f299aba2b56dd",
        "type": "function",
        "z": "80f453a0456b8b82",
        "g": "7290f8343757911d",
        "name": "function 46",
        "func": "var a = flow.get('midcwater');\n\nif (a < 0) {\n    msg.topic = \"Alert: MIDC Water Pump Issue\";\n    msg.payload = \"The MIDC water reading is negative (\" + a + \"). This may indicate that water is not being pumped. Please check the system.\";\n    return msg; // Sends the message to the email node\n}\n\n// If value is not negative, do nothing\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 760,
        "wires": [
            [
                "2e8c60649eeceb8e",
                "e9d2e127aa2f50aa"
            ]
        ]
    },
    {
        "id": "307c6f4095d38804",
        "type": "modbus-read",
        "z": "80f453a0456b8b82",
        "g": "979607fe3e2bf2cc",
        "name": "Relay",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Input",
        "adr": "1025",
        "quantity": "1",
        "rate": "2",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "e6061f97cd692ea3",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 130,
        "y": 1660,
        "wires": [
            [
                "d081bb4c128c1470"
            ],
            []
        ]
    },
    {
        "id": "daa150e27ab35291",
        "type": "debug",
        "z": "80f453a0456b8b82",
        "g": "979607fe3e2bf2cc",
        "name": "debug 38",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 1660,
        "wires": []
    },
    {
        "id": "d081bb4c128c1470",
        "type": "function",
        "z": "80f453a0456b8b82",
        "g": "979607fe3e2bf2cc",
        "name": "function 47",
        "func": "// // Convert true/false to 1/0\nvar RelayStatus = msg.payload [0]?1:0;\nflow.set(\"RelayStatus\", RelayStatus);\n\n// // Format the data as JSON for ThingsBoard\nmsg.payload = {\n    \"RelayStatus\": RelayStatus\n };\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 1660,
        "wires": [
            [
                "daa150e27ab35291"
            ]
        ]
    },
    {
        "id": "c58d3dba93b14599",
        "type": "function",
        "z": "80f453a0456b8b82",
        "g": "ef4637834bce4f91",
        "name": "function 48",
        "func": "var a = flow.get('RelayStatus');\n\nmsg.payload = a;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1760,
        "wires": [
            [
                "2eaf39c6440e65bc"
            ]
        ]
    },
    {
        "id": "2eaf39c6440e65bc",
        "type": "mqtt out",
        "z": "80f453a0456b8b82",
        "g": "ef4637834bce4f91",
        "name": "",
        "topic": "local/rpiserver3",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "23a89b23442543e0",
        "x": 520,
        "y": 1760,
        "wires": []
    },
    {
        "id": "3431abb53053f8c7",
        "type": "function",
        "z": "80f453a0456b8b82",
        "g": "80116ec6cfc99089",
        "name": "function 50",
        "func": "// Raw Values from Sensor\nvar a = msg.payload[0]; // TopTank \nflow.set('topTankRaw', a);\n\nvar b = msg.payload[1]; // UnderTank \nflow.set('ugTankRaw', b);\n\n// Calculation i.e Scaling part\n// for top tank\nlet t_input_min = 200;\nlet t_input_max = 1000;\nlet t_output_min = 0;\nlet t_output_max = 2000;\nlet t_scaled = ((a - t_input_min) * (t_output_max - t_output_min)) / \n             (t_input_max - t_input_min) + t_output_min;\n\n//For Undergroung tank\nlet u_input_min = 200;\nlet u_input_max = 1000;\nlet u_output_min = 0;\nlet u_output_max = 2000;\nlet u_scaled = ((b - u_input_min) * (u_output_max - u_output_min)) / \n             (u_input_max - u_input_min) + u_output_min;\n\nmsg.payload = {\n    toptankmm: t_scaled,\n    ugtankmm: u_scaled\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1900,
        "wires": [
            [
                "21ff56ae4a82e2f5"
            ]
        ]
    },
    {
        "id": "228cfd92882e603e",
        "type": "modbus-read",
        "z": "80f453a0456b8b82",
        "g": "80116ec6cfc99089",
        "name": "",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "HoldingRegister",
        "adr": "4107",
        "quantity": "2",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "7ef85feec8cfd696",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 150,
        "y": 1900,
        "wires": [
            [
                "3431abb53053f8c7"
            ],
            []
        ]
    },
    {
        "id": "21ff56ae4a82e2f5",
        "type": "debug",
        "z": "80f453a0456b8b82",
        "g": "80116ec6cfc99089",
        "name": "debug 43",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 1900,
        "wires": []
    },
    {
        "id": "ecbdaf3e95ecf645",
        "type": "function",
        "z": "80f453a0456b8b82",
        "d": true,
        "name": "function 56",
        "func": "// Convert boolean to 1 or 0\nlet value = msg.payload === true ? 1 : 0;\n\n// Save to context with topic name\nif (msg.topic === \"bypassPumpTrip\") {\n    flow.set(\"bypassPumpTrip\", value);\n}\nelse if (msg.topic === \"inputPumpTrip\") {\n    flow.set(\"inputPumpTrip\", value);\n}\n\n// Optional: return all stored values for debug\nmsg.payload = {\n    bypassPumpTrip: flow.get(\"bypassPumpTrip\"),\n    inputPumpTrip: flow.get(\"inputPumpTrip\")\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 2280,
        "wires": [
            [
                "7b6fda7ca033f1fb"
            ]
        ]
    },
    {
        "id": "e52bdd5abf67d1df",
        "type": "function",
        "z": "80f453a0456b8b82",
        "d": true,
        "name": "function 58",
        "func": "//Alarm \nvar bypumpT = flow.get(\"bypassPumpTrip\");\nvar pumpT = flow.get(\"inputPumpTrip\");\nvar alarmAck = flow.get(\"alarmAck\"); \nlet pumptrip = 0;\nlet critAlarm = 0;\nif (bypumpT === 0 && pumpT === 0) {\n    pumptrip = 1;\n    flow.set(\"pumptrip\", pumptrip);\n}\nif (pumptrip === 1) {\n    critAlarm = 1;\n    flow.set(\"critAlarm\", critAlarm);\n}\n// Alarm acknowledge \nif (alarmAck === 1) {\n    pumptrip = 0;\n    flow.set(\"pumptrip\", pumptrip);\n}\n\n//Auto Running\nlet autoRun = 0;\nif (flow.get(\"critAlarm\") === 0 && flow.get(\"auto_running\") === 0) {\n    autoRun = 1; \n    flow.set(\"autoRun\", autoRun);\n}\n//Auto(valve and pump)\nlet valve = 0;\nlet pump = 0 ;\nlet auto_running = flow.get(\"auto_running\");\nif (auto_running === 1){\n    if (auto_running === 1 && flow.get(\"UnderTank_percentage\") < 90) {\n        valve = 1;\n        flow.set(\"valve\", valve);\n    } else if (flow.get(\"UnderTank_percentage\") >= 98) {\n        valve = 0;\n        flow.set(\"valve\", valve);\n    }\n    if (auto_running === 1 && flow.get(\"TopTank_percentage\") < 55 && flow.get(\"UnderTank_percentage\") > 30) {\n        pump = 1;\n        flow.set(\"autoRun\", autoRun);\n    } else if (flow.get(\"TopTank_percentage\") >= 98 || flow.get(\"UnderTank_percentage\") <= 30) {\n        pump = 0;\n        flow.set(\"autoRun\", autoRun);\n    }\n}\n//Manual\nlet valve_on = 0;\nlet pump_on = 0;\nif (auto_running === 0){\n    if (valve_on === 1 && flow.get(\"UnderTank_percentage\") < 90) {\n        valve = 1;\n    } else if (flow.get(\"UnderTank_percentage\") >= 98) {\n        valve = 0;\n    }\n    if (pump_on === 0 && flow.get(\"TopTank_percentage\") < 55 && flow.get(\"UnderTank_percentage\") > 30) {\n        pump = 1;\n    } else if (flow.get(\"TopTank_percentage\") >= 98 || flow.get(\"UnderTank_percentage\") <= 30) {\n        pump = 0;\n    }\n}\n\nmsg.payload = {\n    bypumpT: bypumpT,\n    pumpT: pumpT,\n    pumptrip: pumptrip,\n    critAlarm : critAlarm,\n    valve : valve,\n    pump : pump\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 2200,
        "wires": [
            []
        ]
    },
    {
        "id": "1f0f1c9f62bc9c0d",
        "type": "inject",
        "z": "80f453a0456b8b82",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 2400,
        "wires": [
            [
                "451599dd0ad0ce6f"
            ]
        ]
    },
    {
        "id": "f464f56a165f46cd",
        "type": "debug",
        "z": "80f453a0456b8b82",
        "d": true,
        "name": "debug 48",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 2560,
        "wires": []
    },
    {
        "id": "b0ec5bcfa1ad9675",
        "type": "inject",
        "z": "80f453a0456b8b82",
        "d": true,
        "name": "Bypass",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "bypassPumpTrip",
        "payload": "true",
        "payloadType": "bool",
        "x": 90,
        "y": 2280,
        "wires": [
            [
                "ecbdaf3e95ecf645"
            ]
        ]
    },
    {
        "id": "7adbec17b1f6c967",
        "type": "inject",
        "z": "80f453a0456b8b82",
        "d": true,
        "name": "input pump trip",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "inputPumpTrip",
        "payload": "true",
        "payloadType": "bool",
        "x": 120,
        "y": 2340,
        "wires": [
            [
                "ecbdaf3e95ecf645"
            ]
        ]
    },
    {
        "id": "7b6fda7ca033f1fb",
        "type": "debug",
        "z": "80f453a0456b8b82",
        "d": true,
        "name": "debug 49",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 2280,
        "wires": []
    },
    {
        "id": "42f1911728262980",
        "type": "function",
        "z": "80f453a0456b8b82",
        "d": true,
        "name": "function 60",
        "func": "// ====== INPUTS ======\nlet bypumpT = flow.get(\"bypassPumpTrip\"); //M513\nlet pumpT = flow.get(\"inputPumpTrip\"); //X0\nlet alarmAck = flow.get(\"alarmAck\"); //M4\nlet autoMode = flow.get(\"autoMode\");  //M10\nlet modeSelection = flow.get(\"auto_Running\"); //M512\nlet valve_on = flow.get(\"valve_on\"); //Y0\nlet pump_on = flow.get(\"pump_on\"); //Y1\n\nlet underTank = 98; //flow.get(\"UnderTank_percentage\");\nlet topTank =90; //flow.get(\"TopTank_percentage\");\n\nlet lastUnderLevel = flow.get(\"lastUnderLevel\") || underTank;\nlet lastTopLevel = flow.get(\"lastTopLevel\") || topTank;\n\nlet now = Date.now();\nlet date = new Date();\nlet hour = 12; //date.getHours();\nlet minute = date.getMinutes();\n\n// ====== ALARM LOGIC ======\nlet pumptrip = flow.get(\"pumptrip\") || 0;\nlet critAlarm = flow.get(\"critAlarm\") || 0;\n\nif (bypumpT === 0 && pumpT === 0) {\n    pumptrip = 1;\n}else {pumptrip =0\n}\nif (alarmAck === 1) {\n    pumptrip = 0;\n}\ncritAlarm = pumptrip;\n\nflow.set(\"pumptrip\", pumptrip);\nflow.set(\"critAlarm\", critAlarm);\n\n// ====== AUTO MODE LATCH ======\n//let auto_running = flow.get(\"auto_running\") || 0;\nif (modeSelection === 1 && critAlarm === 0) {\n    autoMode = 1;\n} else {\n    autoMode = 0;\n}\nflow.set(\"autoMode\", autoMode);\n\n// ====== VALVE AND PUMP CONTROL ======\nlet valve = 0;\nlet pump = 0;\n\n// ---- AUTO MODE ----\nif (autoMode === 1) {\n    // PUMP START CONDITION\n    if (topTank <= 55 && underTank > 30) {\n        let pumpStartTimer = flow.get(\"pumpStartTimer\") || null;\n        if (!pumpStartTimer) flow.set(\"pumpStartTimer\", now);\n        else if (now - pumpStartTimer >= 10000) pump = 1;\n    } else {\n        flow.set(\"pumpStartTimer\", null);\n    }\n\n    if (topTank >= 90 || underTank <= 30) {\n        pump = 0;\n        flow.set(\"pumpStartTimer\", null);\n    }\n\n    // VALVE CONDITION (Pump-driven or level-based)\n    if (pump === 1) {\n        valve = 1;\n        flow.set(\"valve_from_pump\", true);\n    } else if (underTank < 90) {\n        let valveTimer = flow.get(\"valveDelayTimer\") || null;\n        if (!valveTimer) flow.set(\"valveDelayTimer\", now);\n        else if (now - valveTimer >= 10000) valve = 1;\n    } else {\n        flow.set(\"valveDelayTimer\", null);\n    }\n\n    if (underTank >= 98) valve = 0;\n}\n\n// ---- MANUAL MODE ----\nif (autoMode === 0) {\n    if (valve_on === 1 && underTank < 90){ valve = 1;}\n    else if (underTank >= 98) {valve = 0;}\n\n    if (pump_on === 1 && topTank < 55 && underTank > 30) pump = 1;\n    else if (topTank >= 98 || underTank <= 30) pump = 0;\n}\n\n// ====== 2AM NIGHTTIME VALVE ROUTINE ======\n\nlet nightValveFlag = flow.get(\"nightValveFlag\") || false;\nif (hour === 2 && !nightValveFlag) {\n    valve = 1;\n    flow.set(\"nightValveFlag\", true);\n    flow.set(\"nightValveStart\", now);\n} else if (hour !== 2) {\n    flow.set(\"nightValveFlag\", false);\n}\n\nif (flow.get(\"nightValveStart\")) {\n    if (underTank >= 98) {\n        valve = 0;\n        flow.set(\"nightValveStart\", null);\n    } else if (now - flow.get(\"nightValveStart\") >= 20 * 60 * 1000 && underTank <= lastUnderLevel) {\n        flow.set(\"emailNight\", \"Valve ON since 2 AM but tank level not increasing.\");\n        valve = 0;\n    }\n}\n\n// ====== MIDC WATER MISSING DETECTION ======\nif (pump === 0 && valve === 1 && underTank <= lastUnderLevel) {\n    flow.set(\"emailMIDC\", \"Pump OFF but valve ON and UnderTank level not increasing.\");\n}else {flow.set(\"emailMIDC\", null);}\n\n// ====== PUMP SAFETY SHUTDOWN ======\nlet pumpStartTime = flow.get(\"pumpStartTime\") || null;\nif (pump === 1 && !pumpStartTime) {\n    flow.set(\"pumpStartTime\", now);\n} else if (pump === 1 && topTank <= lastTopLevel && now - pumpStartTime >= 2 * 60 * 1000) {\n    pump = 0;\n    flow.set(\"emailPump\", \"Pump turned OFF: TopTank not increasing. Safety shutdown triggered.\");\n    flow.set(\"pumpRetryTime\", now + 15 * 60 * 1000);  // 15 min later\n    flow.set(\"pumpRetryEnabled\", true);\n    flow.set(\"pumpStartTime\", null);\n}else{ flow.set(\"emailPump\",null);}\n\nif (flow.get(\"pumpRetryEnabled\") && now >= flow.get(\"pumpRetryTime\")) {\n    if (topTank <= lastTopLevel) {\n        pump = 0;\n        flow.set(\"emailPumpFinal\", \"Pump permanently OFF: TopTank still not increasing after retry.\");\n        flow.set(\"pumpRetryEnabled\", false);\n    } else {\n        pump = 1; // retry successful\n        flow.set(\"pumpRetryEnabled\", false);\n        flow.set(\"emailPumpFinal\", null);\n    }\n}\n\n// ====== AUTO MODE RESET AFTER 30 MIN ======\nlet autoModeChangeTime = flow.get(\"autoModeChangeTime\") || null;\nif (autoMode === 0 && !autoModeChangeTime) {\n    flow.set(\"autoModeChangeTime\", now);\n} else if (autoMode === 0 && now - autoModeChangeTime >= 30 * 60 * 1000) {\n    flow.set(\"autoMode\", 1);  // restore\n    flow.set(\"autoModeChangeTime\", null);\n} else if (autoMode === 1) {\n    flow.set(\"autoModeChangeTime\", null);\n}\n\n// ====== UPDATE LAST LEVELS ======\nflow.set(\"lastUnderLevel\", underTank);\nflow.set(\"lastTopLevel\", topTank);\n\n// ====== OUTPUT PAYLOAD ======\nmsg.payload = {\n    bypumpT : bypumpT,\n    pumpT : pumpT,\n    pumptrip: pumptrip,\n    critAlarm: critAlarm,\n    modeSelection : modeSelection,\n    autoMode: autoMode,\n    valve_on : valve_on,\n    pump_on :pump_on,\n    nightValveFlag : nightValveFlag,\n    valve: valve,\n    pump: pump,\n    emails: {\n        night: flow.get(\"emailNight\") || null,\n        midc: flow.get(\"emailMIDC\") || null,\n        pump: flow.get(\"emailPump\") || null,\n        pumpFinal: flow.get(\"emailPumpFinal\") || null\n    }\n};\nreturn msg;\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 2240,
        "wires": [
            []
        ]
    },
    {
        "id": "451599dd0ad0ce6f",
        "type": "function",
        "z": "80f453a0456b8b82",
        "d": true,
        "name": "function 61",
        "func": "// ========== INPUTS ==========\nlet bypumpT = flow.get(\"bypassPumpTrip\");\nlet pumpT = flow.get(\"inputPumpTrip\");\nlet alarmAck = flow.get(\"alarmAck\");\nlet modeSelection = flow.get(\"auto_Running\");\n\nlet valve_on = 0;\nlet pump_on = 0;\n\nflow.set(\"underTank\", 89);\nflow.set(\"topTank\", 54);\n\nlet underTank = flow.get(\"underTank\");\nlet topTank = flow.get(\"topTank\");\n\nlet lastUnderLevel = flow.get(\"lastUnderLevel\") || underTank;\nlet lastTopLevel = flow.get(\"lastTopLevel\") || topTank;\n\nlet now = Date.now();\nlet hour = new Date().getHours();\n\n// ========== ALARM HANDLING ==========\nlet pumptrip = flow.get(\"pumptrip\") || 0;\nlet critAlarm = flow.get(\"critAlarm\") || 0;\n\nif (bypumpT === 0 && pumpT === 0) pumptrip = 1;\nelse pumptrip = 0;\n\nif (alarmAck === 1) {\n    pumptrip = 0;\n    flow.set(\"lockPumpControl\", false);\n    flow.set(\"lockValveControl\", false);\n}\n\ncritAlarm = pumptrip;\n\nflow.set(\"pumptrip\", pumptrip);\nflow.set(\"critAlarm\", critAlarm);\n\n// ========== AUTO MODE ==========\nlet autoMode = 0;\nif (modeSelection === 1 && critAlarm === 0) autoMode = 1;\nflow.set(\"autoMode\", autoMode);\n\n// ========== CONTROL ==========\nlet valve = flow.get(\"valve\") || 0;\nlet pump = flow.get(\"pump\") || 0;\n\nlet lockPump = flow.get(\"lockPumpControl\") || false;\nlet lockValve = flow.get(\"lockValveControl\") || false;\n\n// === FORCE SHUTDOWN CHECK ===\nlet forceShutdown = flow.get(\"forceShutdown\") || false;\nif (forceShutdown) {\n    valve = 0;\n    pump = 0;\n    flow.set(\"forceShutdown\", false);\n    flow.set(\"valveDelayTimer\", null);\n    flow.set(\"pumpStartTimer\", null);\n    flow.set(\"pump\", pump);\n    flow.set(\"valve\", valve);\n    return null;\n}\n\n// === PRESERVE RETRY STATE ===\nlet retryPump = flow.get(\"pumpRetryInProgress\") || false;\nlet retryValve = flow.get(\"valveRetryInProgress\") || false;\n\nif (retryPump || retryValve) {\n    pump = flow.get(\"pump\") || 0;\n    valve = flow.get(\"valve\") || 0;\n    flow.set(\"pump\", pump);\n    flow.set(\"valve\", valve);\n    return null;\n}\n\n// ---- AUTO MODE ----\nif (autoMode === 1) {\n    if (!lockPump && topTank <= 55 && underTank > 30) {\n        let pumpStartTimer = flow.get(\"pumpStartTimer\") || null;\n        if (!pumpStartTimer) flow.set(\"pumpStartTimer\", now);\n        else if (now - pumpStartTimer >= 10000) pump = 1;\n    } else flow.set(\"pumpStartTimer\", null);\n\n    if (topTank >= 90 || underTank <= 30 || flow.get(\"shutdownPump\") == true) {\n        pump = 0;\n        flow.set(\"pumpStartTimer\", null);\n        flow.set(\"shutdownPump\", false);\n    }\n\n    if (!lockValve && pump === 1) {\n        valve = 1;\n        flow.set(\"valve_from_pump\", true);\n    } else if (!lockValve && underTank < 90) {\n        let valveTimer = flow.get(\"valveDelayTimer\") || null;\n        if (!valveTimer) flow.set(\"valveDelayTimer\", now);\n        else if (now - valveTimer >= 10000) valve = 1;\n    } else flow.set(\"valveDelayTimer\", null);\n\n    if (underTank >= 98 || flow.get(\"shutdownValve\") == true) {\n        valve = 0;\n        flow.set(\"shutdownValve\", false);\n    }\n}\n\n// ---- MANUAL MODE ----\nif (autoMode === 0) {\n    if (!lockValve && valve_on === 1 && underTank < 90) valve = 1;\n    else if (underTank >= 98 || flow.get(\"shutdownValve\") == true) {\n        valve = 0;\n        flow.set(\"shutdownValve\", false);\n    }\n\n    if (!lockPump && pump_on === 1 && topTank < 55 && underTank > 30) pump = 1;\n    else if (topTank >= 98 || underTank <= 30 || flow.get(\"shutdownPump\") == true) {\n        pump = 0;\n        flow.set(\"shutdownPump\", false);\n    }\n}\n\n// ========== STORE ==========\nflow.set(\"pump\", pump);\nflow.set(\"valve\", valve);\nflow.set(\"lastUnderLevel\", underTank);\nflow.set(\"lastTopLevel\", topTank);\n\n// ========== MQTT PAYLOAD ==========\nmsg.topic = \"v1/devices/me/telemetry\";\nmsg.payload = {\n    bypumpT,\n    pumpT,\n    pumptrip,\n    critAlarm,\n    modeSelection,\n    autoMode,\n    valve_on,\n    pump_on,\n    valve,\n    pump,\n    underTank,\n    topTank,\n    lastUnderLevel,\n    lastTopLevel,\n    midcIssueStart: flow.get(\"midcIssueStart\")\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 2400,
        "wires": [
            [
                "0bf8892ba490cd44",
                "193307fa7d23cf19",
                "52be4091182dd2b7"
            ]
        ]
    },
    {
        "id": "0bf8892ba490cd44",
        "type": "debug",
        "z": "80f453a0456b8b82",
        "d": true,
        "name": "debug 50",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 2400,
        "wires": []
    },
    {
        "id": "9ec0c7380a57200d",
        "type": "function",
        "z": "80f453a0456b8b82",
        "d": true,
        "name": "function 63",
        "func": "let now = Date.now();\nlet hour = new Date().getHours();\n\nlet underTank = flow.get(\"underTank\");\nlet topTank = flow.get(\"topTank\");\n\nlet lastUnderLevel = flow.get(\"lastUnderLevel\") || underTank;\nlet lastTopLevel = flow.get(\"lastTopLevel\") || topTank;\n\nlet pump = Number(flow.get(\"pump\")) || 0;\nlet valve = Number(flow.get(\"valve\")) || 0;\n\nlet emailMsg = null;\n\n// === MIDC WATER ALERT & VALVE RETRY ===\nlet midcRetryInProgress = flow.get(\"valveRetryInProgress\") || false;\nlet midcRetryFailed = flow.get(\"valveRetryFailed\") || false;\n\nif (!midcRetryInProgress && !midcRetryFailed) {\n    if (pump === 0 && valve === 1 && Math.floor(underTank) <= Math.floor(lastUnderLevel)) {\n        let midcStart = flow.get(\"midcIssueStart\") || null;\n        if (!midcStart) {\n            flow.set(\"midcIssueStart\", now);\n        } else if (now - midcStart >= 3 * 60 * 1000) {\n            flow.set(\"midcIssueStart\", null);\n            emailMsg = {\n                topic: \"Alert: MIDC Water Not Flowing\",\n                payload: `🚨 Valve ON, Pump OFF > 3min.UnderTank not increasing.\\nNow: ${ underTank }%\\nLast: ${ lastUnderLevel }%`\n            };\n        flow.set(\"shutdownValve\", true);\n        flow.set(\"valveRetryInProgress\", true);\n        flow.set(\"valveRetryTime\", now + 15 * 60 * 1000);\n        flow.set(\"lockValveControl\", true);\n        flow.set(\"lastUnderLevel\", underTank);\n    }\n} else {\n    flow.set(\"midcIssueStart\", null);\n}\n}\n\n// === VALVE RETRY ===\nif (midcRetryInProgress && now >= (flow.get(\"valveRetryTime\") || 0) && !flow.get(\"valveRetryStart\")) {\n    flow.set(\"valve\", 1);\n    flow.set(\"valveRetryStart\", now);\n    node.warn(\"🔄 MIDC valve retry started after 15 minutes.\");\n}\n\nif (flow.get(\"valveRetryStart\")) {\n    if (underTank > lastUnderLevel) {\n        node.warn(\"✅ MIDC valve retry successful — under tank is rising.\");\n        flow.set(\"valveRetryInProgress\", false);\n        flow.set(\"valveRetryStart\", null);\n        flow.set(\"valveRetryTime\", null);\n        flow.set(\"lockValveControl\", false);\n    } else if (now - flow.get(\"valveRetryStart\") >= 2 * 60 * 1000) {\n        flow.set(\"valve\", 0);\n        flow.set(\"valveRetryInProgress\", false);\n        flow.set(\"valveRetryStart\", null);\n        flow.set(\"valveRetryTime\", null);\n        flow.set(\"valveRetryFailed\", true);\n        flow.set(\"shutdownValve\", true);\n        flow.set(\"lockValveControl\", true);\n        emailMsg = {\n            topic: \"Alert: MIDC Valve Retry Failed\",\n            payload:`❌ Valve retry failed.UnderTank still not rising.\\nUnderTank: ${ underTank }%\\nLast: ${ lastUnderLevel }%`\n        };\n}\n}\n\n// === PUMP EFFECTIVENESS CHECK ===\nlet pumpStartTime = flow.get(\"pumpStartTime\") || null;\nlet retryInProgress = flow.get(\"pumpRetryInProgress\") || false;\n\nif (!retryInProgress) {\n    if (pump === 1 && !pumpStartTime) {\n        flow.set(\"pumpStartTime\", now);\n    } else if (pump === 1 && topTank <= lastTopLevel && now - pumpStartTime >= 2 * 60 * 1000) {\n        flow.set(\"pumpRetryTime\", now + 15 * 60 * 1000);\n        flow.set(\"pumpRetryInProgress\", true);\n        flow.set(\"pumpStartTime\", null);\n        flow.set(\"shutdownPump\", true);\n        flow.set(\"lockPumpControl\", true);\n        emailMsg = {\n            topic: \"Alert: Pump Auto-Shutdown\",\n            payload: `⚠️ Pump ran for 2 mins, TopTank not rising.\\nNow: ${ topTank }%\\nLast: ${ lastTopLevel }%`\n        };\n}\n}\n\n// === PUMP RETRY START ===\nif (retryInProgress && now >= (flow.get(\"pumpRetryTime\") || 0) && !flow.get(\"retryStartTime\")) {\n    flow.set(\"pump\", 1);\n    flow.set(\"retryStartTime\", now);\n    node.warn(\"🔄 Pump retry started after 15 minutes.\");\n}\n\n// === PUMP RETRY MONITORING ===\nif (flow.get(\"retryStartTime\")) {\n    if (topTank > lastTopLevel) {\n        node.warn(\"✅ Pump retry successful — top tank is rising.\");\n        flow.set(\"pumpRetryInProgress\", false);\n        flow.set(\"retryStartTime\", null);\n        flow.set(\"pumpRetryTime\", null);\n        flow.set(\"lockPumpControl\", false);\n    } else if (now - flow.get(\"retryStartTime\") >= 2 * 60 * 1000) {\n        flow.set(\"pump\", 0);\n        flow.set(\"retryStartTime\", null);\n        flow.set(\"pumpRetryInProgress\", false);\n        flow.set(\"pumpRetryTime\", null);\n        flow.set(\"shutdownPump\", true);\n        flow.set(\"lockPumpControl\", true);\n        emailMsg = {\n            topic: \"Alert: Pump Retry Failed\",\n            payload: `❌ Pump retry failed.TopTank still not rising.\\nTopTank: ${ topTank }%\\nLast: ${ lastTopLevel }%`\n        };\n}\n}\n\n// === NIGHT LOGIC ===\nlet nightValveFlag = flow.get(\"nightValveFlag\") || false;\nif (hour === 2 && !nightValveFlag) {\n    flow.set(\"nightValveFlag\", true);\n    flow.set(\"nightValveStart\", now);\n    node.warn(\"🌙 2AM: Night Valve Started\");\n} else if (hour !== 2) {\n    flow.set(\"nightValveFlag\", false);\n}\n\nif (flow.get(\"nightValveStart\")) {\n    if (underTank >= 98) {\n        flow.set(\"nightValveStart\", null);\n        flow.set(\"valve\", 0);\n        node.warn(\"✅ Night Valve OFF — tank full\");\n    } else {\n        flow.set(\"valve\", 1);\n        node.warn(\"🌙 Night Valve ON — filling in progress\");\n    }\n\n    if (now - flow.get(\"nightValveStart\") >= 20 * 60 * 1000 && underTank <= lastUnderLevel) {\n        flow.set(\"nightValveStart\", null);\n        emailMsg = {\n            topic: \"Alert: Night Valve Ineffective\",\n            payload: `⚠️ 2AM Valve ON > 20min — UnderTank not rising\\nNow: ${ underTank }%\\nLast: ${ lastUnderLevel }%`\n        };\n    flow.set(\"shutdownValve\", true);\n}\n}\n\nlet nightPumpFlag = flow.get(\"nightPumpFlag\") || false;\nif (hour === 2 && !nightPumpFlag) {\n    flow.set(\"nightPumpFlag\", true);\n    flow.set(\"nightPumpStart\", now);\n    node.warn(\"🌙 2AM: Night Pump Started\");\n} else if (hour !== 2) {\n    flow.set(\"nightPumpFlag\", false);\n}\n\nif (flow.get(\"nightPumpStart\")) {\n    if (topTank >= 90) {\n        flow.set(\"nightPumpStart\", null);\n        flow.set(\"pump\", 0);\n        node.warn(\"✅ Night Pump OFF — top tank full\");\n    } else {\n        flow.set(\"pump\", 1);\n        node.warn(\"🌙 Night Pump ON — filling in progress\");\n    }\n}\n\n// === FINAL RETURN ===\nif (emailMsg) {\n    return emailMsg;\n} else {\n    node.warn(\"✅ No alerts triggered.\");\n    return null;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 2480,
        "wires": [
            [
                "b555dcc8eeaf3fed",
                "f464f56a165f46cd"
            ]
        ]
    },
    {
        "id": "b555dcc8eeaf3fed",
        "type": "email-send",
        "z": "80f453a0456b8b82",
        "d": true,
        "transport": "8ecd50b3548c5980",
        "from": "iot91355@gmail.com",
        "to": "harshg123456788@gmail.com",
        "cc": "",
        "bcc": "",
        "subject": "Email Alerts",
        "contentType": "text",
        "priority": "normal",
        "name": "",
        "x": 570,
        "y": 2480,
        "wires": [
            [
                "f464f56a165f46cd"
            ]
        ]
    },
    {
        "id": "ba8d479ba9bf0633",
        "type": "inject",
        "z": "80f453a0456b8b82",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 2480,
        "wires": [
            [
                "9ec0c7380a57200d"
            ]
        ]
    },
    {
        "id": "4e6b8623ba9d405d",
        "type": "mqtt out",
        "z": "80f453a0456b8b82",
        "name": "",
        "topic": "office/level",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ea380550660ffbb0",
        "x": 850,
        "y": 400,
        "wires": []
    },
    {
        "id": "8034d2e2a775bd23",
        "type": "function",
        "z": "80f453a0456b8b82",
        "d": true,
        "name": "function 64",
        "func": "var a = flow.get('Valve_status');\n\nvar b = flow.get('auto_Running');\n\nvar c = flow.get('motor_status');\n\nvar d = flow.get('utp');\n\nmsg.payload = {\n    Valve_status: a,\n    auto_Running: b,\n    motor_status: c,\n    utp         : d\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 2140,
        "wires": [
            [
                "0e9e60d2b228b55d"
            ]
        ]
    },
    {
        "id": "0e9e60d2b228b55d",
        "type": "mqtt out",
        "z": "80f453a0456b8b82",
        "d": true,
        "name": "",
        "topic": "local/rpiserver2",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fb79b5093b5e05ec",
        "x": 420,
        "y": 2140,
        "wires": []
    },
    {
        "id": "2ff8a0e3241629df",
        "type": "inject",
        "z": "80f453a0456b8b82",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 110,
        "y": 2140,
        "wires": [
            [
                "8034d2e2a775bd23"
            ]
        ]
    },
    {
        "id": "d18568650406fcb4",
        "type": "debug",
        "z": "80f453a0456b8b82",
        "g": "57be2e2ab19d9c48",
        "name": "debug 51",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 2040,
        "wires": []
    },
    {
        "id": "3b3902f8895880ff",
        "type": "inject",
        "z": "80f453a0456b8b82",
        "g": "57be2e2ab19d9c48",
        "name": "Set Cleaned Date (Manual)",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"last_cleaned\":\"2025-01-10\"}",
        "payloadType": "json",
        "x": 190,
        "y": 2010,
        "wires": [
            [
                "adab9e240b0cb4d6"
            ]
        ]
    },
    {
        "id": "32fe89fc2c751b4a",
        "type": "inject",
        "z": "80f453a0456b8b82",
        "g": "57be2e2ab19d9c48",
        "name": "Daily Check (Auto Update)",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 1,
        "topic": "",
        "payload": "{}",
        "payloadType": "json",
        "x": 190,
        "y": 2070,
        "wires": [
            [
                "adab9e240b0cb4d6"
            ]
        ]
    },
    {
        "id": "adab9e240b0cb4d6",
        "type": "function",
        "z": "80f453a0456b8b82",
        "g": "57be2e2ab19d9c48",
        "name": "Handle Cleaned Dates",
        "func": "function formatDate(date) {\n    let dd = String(date.getDate()).padStart(2, '0');\n    let mm = String(date.getMonth() + 1).padStart(2, '0');\n    let yyyy = date.getFullYear();\n    return `${dd}_${mm}_${yyyy}`;\n}\n\nlet mqttMsg = null;\nlet emailMsg = null;\n\nlet history = flow.get(\"cleaning_history\") || [];\nlet lastStr = flow.get(\"last_cleaned\");\nif (!lastStr) return [null, null];\n\nlet last = new Date(lastStr);\nlet now = new Date();\nlet next = new Date(last);\nnext.setMonth(next.getMonth() + 6);\n\nlet todayFormatted = formatDate(now);\nlet dueFormatted = formatDate(next);\nlet lastReminderSent = flow.get(\"last_reminder\");\n\n// Send email only if it's the due date and not already sent\nif (todayFormatted === dueFormatted && lastReminderSent !== dueFormatted) {\n    emailMsg = {\n        topic: \"Tank Cleaning Reminder\",\n        payload: `🚨 Reminder: Underground water tank must be cleaned today (${todayFormatted}).`\n    };\n    flow.set(\"last_reminder\", dueFormatted); // ✅ Mark this reminder as sent\n}\n\n// If date is past due (including due day), update cleaning date and next\nif (now >= next) {\n    let nowFormatted = formatDate(now);\n    let nextNext = new Date(now);\n    nextNext.setMonth(nextNext.getMonth() + 6);\n    let nextFormatted = formatDate(nextNext);\n\n    // Update last_cleaned\n    flow.set(\"last_cleaned\", now.toISOString());\n\n    // Add to cleaning history\n    if (!history.includes(nowFormatted)) {\n        history.push(nowFormatted);\n        flow.set(\"cleaning_history\", history);\n    }\n\n    mqttMsg = {\n        topic: \"v1/devices/me/telemetry\",\n        payload: JSON.stringify({\n            UG_cleaned_date: nowFormatted,\n            UG_next_cleaning_due: nextFormatted\n        })\n    };\n\n    // Do NOT reset last_reminder here. Let it stay to avoid repeated emails.\n}\n\nreturn [mqttMsg, emailMsg];\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 2040,
        "wires": [
            [
                "867ec5143159640c"
            ]
        ]
    },
    {
        "id": "193307fa7d23cf19",
        "type": "function",
        "z": "80f453a0456b8b82",
        "d": true,
        "name": "Valve",
        "func": "msg.payload = msg.payload.valve;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 2340,
        "wires": [
            [
                "9f70231abce3702a"
            ]
        ]
    },
    {
        "id": "52be4091182dd2b7",
        "type": "function",
        "z": "80f453a0456b8b82",
        "d": true,
        "name": "Pump",
        "func": "msg.payload = msg.payload.pump;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 2380,
        "wires": [
            [
                "46578e32da67a4e5"
            ]
        ]
    },
    {
        "id": "9f70231abce3702a",
        "type": "debug",
        "z": "80f453a0456b8b82",
        "d": true,
        "name": "debug 52",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 2340,
        "wires": []
    },
    {
        "id": "46578e32da67a4e5",
        "type": "debug",
        "z": "80f453a0456b8b82",
        "d": true,
        "name": "debug 53",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 2380,
        "wires": []
    },
    {
        "id": "e7bc057a40b49e08",
        "type": "function",
        "z": "80f453a0456b8b82",
        "g": "ef4637834bce4f91",
        "name": "function 65",
        "func": "// Get current and previous RelayStatus\nvar currentStatus = flow.get('RelayStatus') || 0;\nvar previousStatus = flow.get('PreviousRelayStatus') || 0;\n\n// Store current status for next time\nflow.set('PreviousRelayStatus', currentStatus);\n\n// Check if status changed from 0 to 1 (rising edge)\nif (previousStatus === 0 && currentStatus === 1) {\n    // Get valve and pump status\n    var valveStatus = flow.get('valve') || 0;\n    var pumpStatus = flow.get('pump') || 0;\n\n    // Prepare message\n    msg.payload = {\n        valve: valveStatus,\n        pump: pumpStatus\n    };\n\n    return msg;  // Only send message if rising edge detected\n}\n\n// Do nothing if no rising edge\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1800,
        "wires": [
            [
                "926261a080753a98"
            ]
        ]
    },
    {
        "id": "926261a080753a98",
        "type": "debug",
        "z": "80f453a0456b8b82",
        "g": "ef4637834bce4f91",
        "name": "debug 54",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 1800,
        "wires": []
    },
    {
        "id": "5117df789af5cb8e",
        "type": "inject",
        "z": "80f453a0456b8b82",
        "g": "ef4637834bce4f91",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 1760,
        "wires": [
            [
                "c58d3dba93b14599",
                "e7bc057a40b49e08"
            ]
        ]
    },
    {
        "id": "867ec5143159640c",
        "type": "email-send",
        "z": "80f453a0456b8b82",
        "g": "57be2e2ab19d9c48",
        "transport": "8ecd50b3548c5980",
        "from": "iot91355@gmail.com",
        "to": "iot@absolutemotion.in",
        "cc": "daylifardin@gmail.com",
        "bcc": "",
        "subject": "Email Alerts",
        "contentType": "text",
        "priority": "normal",
        "name": "",
        "x": 670,
        "y": 2040,
        "wires": [
            [
                "d18568650406fcb4"
            ]
        ]
    },
    {
        "id": "e9d2e127aa2f50aa",
        "type": "email-send",
        "z": "80f453a0456b8b82",
        "g": "7290f8343757911d",
        "transport": "8ecd50b3548c5980",
        "from": "iot91355@gmail.com",
        "to": "sandeep@absolutemotion.in",
        "cc": "adsilva@absolutemotion.in",
        "bcc": "",
        "subject": "Email Alerts",
        "contentType": "text",
        "priority": "normal",
        "name": "",
        "x": 530,
        "y": 740,
        "wires": [
            [
                "2e8c60649eeceb8e"
            ]
        ]
    },
    {
        "id": "87b33eaa30f3b8f2",
        "type": "function",
        "z": "80f453a0456b8b82",
        "name": "function 133",
        "func": "let now = flow.set(\"now\", Date.now());\nlet hour = flow.set(\"hour\",new Date().getHours());\n\n// Get the current underground tank liters\n// var currentLitres = flow.get(\"utm\");\n\nlet underTank = flow.get(\"utm\");\nlet topTank = flow.get(\"utp\");\n\nlet lastUnderLevel = flow.get(\"lastUnderLevel\") || underTank;\nlet lastTopLevel = flow.get(\"lastTopLevel\") || topTank;\n\nlet pump = Number(flow.get(\"pump\")) || 0;\nlet valve = Number(flow.get(\"valve\")) || 0;\n\nlet emailMsg = null;\n\n// === NIGHT LOGIC REVISED ===\nlet nightPumpStarted = flow.get(\"nightPumpStarted\") || false;\nlet nightValveStarted = flow.get(\"nightValveStarted\") || false;\n\nif (hour === 2) {\n    if (!nightPumpStarted && topTank < 90) {\n        flow.set(\"nightPumpStarted\", true);\n        flow.set(\"nightPumpStart\", now);\n        flow.set(\"pump\", 1);\n        node.warn(\"🌙 2AM: Night Pump Started\");\n    }\n\n    if (nightPumpStarted) {\n        if (topTank >= 90) {\n            flow.set(\"pump\", 0);\n            flow.set(\"nightPumpStarted\", false);\n            node.warn(\"✅ Night Pump OFF — top tank full\");\n\n            // Start valve logic after pump finishes\n            if (underTank < 98) {\n                flow.set(\"nightValveStarted\", true);\n                flow.set(\"valve\", 1);\n                flow.set(\"nightValveStart\", now);\n                node.warn(\"🌙 Night Valve Started — after pump\");\n            }\n        } else {\n            flow.set(\"pump\", 1);\n            node.warn(\"🌙 Night Pump ON — filling in progress\");\n        }\n    }\n\n    if (nightValveStarted) {\n        if (underTank >= 98) {\n            flow.set(\"valve\", 0);\n            flow.set(\"nightValveStarted\", false);\n            node.warn(\"✅ Night Valve OFF — under tank full\");\n        } else {\n            flow.set(\"valve\", 1);\n            node.warn(\"🌙 Night Valve ON — filling in progress\");\n        }\n    }\n} else {\n    // Reset all flags outside 2 AM\n    flow.set(\"nightPumpStarted\", false);\n    flow.set(\"nightValveStarted\", false);\n    flow.set(\"nightPumpStart\", null);\n    flow.set(\"nightValveStart\", null);\n}\n\n// === FINAL RETURN ===\nif (emailMsg) {\n    return emailMsg;\n} else {\n    node.warn(\"✅ No alerts triggered.\");\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 2600,
        "wires": [
            []
        ]
    },
    {
        "id": "24ea9579021e4bc7",
        "type": "inject",
        "z": "80f453a0456b8b82",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 70,
        "y": 2600,
        "wires": [
            [
                "9464b8bb6a9a53fe"
            ]
        ]
    },
    {
        "id": "ae59c9109b75c8f5",
        "type": "debug",
        "z": "80f453a0456b8b82",
        "name": "debug 118",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 2640,
        "wires": []
    },
    {
        "id": "9464b8bb6a9a53fe",
        "type": "function",
        "z": "80f453a0456b8b82",
        "name": "function 134",
        "func": "\nmsg.payload = {\n    // timestamp: flow.get(\"now\"),\n    // hour: flow.get(\"hour\"),\n    topTank: flow.get(\"ttp\"),\n    underTank: flow.get(\"utp\"),\n    // pump: flow.get(\"pump\"),\n    // valve: flow.get(\"valve\"),\n    // nightPumpStarted: flow.get(\"nightPumpStarted\"),\n    // nightValveStarted: flow.get(\"nightValveStarted\"),\n    // pumpRuntimeMin: flow.get(\"nightPumpStart\") ? Math.floor((flow.get(\"now\") - flow.get(\"nightPumpStart\")) / 60000) : 0,\n    // valveRuntimeMin: flow.get(\"nightValveStart\") ? Math.floor((flow.get(\"now\") - flow.get(\"nightValveStart\")) / 60000) : 0\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 2660,
        "wires": [
            [
                "ae59c9109b75c8f5",
                "ca0fe27bc2fde74a"
            ]
        ]
    },
    {
        "id": "ca0fe27bc2fde74a",
        "type": "mqtt out",
        "z": "80f453a0456b8b82",
        "name": "",
        "topic": "datatest/watertank",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "7f29005b7899d141",
        "x": 490,
        "y": 2700,
        "wires": []
    },
    {
        "id": "50fc63f9ba2aa935",
        "type": "inject",
        "z": "80f453a0456b8b82",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 1140,
        "wires": [
            [
                "5c0f92aaa873df1f",
                "a380390c4f1f2223"
            ]
        ]
    },
    {
        "id": "4d9e4aa198c72843",
        "type": "debug",
        "z": "80f453a0456b8b82",
        "d": true,
        "name": "debug 118",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 1280,
        "wires": []
    },
    {
        "id": "5c0f92aaa873df1f",
        "type": "function",
        "z": "80f453a0456b8b82",
        "d": true,
        "name": "function 6",
        "func": "msg.payload = {\n    timestamp: flow.get(\"now\"),\n    hour: flow.get(\"hour\"),\n    minutes: flow.get(\"minutes\"),\n    topTank: flow.get(\"topTank\"),\n    underTank: flow.get(\"underTank\"),\n    lastUnderLevel: flow.get(\"lastUnderLevel\"),\n    lastTopLevel: flow.get(\"lastTopLevel\"),\n\n    pump1: flow.get(\"pump1\"),\n    nightPumpStarted: flow.get(\"nightPumpStarted\"),\n    pumpRuntimeMin: flow.get(\"nightPumpStart\") ? Math.floor((flow.get(\"now\") - flow.get(\"nightPumpStart\")) / 60000) : 0,\n    pumpStartAt2am: flow.get(\"pumpStartAt2am\"),\n    // pumpRetryInProgress: flow.get(\"pumpRetryInProgress\"),\n    pumpRetryStart: flow.get(\"pumpRetryStart\"),\n    pumpRetryTime: flow.get(\"pumpRetryTime\"),\n    pumpStartTime: flow.get(\"pumpStartTime\"),\n    pumpBlockedUntilNextDay: flow.get(\"pumpBlockedUntilNextDay\"),\n    pumpNoIncreaseStart: flow.get(\"pumpNoIncreaseStart\"),\n\n    valve1: flow.get(\"valve1\"),  \n    nightValveStarted: flow.get(\"nightValveStarted\"),\n    valveRuntimeMin: flow.get(\"nightValveStart\") ? Math.floor((flow.get(\"now\") - flow.get(\"nightValveStart\")) / 60000) : 0,\n    // valveRetryInProgress: flow.get(\"valveRetryInProgress\"),\n    valveRetryStart: flow.get(\"valveRetryStart\"),\n    valveRetryTime: flow.get(\"valveRetryTime\"),\n    valveStartTime: flow.get(\"valveStartTime\"),\n    valveBlockedUntilNextDay: flow.get(\"valveBlockedUntilNextDay\"),\n    valveNoIncreaseStart: flow.get(\"valveNoIncreaseStart\"),\n\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1200,
        "wires": [
            [
                "4d9e4aa198c72843",
                "f684a0bfab90312d",
                "86a4d8182375a1cc"
            ]
        ]
    },
    {
        "id": "f684a0bfab90312d",
        "type": "function",
        "z": "80f453a0456b8b82",
        "d": true,
        "name": "function 10",
        "func": "// Expecting msg.payload = { pump: 0/1, valve: 0/1 }\nlet pumpValue = Number(msg.payload.pump1);\n\n// Get last values from flow context\nlet lastPump1 = flow.get(\"lastPumpStatus\") ?? null;\n\n\nlet changes = {};\n\n// Pump change detection\nif (lastPump1 !== pumpValue) {\n    flow.set(\"lastPumpStatus\", pumpValue);\n    changes.pump1 = pumpValue;\n}\n\n\n\n// Only output if there is at least one change\nif (Object.keys(changes).length > 0) {\n    msg.payload = changes;\n    return msg;\n} else {\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1160,
        "wires": [
            [
                "f1a28101b03104d3",
                "b4e70bb7eba98ea1"
            ]
        ]
    },
    {
        "id": "793a2c6ddec8ef18",
        "type": "debug",
        "z": "80f453a0456b8b82",
        "d": true,
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 1160,
        "wires": []
    },
    {
        "id": "86a4d8182375a1cc",
        "type": "function",
        "z": "80f453a0456b8b82",
        "d": true,
        "name": "function 8",
        "func": "let valveValue = Number(msg.payload.valve1);\n\nlet lastValve1 = flow.get(\"lastValveStatus\") ?? null;\n\nlet changes = {};\n\n// Valve change detection\nif (lastValve1 !== valveValue) {\n    flow.set(\"lastValveStatus\", valveValue);\n    changes.valve1 = valveValue;\n}\n\n// Only output if there is at least one change\nif (Object.keys(changes).length > 0) {\n    msg.payload = changes;\n    return msg;\n} else {\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1220,
        "wires": [
            [
                "0ced9333f8a260f2",
                "b4e70bb7eba98ea1"
            ]
        ]
    },
    {
        "id": "b1f35e9c7e89a2fc",
        "type": "debug",
        "z": "80f453a0456b8b82",
        "d": true,
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 1220,
        "wires": []
    },
    {
        "id": "f1a28101b03104d3",
        "type": "function",
        "z": "80f453a0456b8b82",
        "d": true,
        "name": "function 11",
        "func": "// let pump1 =msg.payload.pump1;\n// msg.payload={\n// pump1: pump1,\n// }\n// return msg;\nreturn { payload: msg.payload.pump1 }; ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1160,
        "wires": [
            [
                "793a2c6ddec8ef18"
            ]
        ]
    },
    {
        "id": "0ced9333f8a260f2",
        "type": "function",
        "z": "80f453a0456b8b82",
        "d": true,
        "name": "function 12",
        "func": "// let valve1 =msg.payload.valve1;\n// flow.set(\"valvetest\",valve1);\n// msg.payload={\n// valve1: valve1,\n// }\n// return msg;\nreturn { payload: msg.payload.valve1 }; ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1220,
        "wires": [
            [
                "b1f35e9c7e89a2fc"
            ]
        ]
    },
    {
        "id": "affba8b3f73d34b3",
        "type": "mqtt out",
        "z": "80f453a0456b8b82",
        "d": true,
        "g": "ececf140d322ed44",
        "name": "",
        "topic": "absolute/data/button",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "c321939b60789b45",
        "x": 960,
        "y": 1460,
        "wires": []
    },
    {
        "id": "b4e70bb7eba98ea1",
        "type": "function",
        "z": "80f453a0456b8b82",
        "d": true,
        "g": "ececf140d322ed44",
        "name": "function 13",
        "func": "let pumptest = msg.payload.pump1;\nlet valvetest = msg.payload.valve1;\nmsg.payload = {\n    \"deviceName\": \"button\",\n    \"deviceType\": \"button\",\n    \"button\": 9,\n    \"latitude\": 19.8791969,\n    \"longitude\": 73.9793069,\n    pumptest,\n    valvetest,\n\n    timestamp: flow.get(\"now\"),\n    hour: flow.get(\"hour\"),\n    minutes: flow.get(\"minutes\"),\n    topTank: flow.get(\"topTank\"),\n    underTank: flow.get(\"underTank\"),\n    lastUnderLevel: flow.get(\"lastUnderLevel\"),\n    lastTopLevel: flow.get(\"lastTopLevel\"),\n\n    pump1: flow.get(\"pump1\"),\n    nightPumpStarted: flow.get(\"nightPumpStarted\"),\n    pumpRuntimeMin: flow.get(\"nightPumpStart\") ? Math.floor((flow.get(\"now\") - flow.get(\"nightPumpStart\")) / 60000) : 0,\n    pumpStartAt2am: flow.get(\"pumpStartAt2am\"),\n    // pumpRetryInProgress: flow.get(\"pumpRetryInProgress\"),\n    pumpRetryStart: flow.get(\"pumpRetryStart\"),\n    pumpRetryTime: flow.get(\"pumpRetryTime\"),\n    pumpStartTime: flow.get(\"pumpStartTime\"),\n    pumpBlockedUntilNextDay: flow.get(\"pumpBlockedUntilNextDay\"),\n    pumpNoIncreaseStart: flow.get(\"pumpNoIncreaseStart\"),\n\n    valve1: flow.get(\"valve1\"),  \n    nightValveStarted: flow.get(\"nightValveStarted\"),\n    valveRuntimeMin: flow.get(\"nightValveStart\") ? Math.floor((flow.get(\"now\") - flow.get(\"nightValveStart\")) / 60000) : 0,\n    // valveRetryInProgress: flow.get(\"valveRetryInProgress\"),\n    valveRetryStart: flow.get(\"valveRetryStart\"),\n    valveRetryTime: flow.get(\"valveRetryTime\"),\n    valveStartTime: flow.get(\"valveStartTime\"),\n    valveBlockedUntilNextDay: flow.get(\"valveBlockedUntilNextDay\"),\n    valveNoIncreaseStart: flow.get(\"valveNoIncreaseStart\"),\n    pumpHistory:flow.get(\"pumpHistory\")\n\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1440,
        "wires": [
            [
                "d6b010e38d75ed2c",
                "affba8b3f73d34b3"
            ]
        ]
    },
    {
        "id": "dda03c84dece3ed1",
        "type": "random",
        "z": "80f453a0456b8b82",
        "d": true,
        "g": "ececf140d322ed44",
        "name": "",
        "low": 1,
        "high": "30",
        "inte": "true",
        "property": "payload",
        "x": 720,
        "y": 1360,
        "wires": [
            [
                "9655f984873b1bd0",
                "cbb9a1ef3faffe22"
            ]
        ]
    },
    {
        "id": "7ab869d6e614b069",
        "type": "inject",
        "z": "80f453a0456b8b82",
        "d": true,
        "g": "ececf140d322ed44",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "55 17 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 560,
        "y": 1340,
        "wires": [
            [
                "dda03c84dece3ed1"
            ]
        ]
    },
    {
        "id": "9655f984873b1bd0",
        "type": "function",
        "z": "80f453a0456b8b82",
        "d": true,
        "g": "ececf140d322ed44",
        "name": "function 14",
        "func": "var button = msg.payload;\nflow.set(\"button\",button)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 1360,
        "wires": [
            []
        ]
    },
    {
        "id": "cbb9a1ef3faffe22",
        "type": "debug",
        "z": "80f453a0456b8b82",
        "d": true,
        "g": "ececf140d322ed44",
        "name": "debug 20",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 900,
        "y": 1400,
        "wires": []
    },
    {
        "id": "d6b010e38d75ed2c",
        "type": "debug",
        "z": "80f453a0456b8b82",
        "d": true,
        "g": "ececf140d322ed44",
        "name": "debug 21",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 1560,
        "wires": []
    },
    {
        "id": "f097c5ee20416f0c",
        "type": "function",
        "z": "80f453a0456b8b82",
        "d": true,
        "name": "function 187",
        "func": "let now = Date.now();\nflow.set(\"now\", now);\n\n// Time\nlet hour = new Date().getHours();\nflow.set(\"hour\", hour);\nlet minutes = new Date().getMinutes();\nflow.set(\"minutes\", minutes);\n\n// // Tank levels from flow (must be updated elsewhere in your flow)\n// let topTank = Number(flow.get(\"ttp\"));   // Top tank level %\n// flow.set(\"topTank\",topTank);\n// let underTank = Number(flow.get(\"utp\")); // Underground tank level %\n// flow.set(\"underTank\",underTank);\n\n// // Tank levels (replace with real inputs)\nlet lastRun = flow.get(\"lastRun\") || 0;\nlet topTank = 54;   // %\nflow.set(\"topTank\", topTank);\nlet underTank = 98; // %\nflow.set(\"underTank\", underTank);\n\n// Update reference levels every 2 minutes\nif (now - lastRun >= 2 * 60 * 1000) {\n    \n    flow.set(\"lastTopLevel\", topTank);\n        flow.set(\"lastUnderLevel\", underTank);\n    flow.set(\"lastRun\", now);\n}\n\n// Device states\nlet pump1 = flow.get(\"pump1\") || 0;\nlet valve1 = flow.get(\"valve1\") || 0;\n\n// Night flags\nlet nightPumpStarted = flow.get(\"nightPumpStarted\") || false;\nlet nightValveStarted = flow.get(\"nightValveStarted\") || false;\n\n// Control flags\nlet pumpStartAt2am = flow.get(\"pumpStartAt2am\") || false;\nlet pumpBlockedUntilNextDay = flow.get(\"pumpBlockedUntilNextDay\") || false;\nlet valveBlockedUntilNextDay = flow.get(\"valveBlockedUntilNextDay\") || false;\n\n// Retry states\nlet pumpStartTime = flow.get(\"pumpStartTime\") || null;\nlet pumpNoIncreaseStart = flow.get(\"pumpNoIncreaseStart\") || null;\nlet pumpRetryScheduledAt = flow.get(\"pumpRetryScheduledAt\") || null;\nlet pumpRetryStart = flow.get(\"pumpRetryStart\") || null;\n\nlet valveStartTime = flow.get(\"valveStartTime\") || null;\nlet valveNoIncreaseStart = flow.get(\"valveNoIncreaseStart\") || null;\nlet valveRetryScheduledAt = flow.get(\"valveRetryScheduledAt\") || null;\nlet valveRetryStart = flow.get(\"valveRetryStart\") || null;\n\n// Reference levels (consistent names)\nlet lastTopLevel = flow.get(\"lastTopLevel\") || topTank;\nvar testlevel = lastTopLevel - 0.05;\nvar testlevel1 = lastTopLevel + 0.05;\nlet lastUnderLevel = flow.get(\"lastUnderLevel\") || underTank;\nvar testul = lastUnderLevel - 0.05;\nvar testul1 = lastUnderLevel + 0.05;\n\nlet emails = [];\n\n// === DAILY RESET AT 2 AM ===\nif(hour === 13 && minutes === 18 ){\n// if (hour === 13 && minutes === 0 && flow.get(\"lastResetDay\") !== new Date().getDate()) {\n    pumpBlockedUntilNextDay = false;\n    valveBlockedUntilNextDay = false;\n    nightPumpStarted = false;\n    nightValveStarted = false;\n\n    pumpRetryScheduledAt = null;\n    pumpRetryStart = null;\n    pumpNoIncreaseStart = null;\n\n    valveRetryScheduledAt = null;\n    valveRetryStart = null;\n    valveNoIncreaseStart = null;\n\n    // flow.set(\"lastResetDay\", new Date().getDate());\n    // node.warn(\"🔄 Daily reset at 2 AM: Flags and blocks cleared.\");\n}\n\n// === PUMP START AT 2 AM ===\nif (topTank < 89 && !nightPumpStarted && !pumpBlockedUntilNextDay) {\n    pump1 = 1;\n    pumpStartTime = now;\n    nightPumpStarted = true;\n    pumpStartAt2am = true;\n\n    flow.set(\"pump1\", pump1);\n    // node.warn(\"🚰 Pump started at 2 AM (top tank < 89%).\");\n    emails.push({ topic: \"Info\", payload: \"Pump started at 2 AM (top tank < 89%).\" });\n}\n\n// === PUMP STOP (TANK FULL) ===\nif (pump1 === 1 && topTank >= 89) {\n    pump1 = 0;\n    pumpStartAt2am = false;\n    nightPumpStarted = false;\n    pumpStartTime = null;\n\n    // Reset retry flags\n    pumpRetryScheduledAt = null;\n    pumpRetryStart = null;\n    pumpNoIncreaseStart = null;\n\n    flow.set(\"pump1\", pump1);\n    // node.warn(\"🚰 Pump stopped (top tank >= 90%).\");\n    emails.push({ topic: \"Info\", payload: \"Pump stopped (top tank full >= 90%).\" });\n\n    // Start valve if needed\n    if (underTank < 98 && !valveBlockedUntilNextDay) {\n        valve1 = 1;\n        valveStartTime = now;\n        nightValveStarted = true;\n\n        flow.set(\"valve1\", valve1);\n        // node.warn(\"➡️ Valve started (underground tank < 98%).\");\n        emails.push({ topic: \"Info\", payload: \"Valve started (underground tank < 98%).\" });\n    }\n}\n\n// === PUMP SAFETY: NO INCREASE ===\nif (pump1 === 1 && topTank >= testlevel && topTank <= testlevel && !pumpRetryStart) {\n    if (!pumpNoIncreaseStart) pumpNoIncreaseStart = now;\n    if (now - pumpNoIncreaseStart > 3 * 60 * 1000) {\n        pump1 = 0;\n        pumpStartTime = null;\n        pumpNoIncreaseStart = null;\n        pumpRetryScheduledAt = now + 30 * 60 * 1000;\n\n        flow.set(\"pump1\", pump1);\n        // node.warn(\"⚠️ Pump stopped (no increase for 3 min). Retry in 5 min.\");\n        emails.push({ topic: \"Alert\", payload: \"Pump stopped — no increase in top tank for 3 min. Retry in 5 min.\" });\n    }\n} else {\n    pumpNoIncreaseStart = null;\n}\n\n// === PUMP RETRY START ===\nif (pumpRetryScheduledAt && now >= pumpRetryScheduledAt && !pumpRetryStart && !pumpBlockedUntilNextDay) {\n    pump1 = 1;\n    pumpRetryStart = now;\n    lastTopLevel = topTank;\n    pumpRetryScheduledAt = null;\n\n    flow.set(\"pump1\", pump1);\n    flow.set(\"lastTopLevel\", lastTopLevel);\n\n    // node.warn(\"🔁 Pump retry started (3 min check).\");\n    emails.push({ topic: \"Info\", payload: \"Pump retry started (3 min check).\" });\n}\n\n// === PUMP RETRY CHECK ===\nif (pumpRetryStart && (now - pumpRetryStart > 3 * 60 * 1000)) {\n    if (topTank <= lastTopLevel) {\n        pump1 = 0;\n        pumpRetryStart = null;\n        pumpBlockedUntilNextDay = true;\n        nightPumpStarted = false;\n        pumpStartAt2am = false;\n        pumpStartTime = null;\n\n        flow.set(\"pump1\", pump1);\n        // node.warn(\"❌ Pump retry FAILED — blocked until next day.\");\n        emails.push({ topic: \"Alert\", payload: \"Pump retry failed — Pump blocked until next day.\" });\n    } else {\n        pumpRetryStart = null;\n        pumpNoIncreaseStart = null;\n        pumpStartTime = now;\n\n        // node.warn(\"✅ Pump retry SUCCESSFUL — continuing normal run.\");\n        emails.push({ topic: \"Info\", payload: \"Pump retry successful — continuing normal run.\" });\n    }\n}\n\n// === VALVE STOP (TANK FULL) ===\nif (valve1 === 1 && underTank >= 97) {\n    valve1 = 0;\n    nightValveStarted = false;\n    valveStartTime = null;\n\n    valveRetryScheduledAt = null;\n    valveRetryStart = null;\n    valveNoIncreaseStart = null;\n\n    flow.set(\"valve1\", valve1);\n    // node.warn(\"🚰 Valve stopped (underground tank >= 98%).\");\n    emails.push({ topic: \"Info\", payload: \"Valve stopped (underground tank full >= 98%).\" });\n}\n\n// === VALVE SAFETY: NO INCREASE ===\nif (valve1 === 1 && underTank >= testul && underTank <= testul1 && !valveRetryStart) {\n    if (!valveNoIncreaseStart) valveNoIncreaseStart = now;\n    if (now - valveNoIncreaseStart > 3 * 60 * 1000) {\n        valve1 = 0;\n        valveStartTime = null;\n        valveNoIncreaseStart = null;\n        valveRetryScheduledAt = now + 30 * 60 * 1000;\n\n        flow.set(\"valve1\", valve1);\n        // node.warn(\"⚠️ Valve stopped (no increase for 3 min). Retry in 5 min.\");\n        emails.push({ topic: \"Alert\", payload: \"Valve stopped — no increase in underground tank for 3 min. Retry in 5 min.\" });\n    }\n} else {\n    valveNoIncreaseStart = null;\n}\n\n// === VALVE RETRY START ===\nif (valveRetryScheduledAt && now >= valveRetryScheduledAt && !valveRetryStart && !valveBlockedUntilNextDay) {\n    valve1 = 1;\n    valveRetryStart = now;\n    lastUnderLevel = underTank;\n    valveRetryScheduledAt = null;\n\n    flow.set(\"valve1\", valve1);\n    flow.set(\"lastUnderLevel\", lastUnderLevel);\n\n    // node.warn(\"🔁 Valve retry started (3 min check).\");\n    emails.push({ topic: \"Info\", payload: \"Valve retry started (3 min check).\" });\n}\n\n// === VALVE RETRY CHECK ===\nif (valveRetryStart && (now - valveRetryStart > 3 * 60 * 1000)) {\n    if (underTank <= lastUnderLevel) {\n        valve1 = 0;\n        valveRetryStart = null;\n        valveBlockedUntilNextDay = true;\n        nightValveStarted = false;\n        valveStartTime = null;\n\n        flow.set(\"valve1\", valve1);\n        // node.warn(\"❌ Valve retry FAILED — blocked until next day.\");\n        emails.push({ topic: \"Alert\", payload: \"Valve retry failed — Valve blocked until next day.\" });\n    } else {\n        valveRetryStart = null;\n        valveNoIncreaseStart = null;\n        valveStartTime = now;\n\n        // node.warn(\"✅ Valve retry SUCCESSFUL — continuing normal run.\");\n        emails.push({ topic: \"Info\", payload: \"Valve retry successful — continuing normal run.\" });\n    }\n}\n\n// === Update reference levels during run ===\n// if (pump1 === 1 && !pumpRetryStart) {\n//     lastTopLevel = topTank;\n//     flow.set(\"lastTopLevel\", lastTopLevel);\n// }\n// if (valve1 === 1 && !valveRetryStart) {\n//     lastUnderLevel = underTank;\n//     flow.set(\"lastUnderLevel\", lastUnderLevel);\n// }\n\n// === Save states ===\nflow.set(\"pump1\", pump1);\nflow.set(\"valve1\", valve1);\nflow.set(\"nightPumpStarted\", nightPumpStarted);\nflow.set(\"nightValveStarted\", nightValveStarted);\nflow.set(\"pumpStartAt2am\", pumpStartAt2am);\nflow.set(\"pumpBlockedUntilNextDay\", pumpBlockedUntilNextDay);\nflow.set(\"valveBlockedUntilNextDay\", valveBlockedUntilNextDay);\n\nflow.set(\"pumpStartTime\", pumpStartTime);\nflow.set(\"pumpNoIncreaseStart\", pumpNoIncreaseStart);\nflow.set(\"pumpRetryScheduledAt\", pumpRetryScheduledAt);\nflow.set(\"pumpRetryStart\", pumpRetryStart);\n\nflow.set(\"valveStartTime\", valveStartTime);\nflow.set(\"valveNoIncreaseStart\", valveNoIncreaseStart);\nflow.set(\"valveRetryScheduledAt\", valveRetryScheduledAt);\nflow.set(\"valveRetryStart\", valveRetryStart);\n\n// === Output emails ===\nif (emails.length > 0) {\n    node.send([{ payload: emails }, null]);\n} else {\n    node.send([null, null]);\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "c940dffc44f5609a",
        "type": "inject",
        "z": "80f453a0456b8b82",
        "d": true,
        "g": "ececf140d322ed44",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 550,
        "y": 1460,
        "wires": [
            [
                "b4e70bb7eba98ea1"
            ]
        ]
    },
    {
        "id": "855d0ca9dbbe3124",
        "type": "function",
        "z": "80f453a0456b8b82",
        "d": true,
        "name": "function 188",
        "func": "msg.payload = {\n    \"deviceName\": \"button\",\n    \"deviceType\": \"button\",\n    timestamp: flow.get(\"now\"),\n    hour: flow.get(\"hour\"),\n    minutes: flow.get(\"minutes\"),\n    topTank: flow.get(\"topTank\"),\n    underTank: flow.get(\"underTank\"),\n    lastUnderLevel: flow.get(\"lastUnderLevel\"),\n    lastTopLevel: flow.get(\"lastTopLevel\"),\n\n    pump1: flow.get(\"pump1\"),\n    nightPumpStarted: flow.get(\"nightPumpStarted\"),\n    pumpRuntimeMin: flow.get(\"nightPumpStart\") ? Math.floor((flow.get(\"now\") - flow.get(\"nightPumpStart\")) / 60000) : 0,\n    pumpStartAt2am: flow.get(\"pumpStartAt2am\"),\n    // pumpRetryInProgress: flow.get(\"pumpRetryInProgress\"),\n    pumpRetryStart: flow.get(\"pumpRetryStart\"),\n    pumpRetryTime: flow.get(\"pumpRetryTime\"),\n    pumpStartTime: flow.get(\"pumpStartTime\"),\n    pumpBlockedUntilNextDay: flow.get(\"pumpBlockedUntilNextDay\"),\n    pumpNoIncreaseStart: flow.get(\"pumpNoIncreaseStart\"),\n\n    valve1: flow.get(\"valve1\"),  \n    nightValveStarted: flow.get(\"nightValveStarted\"),\n    valveRuntimeMin: flow.get(\"nightValveStart\") ? Math.floor((flow.get(\"now\") - flow.get(\"nightValveStart\")) / 60000) : 0,\n    // valveRetryInProgress: flow.get(\"valveRetryInProgress\"),\n    valveRetryStart: flow.get(\"valveRetryStart\"),\n    valveRetryTime: flow.get(\"valveRetryTime\"),\n    valveStartTime: flow.get(\"valveStartTime\"),\n    valveBlockedUntilNextDay: flow.get(\"valveBlockedUntilNextDay\"),\n    valveNoIncreaseStart: flow.get(\"valveNoIncreaseStart\"),\n\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1540,
        "wires": [
            [
                "f497e788fcd507e7"
            ]
        ]
    },
    {
        "id": "c5c6bd2ffabad962",
        "type": "inject",
        "z": "80f453a0456b8b82",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 1540,
        "wires": [
            [
                "855d0ca9dbbe3124"
            ]
        ]
    },
    {
        "id": "f497e788fcd507e7",
        "type": "debug",
        "z": "80f453a0456b8b82",
        "d": true,
        "g": "ececf140d322ed44",
        "name": "debug 124",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 1560,
        "wires": []
    },
    {
        "id": "a380390c4f1f2223",
        "type": "function",
        "z": "80f453a0456b8b82",
        "d": true,
        "name": "function 189",
        "func": "let now = Date.now();\nflow.set(\"now\", now);\n\n// Time\nlet hour = new Date().getHours();\nflow.set(\"hour\", hour);\nlet minutes = new Date().getMinutes();\nflow.set(\"minutes\", minutes);\n\n// Tank levels from flow (must be updated elsewhere in your flow)\n// let topTank = Number(flow.get(\"ttp\"));   // Top tank level %\n// flow.set(\"topTank\",topTank);\nlet underTank = Number(flow.get(\"utp\")); // Underground tank level %\nflow.set(\"underTank\",underTank);\n\n// // Tank levels (replace with real inputs)\nlet lastRun = flow.get(\"lastRun\") || 0;\nlet topTank = 89;   // %\nflow.set(\"topTank\", topTank);\n// let underTank = 98; // %\n// flow.set(\"underTank\", underTank);\n\n// Update reference levels every 2 minutes\nif (now - lastRun >= 2 * 60 * 1000) {\n    flow.set(\"lastTopLevel\", topTank);\n    flow.set(\"lastUnderLevel\", underTank);\n    flow.set(\"lastRun\", now);\n}\n\n// Device states\nlet pump1 = flow.get(\"pump1\") || 0;\nlet valve1 = flow.get(\"valve1\") || 0;\n\n// Night flags\nlet nightPumpStarted = flow.get(\"nightPumpStarted\") || false;\nlet nightValveStarted = flow.get(\"nightValveStarted\") || false;\n\n// Control flags\nlet pumpStartAt2am = flow.get(\"pumpStartAt2am\") || false;\nlet pumpBlockedUntilNextDay = flow.get(\"pumpBlockedUntilNextDay\") || false;\nlet valveBlockedUntilNextDay = flow.get(\"valveBlockedUntilNextDay\") || false;\n\n// Retry states\nlet pumpStartTime = flow.get(\"pumpStartTime\") || null;\nlet pumpNoIncreaseStart = flow.get(\"pumpNoIncreaseStart\") || null;\nlet pumpRetryScheduledAt = flow.get(\"pumpRetryScheduledAt\") || null;\nlet pumpRetryStart = flow.get(\"pumpRetryStart\") || null;\n\nlet valveStartTime = flow.get(\"valveStartTime\") || null;\nlet valveNoIncreaseStart = flow.get(\"valveNoIncreaseStart\") || null;\nlet valveRetryScheduledAt = flow.get(\"valveRetryScheduledAt\") || null;\nlet valveRetryStart = flow.get(\"valveRetryStart\") || null;\n\n// Reference levels (consistent names)\nlet lastTopLevel = flow.get(\"lastTopLevel\") || topTank;\nlet lastUnderLevel = flow.get(\"lastUnderLevel\") || underTank;\n\nlet emails = [];\n\n// === DAILY RESET AT 2 AM ===\nif(hour === 12 && minutes === 22){\n// if (hour === 2 && minutes === 0 && flow.get(\"lastResetDay\") !== new Date().getDate()) {\n    pumpBlockedUntilNextDay = false;\n    valveBlockedUntilNextDay = false;\n    nightPumpStarted = false;\n    nightValveStarted = false;\n\n    pumpRetryScheduledAt = null;\n    pumpRetryStart = null;\n    pumpNoIncreaseStart = null;\n\n    valveRetryScheduledAt = null;\n    valveRetryStart = null;\n    valveNoIncreaseStart = null;\n\n    // flow.set(\"lastResetDay\", new Date().getDate());\n    // node.warn(\"🔄 Daily reset at 2 AM: Flags and blocks cleared.\");\n}\n\n// === PUMP START AT 2 AM ===\nif (hour === 12 && minutes === 22 && topTank < 89 && !nightPumpStarted && !pumpBlockedUntilNextDay) {\n    pump1 = 1;\n    pumpStartTime = now;\n    nightPumpStarted = true;\n    pumpStartAt2am = true;\n\n    flow.set(\"pump1\", pump1);\n    // node.warn(\"🚰 Pump started at 2 AM (top tank < 89%).\");\n    emails.push({ topic: \"Info\", payload: \"Pump started at 2 AM (top tank < 89%).\" });\n}\n\n// === PUMP STOP (TANK FULL) ===\nif (pump1 === 1 && topTank >= 89) {\n    pump1 = 0;\n    pumpStartAt2am = false;\n    nightPumpStarted = false;\n    pumpStartTime = null;\n\n    // Reset retry flags\n    pumpRetryScheduledAt = null;\n    pumpRetryStart = null;\n    pumpNoIncreaseStart = null;\n\n    flow.set(\"pump1\", pump1);\n    // node.warn(\"🚰 Pump stopped (top tank >= 90%).\");\n    emails.push({ topic: \"Info\", payload: \"Pump stopped (top tank full >= 90%).\" });\n\n    // Start valve if needed\n    if (underTank < 98 && !valveBlockedUntilNextDay) {\n        valve1 = 1;\n        valveStartTime = now;\n        nightValveStarted = true;\n\n        flow.set(\"valve1\", valve1);\n        // node.warn(\"➡️ Valve started (underground tank < 98%).\");\n        emails.push({ topic: \"Info\", payload: \"Valve started (underground tank < 98%).\" });\n    }\n}\n\n// === PUMP SAFETY: NO INCREASE ===\nif (pump1 === 1 && topTank <= lastTopLevel && !pumpRetryStart) {\n    if (!pumpNoIncreaseStart) pumpNoIncreaseStart = now;\n    if (now - pumpNoIncreaseStart > 3 * 60 * 1000) {\n        pump1 = 0;\n        pumpStartTime = null;\n        pumpNoIncreaseStart = null;\n        pumpRetryScheduledAt = now + 30 * 60 * 1000;\n\n        flow.set(\"pump1\", pump1);\n        // node.warn(\"⚠️ Pump stopped (no increase for 3 min). Retry in 5 min.\");\n        emails.push({ topic: \"Alert\", payload: \"Pump stopped — no increase in top tank for 3 min. Retry in 5 min.\" });\n    }\n} else {\n    pumpNoIncreaseStart = null;\n}\n\n// === PUMP RETRY START ===\nif (pumpRetryScheduledAt && now >= pumpRetryScheduledAt && !pumpRetryStart && !pumpBlockedUntilNextDay) {\n    pump1 = 1;\n    pumpRetryStart = now;\n    lastTopLevel = topTank;\n    pumpRetryScheduledAt = null;\n\n    flow.set(\"pump1\", pump1);\n    flow.set(\"lastTopLevel\", lastTopLevel);\n\n    // node.warn(\"🔁 Pump retry started (3 min check).\");\n    emails.push({ topic: \"Info\", payload: \"Pump retry started (3 min check).\" });\n}\n\n// === PUMP RETRY CHECK ===\nif (pumpRetryStart && (now - pumpRetryStart > 3 * 60 * 1000)) {\n    if (topTank <= lastTopLevel) {\n        pump1 = 0;\n        pumpRetryStart = null;\n        pumpBlockedUntilNextDay = true;\n        nightPumpStarted = false;\n        pumpStartAt2am = false;\n        pumpStartTime = null;\n\n        flow.set(\"pump1\", pump1);\n        // node.warn(\"❌ Pump retry FAILED — blocked until next day.\");\n        emails.push({ topic: \"Alert\", payload: \"Pump retry failed — Pump blocked until next day.\" });\n    } else {\n        pumpRetryStart = null;\n        pumpNoIncreaseStart = null;\n        pumpStartTime = now;\n\n        // node.warn(\"✅ Pump retry SUCCESSFUL — continuing normal run.\");\n        emails.push({ topic: \"Info\", payload: \"Pump retry successful — continuing normal run.\" });\n    }\n}\n\n// === VALVE STOP (TANK FULL) ===\nif (valve1 === 1 && underTank >= 95) {\n    valve1 = 0;\n    nightValveStarted = false;\n    valveStartTime = null;\n\n    valveRetryScheduledAt = null;\n    valveRetryStart = null;\n    valveNoIncreaseStart = null;\n\n    flow.set(\"valve1\", valve1);\n    // node.warn(\"🚰 Valve stopped (underground tank >= 98%).\");\n    emails.push({ topic: \"Info\", payload: \"Valve stopped (underground tank full >= 98%).\" });\n}\n\n// === VALVE SAFETY: NO INCREASE ===\nif (valve1 === 1 && underTank <= lastUnderLevel && !valveRetryStart) {\n    if (!valveNoIncreaseStart) valveNoIncreaseStart = now;\n    if (now - valveNoIncreaseStart > 5 * 60 * 1000) {\n        valve1 = 0;\n        valveStartTime = null;\n        valveNoIncreaseStart = null;\n        valveRetryScheduledAt = now + 30 * 60 * 1000;\n\n        flow.set(\"valve1\", valve1);\n        // node.warn(\"⚠️ Valve stopped (no increase for 3 min). Retry in 5 min.\");\n        emails.push({ topic: \"Alert\", payload: \"Valve stopped — no increase in underground tank for 3 min. Retry in 5 min.\" });\n    }\n} else {\n    valveNoIncreaseStart = null;\n}\n\n// === VALVE RETRY START ===\nif (valveRetryScheduledAt && now >= valveRetryScheduledAt && !valveRetryStart && !valveBlockedUntilNextDay) {\n    valve1 = 1;\n    valveRetryStart = now;\n    lastUnderLevel = underTank;\n    valveRetryScheduledAt = null;\n\n    flow.set(\"valve1\", valve1);\n    flow.set(\"lastUnderLevel\", lastUnderLevel);\n\n    // node.warn(\"🔁 Valve retry started (3 min check).\");\n    emails.push({ topic: \"Info\", payload: \"Valve retry started (3 min check).\" });\n}\n\n// === VALVE RETRY CHECK ===\nif (valveRetryStart && (now - valveRetryStart > 5 * 60 * 1000)) {\n    if (underTank <= lastUnderLevel) {\n        valve1 = 0;\n        valveRetryStart = null;\n        valveBlockedUntilNextDay = true;\n        nightValveStarted = false;\n        valveStartTime = null;\n\n        flow.set(\"valve1\", valve1);\n        // node.warn(\"❌ Valve retry FAILED — blocked until next day.\");\n        emails.push({ topic: \"Alert\", payload: \"Valve retry failed — Valve blocked until next day.\" });\n    } else {\n        valveRetryStart = null;\n        valveNoIncreaseStart = null;\n        valveStartTime = now;\n\n        // node.warn(\"✅ Valve retry SUCCESSFUL — continuing normal run.\");\n        emails.push({ topic: \"Info\", payload: \"Valve retry successful — continuing normal run.\" });\n    }\n}\n\n// === Update reference levels during run ===\nif (pump1 === 1 && !pumpRetryStart) {\n    lastTopLevel = topTank;\n    flow.set(\"lastTopLevel\", lastTopLevel);\n}\nif (valve1 === 1 && !valveRetryStart) {\n    lastUnderLevel = underTank;\n    flow.set(\"lastUnderLevel\", lastUnderLevel);\n}\n\n// === Save states ===\nflow.set(\"pump1\", pump1);\nflow.set(\"valve1\", valve1);\nflow.set(\"nightPumpStarted\", nightPumpStarted);\nflow.set(\"nightValveStarted\", nightValveStarted);\nflow.set(\"pumpStartAt2am\", pumpStartAt2am);\nflow.set(\"pumpBlockedUntilNextDay\", pumpBlockedUntilNextDay);\nflow.set(\"valveBlockedUntilNextDay\", valveBlockedUntilNextDay);\n\nflow.set(\"pumpStartTime\", pumpStartTime);\nflow.set(\"pumpNoIncreaseStart\", pumpNoIncreaseStart);\nflow.set(\"pumpRetryScheduledAt\", pumpRetryScheduledAt);\nflow.set(\"pumpRetryStart\", pumpRetryStart);\n\nflow.set(\"valveStartTime\", valveStartTime);\nflow.set(\"valveNoIncreaseStart\", valveNoIncreaseStart);\nflow.set(\"valveRetryScheduledAt\", valveRetryScheduledAt);\nflow.set(\"valveRetryStart\", valveRetryStart);\n\n// === Output emails ===\nif (emails.length > 0) {\n    node.send([{ payload: emails }, null]);\n} else {\n    node.send([null, null]);\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "65f3a4d7598aa327",
        "type": "function",
        "z": "80f453a0456b8b82",
        "d": true,
        "name": "function 190",
        "func": "let now = Date.now();\nflow.set(\"now\", now);\n\n// Time\nlet hour = new Date().getHours();\nflow.set(\"hour\", hour);\nlet minutes = new Date().getMinutes();\nflow.set(\"minutes\", minutes);\n\n// Tank levels (replace with real inputs in your flow)\nlet lastRun = flow.get(\"lastRun\") || 0;\nlet topTank = 85;   // %\nflow.set(\"topTank\", topTank);\nlet underTank = 98; // %\nflow.set(\"underTank\", underTank);\n\n// Update reference levels every 2 minutes\nif (now - lastRun >= 2 * 60 * 1000) {\n    flow.set(\"lastTopLevel\", topTank);\n    flow.set(\"lastUnderLevel\", underTank);\n    flow.set(\"lastRun\", now);\n}\n\n// Device states\nlet pump1 = flow.get(\"pump1\") ;\nlet valve1 = flow.get(\"valve1\");\n\n// Night flags\nlet nightPumpStarted = flow.get(\"nightPumpStarted\") || false;\nlet nightValveStarted = flow.get(\"nightValveStarted\") || false;\n\n// Control flags\nlet pumpStartAt2am = flow.get(\"pumpStartAt2am\") || false;\nlet pumpBlockedUntilNextDay = flow.get(\"pumpBlockedUntilNextDay\") || false;\nlet valveBlockedUntilNextDay = flow.get(\"valveBlockedUntilNextDay\") || false;\n\n// Retry states\nlet pumpStartTime = flow.get(\"pumpStartTime\") || null;\nlet pumpRetryScheduledAt = flow.get(\"pumpRetryScheduledAt\") || null;\nlet pumpRetryStart = flow.get(\"pumpRetryStart\") || null;\n\nlet valveStartTime = flow.get(\"valveStartTime\") || null;\nlet valveRetryScheduledAt = flow.get(\"valveRetryScheduledAt\") || null;\nlet valveRetryStart = flow.get(\"valveRetryStart\") || null;\n\n// Reference levels\nlet lastTopLevel = flow.get(\"lastTopLevel\") || topTank;\nlet lastUnderLevel = flow.get(\"lastUnderLevel\") || underTank;\n\n// Histories for rate checks\nlet pumpHistory = flow.get(\"pumpHistory\") || [];\nlet valveHistory = flow.get(\"valveHistory\") || [];\n\nlet emails = [];\n\n// === DAILY RESET AT 2 AM ===\nif(hour === 18 && minutes === 9){\n// if (hour === 17 && minutes === 50 && flow.get(\"lastResetDay\") !== new Date().getDate()) {\n    pumpBlockedUntilNextDay = false;\n    valveBlockedUntilNextDay = false;\n    nightPumpStarted = false;\n    pumpStartAt2am = false;\n    nightValveStarted = false;\n\n    pumpRetryScheduledAt = null;\n    pumpRetryStart = null;\n    pumpHistory = [];\n\n    valveRetryScheduledAt = null;\n    valveRetryStart = null;\n    valveHistory = [];\n\n    // flow.set(\"lastResetDay\", new Date().getDate());\n}\n\n// === PUMP START AT 2 AM ===\nif (hour === 18 && minutes === 10 && topTank < 89 && !nightPumpStarted && !pumpBlockedUntilNextDay) {\n    pump1 = 1;\n    pumpStartTime = now;\n    nightPumpStarted = true;\n    pumpStartAt2am = true;\n\n    flow.set(\"pump1\", pump1);\n    emails.push({ topic: \"Info\", payload: \"Pump started at 2 AM (top tank < 89%).\" });\n}\n\n// === PUMP STOP (TANK FULL) ===\nif (pump1 === 1 && topTank >= 89) {\n    pump1 = 0;\n    pumpStartAt2am = false;\n    nightPumpStarted = false;\n    pumpStartTime = null;\n\n    pumpRetryScheduledAt = null;\n    pumpRetryStart = null;\n    pumpHistory = [];\n\n    flow.set(\"pump1\", pump1);\n    emails.push({ topic: \"Info\", payload: \"Pump stopped (top tank full >= 90%).\" });\n\n    // Start valve if needed\n    if (underTank < 98 && !valveBlockedUntilNextDay) {\n        valve1 = 1;\n        valveStartTime = now;\n        nightValveStarted = true;\n\n        flow.set(\"valve1\", valve1);\n        emails.push({ topic: \"Info\", payload: \"Valve started (underground tank < 98%).\" });\n    }\n}\n\n// === PUMP SAFETY: NO INCREASE + RATE CHECK ===\nconst pumpCheckWindow = 3 * 60 * 1000;\nconst pumpMinRate = 0.3; // % per min\n\nif (pump1 === 1 && !pumpRetryStart) {\n    pumpHistory.push({ t: now, v: topTank });\n    pumpHistory = pumpHistory.filter(d => now - d.t <= pumpCheckWindow);\n\n    let oldest = pumpHistory[0];\n    if (oldest) {\n        let minutesPassed = (now - oldest.t) / 60000;\n        let increase = topTank - oldest.v;\n        let rate = increase / minutesPassed;\n\n        if (topTank <= oldest.v) {\n            pump1 = 0;\n            pumpStartTime = null;\n            pumpRetryScheduledAt = now + 30 * 60 * 1000;\n            pumpHistory = [];\n            flow.set(\"pump1\", pump1);\n            emails.push({ topic: \"Alert\", payload: \"Pump stopped — no increase in top tank for 3 min. Retry in 30 min.\" });\n        } else if (rate < pumpMinRate) {\n            pump1 = 0;\n            pumpStartTime = null;\n            pumpRetryScheduledAt = now + 30 * 60 * 1000;\n            pumpHistory = [];\n            flow.set(\"pump1\", pump1);\n            emails.push({ topic: \"Alert\", payload: `Pump stopped — insufficient rise (${rate.toFixed(2)} %/min). Retry in 30 min.` });\n        }\n    }\n} else {\n    pumpHistory = [];\n}\nflow.set(\"pumpHistory\", pumpHistory);\n\n// === PUMP RETRY START ===\nif (pumpRetryScheduledAt && now >= pumpRetryScheduledAt && !pumpRetryStart && !pumpBlockedUntilNextDay) {\n    pump1 = 1;\n    pumpRetryStart = now;\n    lastTopLevel = topTank;\n    pumpRetryScheduledAt = null;\n\n    flow.set(\"pump1\", pump1);\n    flow.set(\"lastTopLevel\", lastTopLevel);\n    emails.push({ topic: \"Info\", payload: \"Pump retry started (3 min check).\" });\n}\n\n// === PUMP RETRY CHECK ===\nif (pumpRetryStart && (now - pumpRetryStart > 3 * 60 * 1000)) {\n    if (topTank <= lastTopLevel) {\n        pump1 = 0;\n        pumpRetryStart = null;\n        pumpBlockedUntilNextDay = true;\n        nightPumpStarted = false;\n        pumpStartAt2am = false;\n        pumpStartTime = null;\n\n        flow.set(\"pump1\", pump1);\n        emails.push({ topic: \"Alert\", payload: \"Pump retry failed — Pump blocked until next day.\" });\n    } else {\n        pumpRetryStart = null;\n        pumpStartTime = now;\n        emails.push({ topic: \"Info\", payload: \"Pump retry successful — continuing normal run.\" });\n    }\n}\n\n// === VALVE STOP (TANK FULL) ===\nif (valve1 === 1 && underTank >= 97) {\n    valve1 = 0;\n    nightValveStarted = false;\n    valveStartTime = null;\n\n    valveRetryScheduledAt = null;\n    valveRetryStart = null;\n    valveHistory = [];\n\n    flow.set(\"valve1\", valve1);\n    emails.push({ topic: \"Info\", payload: \"Valve stopped (underground tank full >= 98%).\" });\n}\n\n// === VALVE SAFETY: NO INCREASE + RATE CHECK ===\nconst valveCheckWindow = 3 * 60 * 1000;\nconst valveMinRate = 0.2; // % per min\n\nif (valve1 === 1 && !valveRetryStart) {\n    valveHistory.push({ t: now, v: underTank });\n    valveHistory = valveHistory.filter(d => now - d.t <= valveCheckWindow);\n\n    let oldest = valveHistory[0];\n    if (oldest) {\n        let minutesPassed = (now - oldest.t) / 60000;\n        let increase = underTank - oldest.v;\n        let rate = increase / minutesPassed;\n\n        if (underTank <= oldest.v) {\n            valve1 = 0;\n            valveStartTime = null;\n            valveRetryScheduledAt = now + 30 * 60 * 1000;\n            valveHistory = [];\n            flow.set(\"valve1\", valve1);\n            emails.push({ topic: \"Alert\", payload: \"Valve stopped — no increase in underground tank for 3 min. Retry in 30 min.\" });\n        } else if (rate < valveMinRate) {\n            valve1 = 0;\n            valveStartTime = null;\n            valveRetryScheduledAt = now + 30 * 60 * 1000;\n            valveHistory = [];\n            flow.set(\"valve1\", valve1);\n            emails.push({ topic: \"Alert\", payload: `Valve stopped — insufficient rise (${rate.toFixed(2)} %/min). Retry in 30 min.` });\n        }\n    }\n} else {\n    valveHistory = [];\n}\nflow.set(\"valveHistory\", valveHistory);\n\n// === VALVE RETRY START ===\nif (valveRetryScheduledAt && now >= valveRetryScheduledAt && !valveRetryStart && !valveBlockedUntilNextDay) {\n    valve1 = 1;\n    valveRetryStart = now;\n    lastUnderLevel = underTank;\n    valveRetryScheduledAt = null;\n\n    flow.set(\"valve1\", valve1);\n    flow.set(\"lastUnderLevel\", lastUnderLevel);\n    emails.push({ topic: \"Info\", payload: \"Valve retry started (3 min check).\" });\n}\n\n// === VALVE RETRY CHECK ===\nif (valveRetryStart && (now - valveRetryStart > 3 * 60 * 1000)) {\n    if (underTank <= lastUnderLevel) {\n        valve1 = 0;\n        valveRetryStart = null;\n        valveBlockedUntilNextDay = true;\n        nightValveStarted = false;\n        valveStartTime = null;\n\n        flow.set(\"valve1\", valve1);\n        emails.push({ topic: \"Alert\", payload: \"Valve retry failed — Valve blocked until next day.\" });\n    } else {\n        valveRetryStart = null;\n        valveStartTime = now;\n        emails.push({ topic: \"Info\", payload: \"Valve retry successful — continuing normal run.\" });\n    }\n}\n\n// === Save states ===\nflow.set(\"pump1\", pump1);\nflow.set(\"valve1\", valve1);\nflow.set(\"nightPumpStarted\", nightPumpStarted);\nflow.set(\"nightValveStarted\", nightValveStarted);\nflow.set(\"pumpStartAt2am\", pumpStartAt2am);\nflow.set(\"pumpBlockedUntilNextDay\", pumpBlockedUntilNextDay);\nflow.set(\"valveBlockedUntilNextDay\", valveBlockedUntilNextDay);\n\nflow.set(\"pumpStartTime\", pumpStartTime);\nflow.set(\"pumpRetryScheduledAt\", pumpRetryScheduledAt);\nflow.set(\"pumpRetryStart\", pumpRetryStart);\n\nflow.set(\"valveStartTime\", valveStartTime);\nflow.set(\"valveRetryScheduledAt\", valveRetryScheduledAt);\nflow.set(\"valveRetryStart\", valveRetryStart);\n\n// === Output emails ===\nif (emails.length > 0) {\n    node.send([{ payload: emails }, null]);\n} else {\n    node.send([null, null]);\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 1280,
        "wires": [
            []
        ]
    },
    {
        "id": "dedc4e6a321ae14d",
        "type": "function",
        "z": "80f453a0456b8b82",
        "d": true,
        "name": "function 191",
        "func": "flow.set(\"nightPumpStarted\",null);\nflow.set(\"pumpStartAt2am\",null);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 1360,
        "wires": [
            []
        ]
    },
    {
        "id": "0bbe1e1a21cb4392",
        "type": "inject",
        "z": "80f453a0456b8b82",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 1360,
        "wires": [
            [
                "dedc4e6a321ae14d"
            ]
        ]
    },
    {
        "id": "8b60d608440dc09f",
        "type": "function",
        "z": "80f453a0456b8b82",
        "name": "function 192",
        "func": "let Valve_status = flow.get(\"Valve_status\") ;\nlet motor_status = flow.get(\"motor_status\");\n// keep relay state in flow context (persistent between calls)\nlet relayStatus = flow.get(\"relayStatus\");\nlet newStatus = msg.payload.RelayStatus ? 1 : 0;\n\nif (relayStatus === 0 && newStatus === 1) {\n    // relay just turned ON, send message\n    if(Valve_status === 0){\n        msg.payload = {\n            \"Valve_status\": 0,\n            \"Valve\": \"Valve OFF\"\n        }\n    }\n   if (motor_status === 0){\n    msg.payload = {\n            \"motor_status\": 0,\n            \"motor\": \"Pump OFF\"\n    }\n   }\n    node.send(msg);\n}\n\n// update stored relay status\nflow.set(\"relayStatus\", newStatus);\n\n// nothing to return unless triggered\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1640,
        "wires": [
            []
        ]
    },
    {
        "id": "77e6efca93ab362f",
        "type": "inject",
        "z": "80f453a0456b8b82",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 880,
        "wires": [
            [
                "38ce2cf9960a265c",
                "3f7054584e64c49d"
            ]
        ]
    },
    {
        "id": "38ce2cf9960a265c",
        "type": "function",
        "z": "80f453a0456b8b82",
        "name": "function 6",
        "func": "msg.payload = {\n    // timestamp: flow.get(\"now\"),\n    // hour: flow.get(\"hour\"),\n    // minutes: flow.get(\"minutes\"),\n    // topTank: flow.get(\"topTank\"),\n    // underTank: flow.get(\"underTank\"),\n    // lastUnderLevel: flow.get(\"lastUnderLevel\"),\n    // lastTopLevel: flow.get(\"lastTopLevel\"),\n\n    pump1: flow.get(\"pump1\"),\n    // nightPumpStarted: flow.get(\"nightPumpStarted\"),\n    // pumpRuntimeMin: flow.get(\"nightPumpStart\") ? Math.floor((flow.get(\"now\") - flow.get(\"nightPumpStart\")) / 60000) : 0,\n    // pumpStartAt2am: flow.get(\"pumpStartAt2am\"),\n    // // pumpRetryInProgress: flow.get(\"pumpRetryInProgress\"),\n    // pumpRetryStart: flow.get(\"pumpRetryStart\"),\n    // pumpRetryTime: flow.get(\"pumpRetryTime\"),\n    // pumpStartTime: flow.get(\"pumpStartTime\"),\n    // pumpBlockedUntilNextDay: flow.get(\"pumpBlockedUntilNextDay\"),\n    // pumpNoIncreaseStart: flow.get(\"pumpNoIncreaseStart\"),\n\n    valve1: flow.get(\"valve1\"),  \n    // nightValveStarted: flow.get(\"nightValveStarted\"),\n    // valveRuntimeMin: flow.get(\"nightValveStart\") ? Math.floor((flow.get(\"now\") - flow.get(\"nightValveStart\")) / 60000) : 0,\n    // // valveRetryInProgress: flow.get(\"valveRetryInProgress\"),\n    // valveRetryStart: flow.get(\"valveRetryStart\"),\n    // valveRetryTime: flow.get(\"valveRetryTime\"),\n    // valveStartTime: flow.get(\"valveStartTime\"),\n    // valveBlockedUntilNextDay: flow.get(\"valveBlockedUntilNextDay\"),\n    // valveNoIncreaseStart: flow.get(\"valveNoIncreaseStart\"),\n\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 940,
        "wires": [
            [
                "ce31860df40d8c16",
                "40303188ae1725ce"
            ]
        ]
    },
    {
        "id": "ce31860df40d8c16",
        "type": "function",
        "z": "80f453a0456b8b82",
        "name": "function 10",
        "func": "// Expecting msg.payload = { pump: 0/1, valve: 0/1 }\nlet pumpValue = Number(msg.payload.pump1);\n\n// Get last values from flow context\nlet lastPump1 = flow.get(\"lastPumpStatus\") ?? null;\n\nlet changes = {};\n\n// Pump change detection\nif (lastPump1 !== pumpValue) {\n    flow.set(\"lastPumpStatus\", pumpValue);\n    changes.pump1 = pumpValue;\n}\n\n// Only output if there is at least one change\nif (Object.keys(changes).length > 0) {\n    msg.payload = changes;\n    return msg;\n} else {\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 980,
        "wires": [
            [
                "70b828f1a9a0d054",
                "18b73a24f1452daf"
            ]
        ]
    },
    {
        "id": "733d5306480c6b97",
        "type": "debug",
        "z": "80f453a0456b8b82",
        "name": "debug 6",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 980,
        "wires": []
    },
    {
        "id": "40303188ae1725ce",
        "type": "function",
        "z": "80f453a0456b8b82",
        "name": "function 8",
        "func": "let valveValue = Number(msg.payload.valve1);\n\nlet lastValve1 = flow.get(\"lastValveStatus\") ?? null;\n\nlet changes = {};\n\n// Valve change detection\nif (lastValve1 !== valveValue) {\n    flow.set(\"lastValveStatus\", valveValue);\n    changes.valve1 = valveValue;\n}\n\n// Only output if there is at least one change\nif (Object.keys(changes).length > 0) {\n    msg.payload = changes;\n    return msg;\n} else {\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 900,
        "wires": [
            [
                "8e3802ec00a0a2db",
                "18b73a24f1452daf"
            ]
        ]
    },
    {
        "id": "70b828f1a9a0d054",
        "type": "function",
        "z": "80f453a0456b8b82",
        "name": "Pump",
        "func": "// let pump1 =msg.payload.pump1;\n// msg.payload={\n// pump1: pump1,\n// }\n// return msg;\nreturn { payload: msg.payload.pump1 }; ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 980,
        "wires": [
            [
                "733d5306480c6b97",
                "0135eac0d08c77aa"
            ]
        ]
    },
    {
        "id": "8e3802ec00a0a2db",
        "type": "function",
        "z": "80f453a0456b8b82",
        "name": "Valve",
        "func": "// let valve1 =msg.payload.valve1;\n// flow.set(\"valvetest\",valve1);\n// msg.payload={\n// valve1: valve1,\n// }\n// return msg;\nreturn { payload: msg.payload.valve1 }; ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 940,
        "wires": [
            [
                "a1bc34c86c21e093",
                "bcf1533f4cce1010"
            ]
        ]
    },
    {
        "id": "31f8d3f502138364",
        "type": "mqtt out",
        "z": "80f453a0456b8b82",
        "name": "",
        "topic": "absolute/data/button",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "7f29005b7899d141",
        "x": 1040,
        "y": 1060,
        "wires": []
    },
    {
        "id": "18b73a24f1452daf",
        "type": "function",
        "z": "80f453a0456b8b82",
        "name": "function 194",
        "func": "// Function: System Status Monitor\nlet now = new Date();\nlet pumptest = msg.payload.pump1;\nlet valvetest = msg.payload.valve1;\n\nmsg.payload = {\n    timestamp: now.toLocaleString(\"en-IN\", { timeZone: \"Asia/Kolkata\" }),\n\n    \"deviceName\": \"button\",\n    \"deviceType\": \"button\",\n    \"button\": 90,\n    \"latitude\": 19.8791969,\n    \"longitude\": 73.9793069,\n    pumptest,\n    valvetest,\n    auto_Running: flow.get(\"auto_Running\"),\n    \n    // Pump state\n        pstatus: flow.get(\"pump1\") || 0,\n        pstartedAt: flow.get(\"pumpStartTime\") || null,\n        pruntimeMin: flow.get(\"pumpRuntimeMin\") || 0,\n        nightPumpStarted: flow.get(\"nightPumpStarted\") || false,\n        pretryScheduledAt: flow.get(\"pumpRetryScheduledAt\") || null,\n        pretryStart: flow.get(\"pumpRetryStart\") || null,\n        pblockedUntilNextDay: flow.get(\"pumpBlockedUntilNextDay\") || false,\n        pnoIncreaseStart: flow.get(\"pumpNoIncreaseStart\") || null,\n\n\n    // Valve state\n \n        vstatus: flow.get(\"valve1\") || 0,\n        vstartedAt: flow.get(\"valveStartTime\") || null,\n        vruntimeMin: flow.get(\"valveRuntimeMin\") || 0,\n        nightValveStarted: flow.get(\"nightValveStarted\") || false,\n        vretryScheduledAt: flow.get(\"valveRetryScheduledAt\") || null,\n        vretryStart: flow.get(\"valveRetryStart\") || null,\n        vblockedUntilNextDay: flow.get(\"valveBlockedUntilNextDay\") || false,\n        vnoIncreaseStart: flow.get(\"valveNoIncreaseStart\") || null,\n\n\n    // Tank levels\n\n        topTank: flow.get(\"topTank\"),\n        underTank: flow.get(\"underTank\"),\n        // lastTopLevel: flow.get(\"lastTopLevel\"),\n        // lastUnderLevel: flow.get(\"lastUnderLevel\"),\n        refTopLevel:flow.get(\"refTopLevel\"),\n        refUnderLevel:flow.get(\"refUnderLevel\")\n\n\n    // History logs\n    // history: {\n    //     topTankHistory: flow.get(\"topTankHistory\") || [],\n    //     underTankHistory: flow.get(\"underTankHistory\") || [],\n    // }\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 1060,
        "wires": [
            [
                "1d47231007920037",
                "31f8d3f502138364"
            ]
        ]
    },
    {
        "id": "1d47231007920037",
        "type": "debug",
        "z": "80f453a0456b8b82",
        "name": "debug 125",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 1120,
        "wires": []
    },
    {
        "id": "cc24c911743ce0a8",
        "type": "inject",
        "z": "80f453a0456b8b82",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 590,
        "y": 1060,
        "wires": [
            [
                "18b73a24f1452daf"
            ]
        ]
    },
    {
        "id": "3f7054584e64c49d",
        "type": "function",
        "z": "80f453a0456b8b82",
        "name": "function 201",
        "func": "let now = Date.now();\nflow.set(\"now\", now);\n\n// Time\nlet hour = new Date().getHours();\nflow.set(\"hour\", hour);\nlet minutes = new Date().getMinutes();\nflow.set(\"minutes\", minutes);\n\n// Tank levels (from flow context, must be updated by sensors)\nlet topTank = Number(flow.get(\"ttp\"));\nlet underTank = Number(flow.get(\"utp\"));\nflow.set(\"topTank\", topTank);\nflow.set(\"underTank\", underTank);\n\n\n// // Tank levels (replace with real inputs)\n// let lastRun = flow.get(\"lastRun\") || 0;\n// let topTank = 89;   // %\n// flow.set(\"topTank\", topTank);\n// let underTank = 98; // %\n// flow.set(\"underTank\", underTank);\n\n// Runtime helpers\nfunction minutesSince(ts) {\n    return ts ? Math.floor((now - ts) / 60000) : 0;\n}\n\n// History buffers for rolling check\nlet topHistory = flow.get(\"topTankHistory\") || [];\ntopHistory.push({ ts: now, value: topTank });\ntopHistory = topHistory.filter(h => now - h.ts <= 10 * 60 * 1000); // keep 10 min\nflow.set(\"topTankHistory\", topHistory);\n\nlet underHistory = flow.get(\"underTankHistory\") || [];\nunderHistory.push({ ts: now, value: underTank });\nunderHistory = underHistory.filter(h => now - h.ts <= 10 * 60 * 1000);\nflow.set(\"underTankHistory\", underHistory);\n\n// Get reference levels from N minutes ago\nfunction refLevel(history, minutesAgo, currentValue) {\n    let ref = history.find(h => now - h.ts >= minutesAgo * 60 * 1000);\n    return ref ? ref.value : currentValue;\n}\n\nlet refTopLevel = refLevel(topHistory, 3, topTank);\nflow.set(\"refTopLevel\", refTopLevel);\n\nlet refUnderLevel = refLevel(underHistory, 5, underTank);\nflow.set(\"refUnderLevel\", refUnderLevel);\n\n// Device states\nlet pump1 = flow.get(\"pump1\") || 0;\nlet valve1 = flow.get(\"valve1\") || 0;\n\n// Flags\nlet nightPumpStarted = flow.get(\"nightPumpStarted\") || false;\nlet nightValveStarted = flow.get(\"nightValveStarted\") || false;\n\nlet pumpStartAt2am = flow.get(\"pumpStartAt2am\") || false;\nlet pumpBlockedUntilNextDay = flow.get(\"pumpBlockedUntilNextDay\") || false;\nlet valveBlockedUntilNextDay = flow.get(\"valveBlockedUntilNextDay\") || false;\n\n// Retry states\nlet pumpStartTime = flow.get(\"pumpStartTime\") || null;\nlet pumpNoIncreaseStart = flow.get(\"pumpNoIncreaseStart\") || null;\nlet pumpRetryScheduledAt = flow.get(\"pumpRetryScheduledAt\") || null;\nlet pumpRetryStart = flow.get(\"pumpRetryStart\") || null;\n\nlet valveStartTime = flow.get(\"valveStartTime\") || null;\nlet valveNoIncreaseStart = flow.get(\"valveNoIncreaseStart\") || null;\nlet valveRetryScheduledAt = flow.get(\"valveRetryScheduledAt\") || null;\nlet valveRetryStart = flow.get(\"valveRetryStart\") || null;\n \n\nlet emails = [];\n\n// === DAILY RESET ===\n// if(hour === 11 && minutes === 30){\nif (hour === 2 && minutes === 0 && flow.get(\"lastResetDay\") !== new Date().getDate()) {\n    pumpBlockedUntilNextDay = false;\n    valveBlockedUntilNextDay = false;\n    nightPumpStarted = false;\n    nightValveStarted = false;\n\n    pumpRetryScheduledAt = null;\n    pumpRetryStart = null;\n    pumpNoIncreaseStart = null;\n\n    valveRetryScheduledAt = null;\n    valveRetryStart = null;\n    valveNoIncreaseStart = null;\n\n    flow.set(\"lastResetDay\", new Date().getDate());\n    emails.push({ topic: \"Info\", payload: \"🔄 Daily reset at 2 AM: Flags and blocks cleared.\" });\n}\n\n// === PUMP START AT 2 AM ===\nif (hour === 2 && minutes === 0 && topTank < 85 && !nightPumpStarted && !pumpBlockedUntilNextDay) {\n    pump1 = 1;\n    pumpStartTime = now;\n    nightPumpStarted = true;\n    pumpStartAt2am = true;\n\n    flow.set(\"pump1\", pump1);\n    emails.push({ topic: \"Info\", payload: \"🚰 Pump started at 2 AM (top tank < 85%).\" });\n}\n\n// === PUMP STOP (TANK FULL) ===\nif (pump1 === 1 && topTank >= 90) {\n    pump1 = 0;\n    pumpStartAt2am = false;\n    nightPumpStarted = false;\n    pumpStartTime = null;\n\n    pumpRetryScheduledAt = null;\n    pumpRetryStart = null;\n    pumpNoIncreaseStart = null;\n\n    flow.set(\"pump1\", pump1);\n    emails.push({ topic: \"Info\", payload: \"🚰 Pump stopped (top tank >= 90%).\" });\n\n    // Start valve if needed\n    if (underTank < 95 && !valveBlockedUntilNextDay) {\n        valve1 = 1;\n        valveStartTime = now;\n        nightValveStarted = true;\n        flow.set(\"valve1\", valve1);\n        emails.push({ topic: \"Info\", payload: \"➡️ Valve started (underground tank < 95%).\" });\n    }\n}\n\n// === PUMP SAFETY: NO INCREASE ===\nif (pump1 === 1 && Math.floor(topTank) <= Math.floor(refTopLevel)  && !pumpRetryStart) {\n    if (!pumpNoIncreaseStart) pumpNoIncreaseStart = now;\n    if (now - pumpNoIncreaseStart > 3 * 60 * 1000 && ((topTank - refTopLevel) < 2) ) {\n        pump1 = 0;\n        pumpStartTime = null;\n        pumpNoIncreaseStart = null;\n        pumpRetryScheduledAt = now + 60 * 60 * 1000; // 5 min retry\n        flow.set(\"pump1\", pump1);\n        emails.push({ topic: \"Alert\", payload: \"⚠️ Pump stopped — no increase in top tank for 3 min. Retry in 5 min.\" });\n    }\n} else {\n    pumpNoIncreaseStart = null;\n}\n\n// === PUMP RETRY START ===\nif (pumpRetryScheduledAt && now >= pumpRetryScheduledAt && !pumpRetryStart && !pumpBlockedUntilNextDay && !(topTank >= 85)) {\n    pump1 = 1;\n    pumpRetryStart = now;\n    pumpRetryScheduledAt = null;\n    flow.set(\"pump1\", pump1);\n    emails.push({ topic: \"Info\", payload: \"🔁 Pump retry started (3 min check).\" });\n}\n\n// === PUMP RETRY CHECK ===\nif (pumpRetryStart && (now - pumpRetryStart > 3 * 60 * 1000)) {\n    if (Math.floor(topTank) <= Math.floor(refTopLevel) && ((topTank - refTopLevel) < 2) ) {\n        pump1 = 0;\n        pumpRetryStart = null;\n        pumpBlockedUntilNextDay = true;\n        nightPumpStarted = false;\n        pumpStartAt2am = false;\n        pumpStartTime = null;\n        flow.set(\"pump1\", pump1);\n        emails.push({ topic: \"Alert\", payload: \"❌ Pump retry failed — Pump blocked until next day.\" });\n    } else {\n        pumpRetryStart = null;\n        pumpNoIncreaseStart = null;\n        pumpStartTime = now;\n        emails.push({ topic: \"Info\", payload: \"✅ Pump retry successful — continuing normal run.\" });\n    }\n}\n\n// === VALVE STOP (TANK FULL) ===\nif (valve1 === 1 && underTank >= 95) {\n    valve1 = 0;\n    nightValveStarted = false;\n    valveStartTime = null;\n\n    valveRetryScheduledAt = null;\n    valveRetryStart = null;\n    valveNoIncreaseStart = null;\n\n    flow.set(\"valve1\", valve1);\n    emails.push({ topic: \"Info\", payload: \"🚰 Valve stopped (underground tank >= 98%).\" });\n}\n\n// === VALVE SAFETY: NO INCREASE ===\nif (valve1 === 1 && Math.floor(underTank) <= Math.floor(refUnderLevel) && ((underTank - refUnderLevel) < 2) && !valveRetryStart) {\n    if (!valveNoIncreaseStart) valveNoIncreaseStart = now;\n    if (now - valveNoIncreaseStart > 10 * 60 * 1000) {\n        valve1 = 0;\n        valveStartTime = null;\n        valveNoIncreaseStart = null;\n        valveRetryScheduledAt = now + 60 * 60 * 1000;\n        flow.set(\"valve1\", valve1);\n        emails.push({ topic: \"Alert\", payload: \"⚠️ Valve stopped — no increase in underground tank for 5 min. Retry in 5 min.\" });\n    }\n} else {\n    valveNoIncreaseStart = null;\n}\n\n// === VALVE RETRY START ===\nif (valveRetryScheduledAt && now >= valveRetryScheduledAt && !valveRetryStart && !valveBlockedUntilNextDay) {\n    valve1 = 1;\n    valveRetryStart = now;\n    valveRetryScheduledAt = null;\n    flow.set(\"valve1\", valve1);\n    emails.push({ topic: \"Info\", payload: \"🔁 Valve retry started (5 min check).\" });\n}\n\n// === VALVE RETRY CHECK ===\nif (valveRetryStart && (now - valveRetryStart > 10 * 60 * 1000)) {\n    if (Math.floor(underTank) <= Math.floor(refUnderLevel)&& ((underTank - refUnderLevel) < 2) ) {\n        valve1 = 0;\n        valveRetryStart = null;\n        valveBlockedUntilNextDay = true;\n        nightValveStarted = false;\n        valveStartTime = null;\n        flow.set(\"valve1\", valve1);\n        emails.push({ topic: \"Alert\", payload: \"❌ Valve retry failed — Valve blocked until next day.\" });\n    } else {\n        valveRetryStart = null;\n        valveNoIncreaseStart = null;\n        valveStartTime = now;\n        emails.push({ topic: \"Info\", payload: \"✅ Valve retry successful — continuing normal run.\" });\n    }\n}\n\n// === Runtime tracking ===\nlet pumpRuntimeMin = pumpStartTime ? minutesSince(pumpStartTime) : 0;\nlet valveRuntimeMin = valveStartTime ? minutesSince(valveStartTime) : 0;\nflow.set(\"pumpRuntimeMin\", pumpRuntimeMin);\nflow.set(\"valveRuntimeMin\", valveRuntimeMin);\n\n// === Save states ===\nflow.set(\"pump1\", pump1);\nflow.set(\"valve1\", valve1);\nflow.set(\"nightPumpStarted\", nightPumpStarted);\nflow.set(\"nightValveStarted\", nightValveStarted);\nflow.set(\"pumpStartAt2am\", pumpStartAt2am);\nflow.set(\"pumpBlockedUntilNextDay\", pumpBlockedUntilNextDay);\nflow.set(\"valveBlockedUntilNextDay\", valveBlockedUntilNextDay);\n\nflow.set(\"pumpStartTime\", pumpStartTime);\nflow.set(\"pumpNoIncreaseStart\", pumpNoIncreaseStart);\nflow.set(\"pumpRetryScheduledAt\", pumpRetryScheduledAt);\nflow.set(\"pumpRetryStart\", pumpRetryStart);\n\nflow.set(\"valveStartTime\", valveStartTime);\nflow.set(\"valveNoIncreaseStart\", valveNoIncreaseStart);\nflow.set(\"valveRetryScheduledAt\", valveRetryScheduledAt);\nflow.set(\"valveRetryStart\", valveRetryStart);\n\n// === Output emails ===\nif (emails.length > 0) {\n    node.send([{ payload: emails }, null]);\n} else {\n    node.send([null, null]);\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "bcf1533f4cce1010",
        "type": "debug",
        "z": "80f453a0456b8b82",
        "name": "debug 138",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 940,
        "wires": []
    },
    {
        "id": "7e73d26a1273df68",
        "type": "function",
        "z": "80f453a0456b8b82",
        "name": "Relay pump/valve status",
        "func": "let pump = flow.get(\"pump\");\nlet valve = flow.get(\"valve\") ;\n\n// keep relay state in flow context (persistent between calls)\nlet relayStatus = flow.get(\"relayStatus\");\nlet newStatus = msg.payload.RelayStatus ? 1 : 0;\n\nif (relayStatus === 0 && newStatus === 1) {\n    // relay just turned ON, send message\n    msg.payload = {\n        pumpstatus: pump,\n        valvestatus: valve\n    };\n    node.send(msg);\n}\n\n// update stored relay status\nflow.set(\"relayStatus\", newStatus);\n\n// nothing to return unless triggered\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "19e707c411a01151",
        "type": "inject",
        "z": "80f453a0456b8b82",
        "g": "4a1602ff16ab2894",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "00 04 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 1210,
        "y": 680,
        "wires": [
            [
                "7d4526acdef6684a"
            ]
        ]
    },
    {
        "id": "30bf7dcece14a655",
        "type": "inject",
        "z": "80f453a0456b8b82",
        "g": "4a1602ff16ab2894",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "55 01 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 1210,
        "y": 640,
        "wires": [
            [
                "7d4526acdef6684a"
            ]
        ]
    },
    {
        "id": "6d4f4347c2f0db69",
        "type": "function",
        "z": "f2d74b707d15b316",
        "name": "function 67",
        "func": "// Get timestamp 1 hour ago\nlet ts = Date.now() - (24*60*60*1000);\n\nmsg.payload = {\n    \"ts\": 1752038431014,\n   \n        \"time_temp\": 111,\n        \"time_hum\": 222\n    }\n\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 140,
        "wires": [
            [
                "e144327e2f3bf951"
            ]
        ]
    },
    {
        "id": "85f77091d99b13a9",
        "type": "inject",
        "z": "f2d74b707d15b316",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 410,
        "y": 180,
        "wires": [
            [
                "6d4f4347c2f0db69",
                "5d550b49b9aab93e"
            ]
        ]
    },
    {
        "id": "e144327e2f3bf951",
        "type": "debug",
        "z": "f2d74b707d15b316",
        "name": "debug 55",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 140,
        "wires": []
    },
    {
        "id": "fa587ce54d187104",
        "type": "debug",
        "z": "f2d74b707d15b316",
        "name": "debug 56",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 200,
        "wires": []
    },
    {
        "id": "5d550b49b9aab93e",
        "type": "function",
        "z": "f2d74b707d15b316",
        "name": "function 114",
        "func": "// Get timestamp 1 hour ago\nvar ts = Date.now() - (48*60*60*1000);\n\nmsg.payload = {\n    \"ts\": ts,\n    \"values\": {\n        \"time_temp\": 1,\n        \"time_hum\": 2\n    }\n}\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 200,
        "wires": [
            [
                "fa587ce54d187104",
                "34d9bfc53866b028"
            ]
        ]
    },
    {
        "id": "34d9bfc53866b028",
        "type": "mqtt out",
        "z": "f2d74b707d15b316",
        "name": "",
        "topic": "office/time_test",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "7f29005b7899d141",
        "x": 780,
        "y": 300,
        "wires": []
    },
    {
        "id": "a9fbbd32442f8cca",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "function 72",
        "func": "msg.payload = { value: msg.payload, 'fc': 3, 'unitid': 1, 'address': 44, 'quantity': 9 } ;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 120,
        "wires": [
            [
                "beb776cea4a50442"
            ]
        ]
    },
    {
        "id": "97281017c9f923a0",
        "type": "inject",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 120,
        "wires": [
            [
                "a9fbbd32442f8cca"
            ]
        ]
    },
    {
        "id": "b788adfb096118f5",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "function 74",
        "func": "msg.payload = { value: msg.payload, 'fc': 3, 'unitid': 1, 'address': 92, 'quantity': 11 } ;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 180,
        "wires": [
            [
                "4f356be1385e7850"
            ]
        ]
    },
    {
        "id": "5086bedb603cb11e",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "function 77",
        "func": "msg.payload = { value: msg.payload, 'fc': 3, 'unitid': 1, 'address': 405, 'quantity': 5 } ;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 240,
        "wires": [
            [
                "93738164dad620be"
            ]
        ]
    },
    {
        "id": "cc6fc3ae65fa2bb8",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "function 79",
        "func": "msg.payload = { value: msg.payload, 'fc': 3, 'unitid': 1, 'address': 700, 'quantity': 22 } ;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 300,
        "wires": [
            [
                "ff72c4068dde1af4"
            ]
        ]
    },
    {
        "id": "f01c38f25460f5b2",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "function 81",
        "func": "msg.payload = { value: msg.payload, 'fc': 3, 'unitid': 1, 'address': 1011, 'quantity': 16 } ;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 360,
        "wires": [
            [
                "7ff581d4614fe97f"
            ]
        ]
    },
    {
        "id": "391c66f356138ea0",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "function 83",
        "func": "msg.payload = { value: msg.payload, 'fc': 3, 'unitid': 1, 'address': 1101, 'quantity': 2 } ;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 420,
        "wires": [
            [
                "ec558adedd6d2418"
            ]
        ]
    },
    {
        "id": "adbfa094f2ff5982",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "function 84",
        "func": "msg.payload = { value: msg.payload, 'fc': 3, 'unitid': 1, 'address': 1506, 'quantity': 1 } ;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 480,
        "wires": [
            [
                "f0e700f2928b46f2"
            ]
        ]
    },
    {
        "id": "3d60dbc3560ccefb",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "function 86",
        "func": "msg.payload = { value: msg.payload, 'fc': 3, 'unitid': 1, 'address': 1801, 'quantity': 6 };\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 540,
        "wires": [
            [
                "f4a528d55c4bf7c6"
            ]
        ]
    },
    {
        "id": "4f356be1385e7850",
        "type": "modbus-flex-getter",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 630,
        "y": 180,
        "wires": [
            [
                "a8b21cf9ce5a240d"
            ],
            []
        ]
    },
    {
        "id": "93738164dad620be",
        "type": "modbus-flex-getter",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 630,
        "y": 240,
        "wires": [
            [
                "81e9e22276df4abb"
            ],
            []
        ]
    },
    {
        "id": "ff72c4068dde1af4",
        "type": "modbus-flex-getter",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 630,
        "y": 300,
        "wires": [
            [
                "7eaf991b83fa6b55"
            ],
            []
        ]
    },
    {
        "id": "d15d169327e075ff",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "function 91",
        "func": "let data = msg.payload;\nflow.set(\"Set_Pressure\", data[0]);\nflow.set(\"Adaptive_Setting\", data[1]);\nflow.set(\"Actual_Pressure\", data[6]);\nflow.set(\"System_Flow\", data[7]);\nflow.set(\"Suction_Pressure\", data[8])\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "a8b21cf9ce5a240d",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "function 93",
        "func": "let data = msg.payload;\nflow.set(\"Status_Pump_1\", data[0]);\nflow.set(\"Status_Pump_2\", data[1]);\nflow.set(\"Status_Pump_3\", data[2]);\nflow.set(\"Status_Pump_4\", data[3]);\nflow.set(\"Status_Pump_5\", data[4]);\nflow.set(\"Status_Pump_6\", data[5]);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "81e9e22276df4abb",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "function 94",
        "func": "let data = msg.payload;\nflow.set(\"Kw\", data[0]);\nflow.set(\"Load_Percentage\", data[4]);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "7eaf991b83fa6b55",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "function 95",
        "func": "let data = msg.payload;\nflow.set(\"Current_Pump_1\", data[0]);\nflow.set(\"Current_Pump_2\", data[1]);\nflow.set(\"Current_Pump_3\", data[2]);\nflow.set(\"Current_Pump_4\", data[3]);\nflow.set(\"Current_Pump_5\", data[4]);\nflow.set(\"Current_Pump_6\", data[5]);\nflow.set(\"Power_Pump_1\", data[10]);\nflow.set(\"Power_Pump_2\", data[11]);\nflow.set(\"Power_Pump_3\", data[12]);\nflow.set(\"Power_Pump_4\", data[13]);\nflow.set(\"Power_Pump_5\", data[14]);\nflow.set(\"Power_Pump_6\", data[15]);\nflow.set(\"Output_Speed_1\", data[16]);\nflow.set(\"Output_Speed_2\", data[17]);\nflow.set(\"Output_Speed_3\", data[18]);\nflow.set(\"Output_Speed_4\", data[19]);\nflow.set(\"Output_Speed_5\", data[20]);\nflow.set(\"Output_Speed_6\", data[21]);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "7ff581d4614fe97f",
        "type": "modbus-flex-getter",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 630,
        "y": 360,
        "wires": [
            [
                "368052f67f59de76"
            ],
            []
        ]
    },
    {
        "id": "ec558adedd6d2418",
        "type": "modbus-flex-getter",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 630,
        "y": 420,
        "wires": [
            [
                "d1bf379febb9ca8b"
            ],
            []
        ]
    },
    {
        "id": "f0e700f2928b46f2",
        "type": "modbus-flex-getter",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 630,
        "y": 480,
        "wires": [
            [
                "4e99947bff98853a"
            ],
            []
        ]
    },
    {
        "id": "f4a528d55c4bf7c6",
        "type": "modbus-flex-getter",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 630,
        "y": 540,
        "wires": [
            [
                "5d904419efb40643"
            ],
            []
        ]
    },
    {
        "id": "368052f67f59de76",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "function 96",
        "func": "let data = msg.payload;\nflow.set(\"Run_Mint_Pump_1\", data[0]);\nflow.set(\"Run_Mint_Pump_2\", data[1]);\nflow.set(\"Run_Mint_Pump_3\", data[2]);\nflow.set(\"Run_Mint_Pump_4\", data[3]);\nflow.set(\"Run_Mint_Pump_5\", data[4]);\nflow.set(\"Run_Mint_Pump_6\", data[5]);\nflow.set(\"Run_Hr_Pump_1\", data[10]);\nflow.set(\"Run_Hr_Pump_2\", data[11]);\nflow.set(\"Run_Hr_Pump_3\", data[12]);\nflow.set(\"Run_Hr_Pump_4\", data[13]);\nflow.set(\"Run_Hr_Pump_5\", data[14]);\nflow.set(\"Run_Hr_Pump_6\", data[15]);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "d1bf379febb9ca8b",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "function 97",
        "func": "let data = msg.payload;\nflow.set(\"Set_No_Of_Pump\", data[0]);\nflow.set(\"Standby_Pump\", data[1]);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "4e99947bff98853a",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "function 98",
        "func": "let data = msg.payload;\nflow.set(\"System_Type\", data[0]);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "5d904419efb40643",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "function 99",
        "func": "// let data = msg.payload;\n// flow.set(\"Count_Hr_Pump_1\", data[0]);\n// flow.set(\"Count_Hr_Pump_2\", data[1]);\n// flow.set(\"Count_Hr_Pump_3\", data[2]);\n// flow.set(\"Count_Hr_Pump_4\", data[3]);\n// flow.set(\"Count_Hr_Pump_5\", data[4]);\n// flow.set(\"Count_Hr_Pump_6\", data[5]);\n// return msg;\n\n\nlet data = msg.payload;\n\n// Make sure you have at least 12 registers for 6 pumps (2 registers per pump)\nif (Array.isArray(data) && data.length >= 12) {\n    // Combine two registers for each pump (Big Endian assumed: high word first)\n    let pump1 = (data[0] << 16) | data[1];\n    let pump2 = (data[2] << 16) | data[3];\n    let pump3 = (data[4] << 16) | data[5];\n    let pump4 = (data[6] << 16) | data[7];\n    let pump5 = (data[8] << 16) | data[9];\n    let pump6 = (data[10] << 16) | data[11];\n\n    flow.set(\"Count_Hr_Pump_1\", pump1);\n    flow.set(\"Count_Hr_Pump_2\", pump2);\n    flow.set(\"Count_Hr_Pump_3\", pump3);\n    flow.set(\"Count_Hr_Pump_4\", pump4);\n    flow.set(\"Count_Hr_Pump_5\", pump5);\n    flow.set(\"Count_Hr_Pump_6\", pump6);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "09e23be23dde6ceb",
        "type": "inject",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1.4",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 360,
        "wires": [
            [
                "f01c38f25460f5b2"
            ]
        ]
    },
    {
        "id": "bad470461c456bf1",
        "type": "inject",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1.1",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 180,
        "wires": [
            [
                "b788adfb096118f5"
            ]
        ]
    },
    {
        "id": "c0df6fb1fb14c10d",
        "type": "inject",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1.2",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 240,
        "wires": [
            [
                "5086bedb603cb11e"
            ]
        ]
    },
    {
        "id": "69923f8abf2f73dc",
        "type": "inject",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1.3",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 300,
        "wires": [
            [
                "cc6fc3ae65fa2bb8"
            ]
        ]
    },
    {
        "id": "c017df6d088584f2",
        "type": "inject",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1.5",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 420,
        "wires": [
            [
                "391c66f356138ea0"
            ]
        ]
    },
    {
        "id": "2fd4343883d6ef64",
        "type": "inject",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1.6",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 480,
        "wires": [
            [
                "adbfa094f2ff5982"
            ]
        ]
    },
    {
        "id": "4fd64a13732ec3e4",
        "type": "inject",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1.7",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 540,
        "wires": [
            [
                "3d60dbc3560ccefb"
            ]
        ]
    },
    {
        "id": "e1b08b7445db5653",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "e1738dc8b4d4f3ff",
        "name": "function 100",
        "func": "msg.payload = { value: msg.payload, 'fc': 1, 'unitid': 1, 'address': 2401, 'quantity': 82 } ;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 640,
        "wires": [
            [
                "494855ba78f5d50b"
            ]
        ]
    },
    {
        "id": "8ab81393195ed7eb",
        "type": "inject",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "e1738dc8b4d4f3ff",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1.8",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 640,
        "wires": [
            [
                "e1b08b7445db5653"
            ]
        ]
    },
    {
        "id": "a0c2b733a5bfc2ed",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "e1738dc8b4d4f3ff",
        "name": "function 108",
        "func": "let data = msg.payload;\nflow.set(\"Pump_1_Start_Stop_Reach\", data[0]);\nflow.set(\"Pump_2_Start_Stop_Reach\", data[1]);\nflow.set(\"Pump_3_Start_Stop_Reach\", data[2]);\nflow.set(\"Pump_4_Start_Stop_Reach\", data[3]);\nflow.set(\"Pump_5_Start_Stop_Reach\", data[4]);\nflow.set(\"Pump_6_Start_Stop_Reach\", data[5]);\nflow.set(\"Pump_1_Trip\", data[10]);\nflow.set(\"Pump_2_Trip\", data[11]);\nflow.set(\"Pump_3_Trip\", data[12]);\nflow.set(\"Pump_4_Trip\", data[13]);\nflow.set(\"Pump_5_Trip\", data[14]);\nflow.set(\"Pump_6_Trip\", data[15]);\nflow.set(\"High_Pressure\", data[20]);\nflow.set(\"Low_Pressure\", data[22]);\nflow.set(\"Service_Interval_Reset\", data[23]);\nflow.set(\"Sensor_Fail\", data[30]);\nflow.set(\"Pump_1_Max_Time_Reach\", data[50]);\nflow.set(\"Pump_2_Max_Time_Reach\", data[51]);\nflow.set(\"Pump_3_Max_Time_Reach\", data[52]);\nflow.set(\"Pump_4_Max_Time_Reach\", data[53]);\nflow.set(\"Pump_5_Max_Time_Reach\", data[54]);\nflow.set(\"Pump_6_Max_Time_Reach\", data[55]);\nflow.set(\"Alarm_VFD_Overload\", data[60]);\nflow.set(\"Dry_Run_Alarm\", data[61]);\nflow.set(\"High_Pressure_Alarm\", data[62]);\nflow.set(\"Low_Pressure_Alarm\", data[63]);\nflow.set(\"Pressure_Sensor_Fail\", data[64]);\nflow.set(\"Channel_2_Sensor_Fail\", data[65]);\nflow.set(\"VFD_Dry_Run_Spare\", data[66]);\nflow.set(\"Chut_Off_Pressure_Reach\", data[67]);\nflow.set(\"Suction_Pr_Low\", data[68]);\nflow.set(\"Emergency_Stopped\", data[69]);\nflow.set(\"VFD_Communication_Fail\", data[70]);\nflow.set(\"Pump_Service_Expired\", data[71]);\nflow.set(\"Dry_Run_VFD_1\", data[72]);\nflow.set(\"Dry_Run_VFD_2\", data[73]);\nflow.set(\"Dry_Run_VFD_3\", data[74]);\nflow.set(\"Dry_Run_VFD_4\", data[75]);\nflow.set(\"Dry_Run_VFD_5\", data[76]);\nflow.set(\"Dry_Run_VFD_6\", data[77]);\nflow.set(\"System_Healthy_1\", data[80]);\nflow.set(\"System_Healthy_2\", data[81]);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "beb776cea4a50442",
        "type": "modbus-flex-getter",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 630,
        "y": 120,
        "wires": [
            [
                "d15d169327e075ff"
            ],
            []
        ]
    },
    {
        "id": "494855ba78f5d50b",
        "type": "modbus-flex-getter",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "e1738dc8b4d4f3ff",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 630,
        "y": 640,
        "wires": [
            [
                "a0c2b733a5bfc2ed"
            ],
            []
        ]
    },
    {
        "id": "46b3e0b4b3d12030",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "function 109",
        "func": "msg.payload = {\n    Set_Pressure: flow.get(\"Set_Pressure\"),\n    Adaptive_Setting: flow.get(\"Adaptive_Setting\"),\n    Actual_Pressure: flow.get(\"Actual_Pressure\"),\n    System_Flow: flow.get(\"System_Flow\"),\n    Suction_Pressure: flow.get(\"Suction_Pressure\"),\n    // Status_Pump_1: flow.get(\"Status_Pump_1\"),\n    // Status_Pump_2: flow.get(\"Status_Pump_2\"),\n    // Status_Pump_3: flow.get(\"Status_Pump_3\"),\n    // Status_Pump_4: flow.get(\"Status_Pump_4\"),\n    // Status_Pump_5: flow.get(\"Status_Pump_5\"),\n    // Status_Pump_6: flow.get(\"Status_Pump_6\"),\n    Kw: flow.get(\"Kw\"),\n    Load_Percentage: flow.get(\"Load_Percentage\"),\n    Current_Pump_1: flow.get(\"Current_Pump_1\"),\n    Current_Pump_2: flow.get(\"Current_Pump_2\"),\n    Current_Pump_3: flow.get(\"Current_Pump_3\"),\n    Current_Pump_4: flow.get(\"Current_Pump_4\"),\n    Current_Pump_5: flow.get(\"Current_Pump_5\"),\n    Current_Pump_6: flow.get(\"Current_Pump_6\"),\n    Power_Pump_1: flow.get(\"Power_Pump_1\"),\n    Power_Pump_2: flow.get(\"Power_Pump_2\"),\n    Power_Pump_3: flow.get(\"Power_Pump_3\"),\n    Power_Pump_4: flow.get(\"Power_Pump_4\"),\n    Power_Pump_5: flow.get(\"Power_Pump_5\"),\n    Power_Pump_6: flow.get(\"Power_Pump_6\"),\n    Run_Pump_1: flow.get(\"Run_Mint_Pump_1\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_1\")+\"Min\",\n    Run_Pump_2: flow.get(\"Run_Mint_Pump_2\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_2\")+\"Min\",\n    Run_Pump_3: flow.get(\"Run_Mint_Pump_3\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_3\")+\"Min\",\n    Run_Pump_4: flow.get(\"Run_Mint_Pump_4\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_4\")+\"Min\",\n    Run_Pump_5: flow.get(\"Run_Mint_Pump_5\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_5\")+\"Min\",\n    Run_Pump_6: flow.get(\"Run_Mint_Pump_6\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_6\")+\"Min\",\n    // Run_Mint_Pump_1: flow.get(\"Run_Mint_Pump_1\"),\n    // Run_Mint_Pump_2: flow.get(\"Run_Mint_Pump_2\"),\n    // Run_Mint_Pump_3: flow.get(\"Run_Mint_Pump_3\"),\n    // Run_Mint_Pump_4: flow.get(\"Run_Mint_Pump_4\"),\n    // Run_Mint_Pump_5: flow.get(\"Run_Mint_Pump_5\"),\n    // Run_Mint_Pump_6: flow.get(\"Run_Mint_Pump_6\"),\n    // Run_Hr_Pump_1: flow.get(\"Run_Hr_Pump_1\"),\n    // Run_Hr_Pump_2: flow.get(\"Run_Hr_Pump_2\"),\n    // Run_Hr_Pump_3: flow.get(\"Run_Hr_Pump_3\"),\n    // Run_Hr_Pump_4: flow.get(\"Run_Hr_Pump_4\"),\n    // Run_Hr_Pump_5: flow.get(\"Run_Hr_Pump_5\"),\n    // Run_Hr_Pump_6: flow.get(\"Run_Hr_Pump_6\")\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "5f6c662ab3aa669b",
        "type": "inject",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "1be41bfb03a3b383",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 650,
        "y": 900,
        "wires": [
            [
                "585e906aeb4b2062"
            ]
        ]
    },
    {
        "id": "1928bd3aedd7bfba",
        "type": "mqtt out",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "1be41bfb03a3b383",
        "name": "",
        "topic": "office/KSB/pump1",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5f0410d3f06f7681",
        "x": 1130,
        "y": 900,
        "wires": []
    },
    {
        "id": "16a11446366bd08b",
        "type": "inject",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "c4632f066fadc072",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1.9",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 740,
        "wires": [
            [
                "d4d74499d0aa8520"
            ]
        ]
    },
    {
        "id": "d4d74499d0aa8520",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "c4632f066fadc072",
        "name": "function 110",
        "func": "msg.payload = { value: msg.payload, 'fc': 1, 'unitid': 1, 'address': 2351, 'quantity': 16 } ;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 740,
        "wires": [
            [
                "4674217c13431770"
            ]
        ]
    },
    {
        "id": "4674217c13431770",
        "type": "modbus-flex-getter",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "c4632f066fadc072",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 630,
        "y": 740,
        "wires": [
            [
                "53e1cc01d04b8b3c"
            ],
            []
        ]
    },
    {
        "id": "53e1cc01d04b8b3c",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "c4632f066fadc072",
        "name": "function 111",
        "func": "let data = msg.payload;\nflow.set(\"Buzzer\", data[0]);\nflow.set(\"Main_Contactor_Pump_1\", data[1]);\nflow.set(\"Main_Contactor_Pump_2\", data[2]);\nflow.set(\"Main_Contactor_Pump_3\", data[3]);\nflow.set(\"Main_Contactor_Pump_4\", data[4]);\nflow.set(\"Main_Contactor_Pump_5\", data[5]);\nflow.set(\"Main_Contactor_Pump_6\", data[6]);\nflow.set(\"Delta_Contactor_Pump_1\", data[7]);\nflow.set(\"Delta_Contactor_Pump_2\", data[10]);\nflow.set(\"Delta_Contactor_Pump_3\", data[11]);\nflow.set(\"Delta_Contactor_Pump_4\", data[12]);\nflow.set(\"Delta_Contactor_Pump_5\", data[13]);\nflow.set(\"Delta_Contactor_Pump_6\", data[14]);\nflow.set(\"VFD_Run_Spare\", data[15]);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "d5ccdda0aaae3cf9",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "function 112",
        "func": "msg.payload= {\n    Set_No_Of_Pump: flow.get(\"Set_No_Of_Pump\")+\"+\"+flow.get(\"Standby_Pump\"),\n    // Standby_Pump: flow.get(\"Standby_Pump\"),\n    // System_Type: flow.get(\"System_Type\"),\n    Count_Hr_Pump_1: flow.get(\"Count_Hr_Pump_1\"),\n    Count_Hr_Pump_2: flow.get(\"Count_Hr_Pump_2\"),\n    Count_Hr_Pump_3: flow.get(\"Count_Hr_Pump_3\"),\n    Count_Hr_Pump_4: flow.get(\"Count_Hr_Pump_4\"),\n    Count_Hr_Pump_5: flow.get(\"Count_Hr_Pump_5\"),\n    Count_Hr_Pump_6: flow.get(\"Count_Hr_Pump_6\"),\n    Pump_1_Start_Stop_Reach: flow.get(\"Pump_1_Start_Stop_Reach\"),\n    Pump_2_Start_Stop_Reach: flow.get(\"Pump_2_Start_Stop_Reach\"),\n    Pump_3_Start_Stop_Reach: flow.get(\"Pump_3_Start_Stop_Reach\"),\n    Pump_4_Start_Stop_Reach: flow.get(\"Pump_4_Start_Stop_Reach\"),\n    Pump_5_Start_Stop_Reach: flow.get(\"Pump_5_Start_Stop_Reach\"),\n    Pump_6_Start_Stop_Reach: flow.get(\"Pump_6_Start_Stop_Reach\"),\n    Pump_1_Trip: flow.get(\"Pump_1_Trip\"),\n    Pump_2_Trip: flow.get(\"Pump_2_Trip\"),\n    Pump_3_Trip: flow.get(\"Pump_3_Trip\"),\n    Pump_4_Trip: flow.get(\"Pump_4_Trip\"),\n    Pump_5_Trip: flow.get(\"Pump_5_Trip\"),\n    Pump_6_Trip: flow.get(\"Pump_6_Trip\"),\n    High_Pressure: flow.get(\"High_Pressure\"),\n    Low_Pressure: flow.get(\"Low_Pressure\"),\n    Service_Interval_Reset: flow.get(\"Service_Interval_Reset\"),\n    Sensor_Fail :flow.get(\"Sensor_Fail\"),\n    Pump_1_Max_Time_Reach: flow.get(\"Pump_1_Max_Time_Reach\"),\n    Pump_2_Max_Time_Reach: flow.get(\"Pump_2_Max_Time_Reach\"),\n    Pump_3_Max_Time_Reach: flow.get(\"Pump_3_Max_Time_Reach\"),\n    Pump_4_Max_Time_Reach: flow.get(\"Pump_4_Max_Time_Reach\"),\n    Pump_5_Max_Time_Reach: flow.get(\"Pump_5_Max_Time_Reach\"),\n    Pump_6_Max_Time_Reach: flow.get(\"Pump_6_Max_Time_Reach\")\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "be2f7a9bbd4d55c3",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "function 113",
        "func": "msg.payload = {\n    Alarm_VFD_Overload: flow.get(\"Alarm_VFD_Overload\"),\n    Dry_Run_Alarm: flow.get(\"Dry_Run_Alarm\"),\n    High_Pressure_Alarm: flow.get(\"High_Pressure_Alarm\"),\n    Low_Pressure_Alarm: flow.get(\"Low_Pressure_Alarm\"),\n    Pressure_Sensor_Fail: flow.get(\"Pressure_Sensor_Fail\"),\n    Channel_2_Sensor_Fail: flow.get(\"Channel_2_Sensor_Fail\"),\n    VFD_Dry_Run_Spare: flow.get(\"VFD_Dry_Run_Spare\"),\n    Chut_Off_Pressure_Reach: flow.get(\"Chut_Off_Pressure_Reach\"),\n    Suction_Pr_Low: flow.get(\"Suction_Pr_Low\"),\n    Emergency_Stopped: flow.get(\"Emergency_Stopped\"),\n    VFD_Communication_Fail: flow.get(\"VFD_Communication_Fail\"),\n    Pump_Service_Expired: flow.get(\"Pump_Service_Expired\"),\n    Dry_Run_VFD_1: flow.get(\"Dry_Run_VFD_1\"),\n    Dry_Run_VFD_2: flow.get(\"Dry_Run_VFD_2\"),\n    Dry_Run_VFD_3: flow.get(\"Dry_Run_VFD_3\"),\n    Dry_Run_VFD_4: flow.get(\"Dry_Run_VFD_4\"),\n    Dry_Run_VFD_5: flow.get(\"Dry_Run_VFD_5\"),\n    Dry_Run_VFD_6: flow.get(\"Dry_Run_VFD_6\"),\n    System_Healthy_1: flow.get(\"System_Healthy_1\"),\n    System_Healthy_2: flow.get(\"System_Healthy_2\"),\n    Buzzer: flow.get(\"Buzzer\"),\n    Main_Contactor_Pump_1: flow.get(\"Main_Contactor_Pump_1\"),\n    Main_Contactor_Pump_2: flow.get(\"Main_Contactor_Pump_2\"),\n    Main_Contactor_Pump_3: flow.get(\"Main_Contactor_Pump_3\"),\n    Main_Contactor_Pump_4: flow.get(\"Main_Contactor_Pump_4\"),\n    Main_Contactor_Pump_5: flow.get(\"Main_Contactor_Pump_5\"),\n    Main_Contactor_Pump_6: flow.get(\"Main_Contactor_Pump_6\"),\n    Delta_Contactor_Pump_1: flow.get(\"Delta_Contactor_Pump_1\"),\n    Delta_Contactor_Pump_2: flow.get(\"Delta_Contactor_Pump_2\"),\n    Delta_Contactor_Pump_3: flow.get(\"Delta_Contactor_Pump_3\"),\n    Delta_Contactor_Pump_4: flow.get(\"Delta_Contactor_Pump_4\"),\n    Delta_Contactor_Pump_5: flow.get(\"Delta_Contactor_Pump_5\"),\n    Delta_Contactor_Pump_6: flow.get(\"Delta_Contactor_Pump_6\"),\n    VFD_Run_Spare: flow.get(\"VFD_Run_Spare\"),\n    Output_Speed_1: flow.get(\"Output_Speed_1\"),\n    Output_Speed_2: flow.get(\"Output_Speed_2\"),\n    Output_Speed_3: flow.get(\"Output_Speed_3\"),\n    Output_Speed_4: flow.get(\"Output_Speed_4\"),\n    Output_Speed_5: flow.get(\"Output_Speed_5\"),\n    Output_Speed_6: flow.get(\"Output_Speed_6\")\n} \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "b47f8386cc83ed22",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "d02383e94e219d36",
        "name": "Pressure",
        "func": "let data = msg.payload;\nflow.set(\"Set_Pressure\",10.11);\nflow.set(\"Adaptive_Setting\", 50.55);\nflow.set(\"Actual_Pressure\", 9.35);\nflow.set(\"System_Flow\", 35.11);\nflow.set(\"Suction_Pressure\", 8.34);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "bdb0d662718acdb2",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "d02383e94e219d36",
        "name": "kw & load %",
        "func": "let data = msg.payload;\nflow.set(\"Kw\", 7);\nflow.set(\"Load_Percentage\", 20);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "8f28983014f1a2dc",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "d02383e94e219d36",
        "name": "current, power, out freq",
        "func": "let data = msg.payload;\nflow.set(\"Current_Pump_1\", 80.23);\nflow.set(\"Current_Pump_2\", 50.11);\nflow.set(\"Current_Pump_3\", 90.22);\nflow.set(\"Current_Pump_4\", 30.22);\nflow.set(\"Current_Pump_5\", 10.22);\nflow.set(\"Current_Pump_6\", 10.22);\nflow.set(\"Power_Pump_1\", 60.22);\nflow.set(\"Power_Pump_2\", 70.22);\nflow.set(\"Power_Pump_3\", 40.22);\nflow.set(\"Power_Pump_4\", 25.22);\nflow.set(\"Power_Pump_5\", 20.22);\nflow.set(\"Power_Pump_6\", 15.22);\nflow.set(\"Output_Speed_1\", 24.22);\nflow.set(\"Output_Speed_2\", 48.22);\nflow.set(\"Output_Speed_3\", 42.22);\nflow.set(\"Output_Speed_4\", 53.22);\nflow.set(\"Output_Speed_5\", 25.22);\nflow.set(\"Output_Speed_6\", 20.22);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "9d6fc4a1802e9dc2",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "d02383e94e219d36",
        "name": "run time",
        "func": "let data = msg.payload;\nflow.set(\"Run_Mint_Pump_1\", 20);\nflow.set(\"Run_Mint_Pump_2\", 9);\nflow.set(\"Run_Mint_Pump_3\", 4);\nflow.set(\"Run_Mint_Pump_4\", 1);\nflow.set(\"Run_Mint_Pump_5\", 0);\nflow.set(\"Run_Mint_Pump_6\", 5);\nflow.set(\"Run_Hr_Pump_1\", 10);\nflow.set(\"Run_Hr_Pump_2\", 8);\nflow.set(\"Run_Hr_Pump_3\", 7);\nflow.set(\"Run_Hr_Pump_4\", 3);\nflow.set(\"Run_Hr_Pump_5\", 7);\nflow.set(\"Run_Hr_Pump_6\", 5);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "fda5f5b3436dd186",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "d02383e94e219d36",
        "name": "No. of pumps",
        "func": "let data = msg.payload;\nflow.set(\"Set_No_Of_Pump\", 4);\nflow.set(\"Standby_Pump\", 0);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "532b4f1502309d38",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "d02383e94e219d36",
        "name": "System type",
        "func": "let data = msg.payload;\nflow.set(\"System_Type\", 2);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "e861f8a3cc5d4eb9",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "d02383e94e219d36",
        "name": "Count hr ",
        "func": "let data = msg.payload;\nflow.set(\"Count_Hr_Pump_1\", 3);\nflow.set(\"Count_Hr_Pump_2\", 6);\nflow.set(\"Count_Hr_Pump_3\", 8);\nflow.set(\"Count_Hr_Pump_4\", 1);\nflow.set(\"Count_Hr_Pump_5\", 11);\nflow.set(\"Count_Hr_Pump_6\", 10);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "8ba5753f51c443e3",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "d02383e94e219d36",
        "name": "Alarms 1",
        "func": "let data = msg.payload;\nflow.set(\"Pump_1_Start_Stop_Reach\", 1);\nflow.set(\"Pump_2_Start_Stop_Reach\", 1);\nflow.set(\"Pump_3_Start_Stop_Reach\", 0);\nflow.set(\"Pump_4_Start_Stop_Reach\", 1);\nflow.set(\"Pump_5_Start_Stop_Reach\", 0);\nflow.set(\"Pump_6_Start_Stop_Reach\", 0);\nflow.set(\"Pump_1_Trip\", 1);\nflow.set(\"Pump_2_Trip\", 0);\nflow.set(\"Pump_3_Trip\", 0);\nflow.set(\"Pump_4_Trip\", 1);\nflow.set(\"Pump_5_Trip\", 0);\nflow.set(\"Pump_6_Trip\", 0);\nflow.set(\"High_Pressure\", 0);\nflow.set(\"Low_Pressure\", 0);\nflow.set(\"Service_Interval_Reset\", 0);\nflow.set(\"Sensor_Fail\", 1);\nflow.set(\"Pump_1_Max_Time_Reach\", 0);\nflow.set(\"Pump_2_Max_Time_Reach\", 0);\nflow.set(\"Pump_3_Max_Time_Reach\", 0);\nflow.set(\"Pump_4_Max_Time_Reach\", 1);\nflow.set(\"Pump_5_Max_Time_Reach\", 0);\nflow.set(\"Pump_6_Max_Time_Reach\", 0);\nflow.set(\"Alarm_VFD_Overload\", 0);\nflow.set(\"Dry_Run_Alarm\", 0);\nflow.set(\"High_Pressure_Alarm\", 1);\nflow.set(\"Low_Pressure_Alarm\", 0);\nflow.set(\"Pressure_Sensor_Fail\", 0);\nflow.set(\"Channel_2_Sensor_Fail\", 0);\nflow.set(\"VFD_Dry_Run_Spare\", 0);\nflow.set(\"Chut_Off_Pressure_Reach\", 0);\nflow.set(\"Suction_Pr_Low\", 0);\nflow.set(\"Emergency_Stopped\", 1);\nflow.set(\"VFD_Communication_Fail\", 0);\nflow.set(\"Pump_Service_Expired\", 0);\nflow.set(\"Dry_Run_VFD_1\", 0);\nflow.set(\"Dry_Run_VFD_2\", 0);\nflow.set(\"Dry_Run_VFD_3\", 0);\nflow.set(\"Dry_Run_VFD_4\", 0);\nflow.set(\"Dry_Run_VFD_5\", 0);\nflow.set(\"Dry_Run_VFD_6\", 1);\nflow.set(\"System_Healthy_1\",0);\nflow.set(\"System_Healthy_2\", 0);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "e044818ea809772c",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "d02383e94e219d36",
        "name": "Alarms 2",
        "func": "let data = msg.payload;\nflow.set(\"Buzzer\", 0);\nflow.set(\"Main_Contactor_Pump_1\", 1);\nflow.set(\"Main_Contactor_Pump_2\", 0);\nflow.set(\"Main_Contactor_Pump_3\", 1);\nflow.set(\"Main_Contactor_Pump_4\", 1);\nflow.set(\"Main_Contactor_Pump_5\", 1);\nflow.set(\"Main_Contactor_Pump_6\", 1);\nflow.set(\"Delta_Contactor_Pump_1\", 0);\nflow.set(\"Delta_Contactor_Pump_2\", 1);\nflow.set(\"Delta_Contactor_Pump_3\", 0);\nflow.set(\"Delta_Contactor_Pump_4\", 0);\nflow.set(\"Delta_Contactor_Pump_5\", 0);\nflow.set(\"Delta_Contactor_Pump_6\", 1);\nflow.set(\"VFD_Run_Spare\", 1);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "cdb5b07a2e50b3c1",
        "type": "inject",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "d02383e94e219d36",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 1060,
        "wires": [
            [
                "b47f8386cc83ed22",
                "bdb0d662718acdb2",
                "8f28983014f1a2dc",
                "9d6fc4a1802e9dc2",
                "fda5f5b3436dd186",
                "532b4f1502309d38",
                "e861f8a3cc5d4eb9",
                "8ba5753f51c443e3",
                "e044818ea809772c",
                "5ec19074d2883167",
                "e6ca95a1760b5766"
            ]
        ]
    },
    {
        "id": "4f3115d94159b6ce",
        "type": "debug",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "1be41bfb03a3b383",
        "name": "debug 57",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 960,
        "wires": []
    },
    {
        "id": "97280196434d5618",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "Pump Status",
        "func": "let statusMap = {\n    0: \"TRIP\",\n    1: \"RUNNING\",\n    2: \"OFF\",\n    3: \"UNDER MAINTENANCE\"\n};\n\nlet Status_Pump_1 = statusMap[flow.get(\"Status_Pump_1\")] || \"Unknown\";\nlet Status_Pump_2 = statusMap[flow.get(\"Status_Pump_2\")] || \"Unknown\";\nlet Status_Pump_3 = statusMap[flow.get(\"Status_Pump_3\")] || \"Unknown\";\nlet Status_Pump_4 = statusMap[flow.get(\"Status_Pump_4\")] || \"Unknown\";\nlet Status_Pump_5 = statusMap[flow.get(\"Status_Pump_5\")] || \"Unknown\";\nlet Status_Pump_6 = statusMap[flow.get(\"Status_Pump_6\")] || \"Unknown\";\n\nmsg.payload = {\n    Status_Pump_1: Status_Pump_1,\n    Status_Pump_2: Status_Pump_2,\n    Status_Pump_3: Status_Pump_3,\n    Status_Pump_4: Status_Pump_4,\n    Status_Pump_5: Status_Pump_5,\n    Status_Pump_6: Status_Pump_6\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "f5979ebd6dea2a53",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "System Type",
        "func": "let statusMap = {\n    0: \"KT\",\n    1: \"VT\",\n    2: \"VPT\",\n};\n\nlet System_Type = statusMap[flow.get(\"System_Type\")] || \"Unknown\";\n\nmsg.payload = {\n    System_Type: System_Type,\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "de10c15ca37b5d7d",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "d": true,
        "g": "c5c5d6bbc7362491",
        "name": "Pump 2",
        "func": "msg.payload = {\n    Status_Pump: flow.get(\"Status_Pump_2\"),\n    Current_Pump: flow.get(\"Current_Pump_2\"),\n    Power_Pump: flow.get(\"Power_Pump_2\"),\n    Output_Speed: flow.get(\"Output_Speed_2\"),\n    Run_Pump: flow.get(\"Run_Mint_Pump_2\")+\"hr_\" +flow.get(\"Run_Hr_Pump_2\")+\"min\",\n    // Run_Mint_Pump: flow.get(\"Run_Mint_Pump_2\"),\n    // Run_Hr_Pump: flow.get(\"Run_Hr_Pump_2\"),\n    Count_Hr_Pump: flow.get(\"Count_Hr_Pump_2\"),\n    Pump_Start_Stop_Reach: flow.get(\"Pump_2_Start_Stop_Reach\"),\n    Pump_Trip: flow.get(\"Pump_2_Trip\"),\n    Pump_Max_Time_Reach: flow.get(\"Pump_2_Max_Time_Reach\"),\n    Dry_Run_VFD: flow.get(\"Dry_Run_VFD_2\"),\n    Main_Contactor_Pump: flow.get(\"Main_Contactor_Pump_2\"),\n    Delta_Contactor_Pump: flow.get(\"Delta_Contactor_Pump_2\")\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 3200,
        "wires": [
            [
                "18f9d5949bf75297"
            ]
        ]
    },
    {
        "id": "12b197014b40df29",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "d": true,
        "g": "c5c5d6bbc7362491",
        "name": "Pump 3",
        "func": "msg.payload = {\n    Status_Pump: flow.get(\"Status_Pump_3\"),\n    Current_Pump: flow.get(\"Current_Pump_3\"),\n    Power_Pump: flow.get(\"Power_Pump_3\"),\n    Output_Speed: flow.get(\"Output_Speed_3\"),\n    Run_Pump: flow.get(\"Run_Mint_Pump_3\")+\"hr_\" +flow.get(\"Run_Hr_Pump_3\")+\"min\",\n    // Run_Mint_Pump: flow.get(\"Run_Mint_Pump_3\"),\n    // Run_Hr_Pump: flow.get(\"Run_Hr_Pump_3\"),\n    Count_Hr_Pump: flow.get(\"Count_Hr_Pump_3\"),\n    Pump_Start_Stop_Reach: flow.get(\"Pump_3_Start_Stop_Reach\"),\n    Pump_Trip: flow.get(\"Pump_3_Trip\"),\n    Pump_Max_Time_Reach: flow.get(\"Pump_3_Max_Time_Reach\"),\n    Dry_Run_VFD: flow.get(\"Dry_Run_VFD_3\"),\n    Main_Contactor_Pump: flow.get(\"Main_Contactor_Pump_3\"),\n    Delta_Contactor_Pump: flow.get(\"Delta_Contactor_Pump_3\"),\n} \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 3240,
        "wires": [
            [
                "18f9d5949bf75297"
            ]
        ]
    },
    {
        "id": "124e65a93e8ff8ff",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "d": true,
        "g": "c5c5d6bbc7362491",
        "name": "Pump 4",
        "func": "msg.payload = {\n    Status_Pump: flow.get(\"Status_Pump_4\"),\n    Current_Pump: flow.get(\"Current_Pump_4\"),\n    Power_Pump: flow.get(\"Power_Pump_4\"),\n    Output_Speed: flow.get(\"Output_Speed_4\"),\n    Run_Pump: flow.get(\"Run_Mint_Pump_4\")+\"hr_\" +flow.get(\"Run_Hr_Pump_4\")+\"min\",\n    // Run_Mint_Pump: flow.get(\"Run_Mint_Pump_4\"),\n    // Run_Hr_Pump: flow.get(\"Run_Hr_Pump_4\"),\n    Count_Hr_Pump: flow.get(\"Count_Hr_Pump_4\"),\n    Pump_Start_Stop_Reach: flow.get(\"Pump_4_Start_Stop_Reach\"),\n    Pump_Trip: flow.get(\"Pump_4_Trip\"),\n    Pump_Max_Time_Reach: flow.get(\"Pump_4_Max_Time_Reach\"),\n    Dry_Run_VFD: flow.get(\"Dry_Run_VFD_4\"),\n    Main_Contactor_Pump: flow.get(\"Main_Contactor_Pump_4\"),\n    Delta_Contactor_Pump: flow.get(\"Delta_Contactor_Pump_4\"),\n} \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 3280,
        "wires": [
            [
                "18f9d5949bf75297"
            ]
        ]
    },
    {
        "id": "90de30eb259a99f1",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "d": true,
        "g": "c5c5d6bbc7362491",
        "name": "Pump 5",
        "func": "msg.payload = {\n    Status_Pump: flow.get(\"Status_Pump_5\"),\n    Current_Pump: flow.get(\"Current_Pump_5\"),\n    Power_Pump: flow.get(\"Power_Pump_5\"),\n    Output_Speed: flow.get(\"Output_Speed_5\"),\n    Run_Pump: flow.get(\"Run_Mint_Pump_5\")+\"hr_\" +flow.get(\"Run_Hr_Pump_5\")+\"min\",\n    // Run_Mint_Pump: flow.get(\"Run_Mint_Pump_5\"),\n    // Run_Hr_Pump: flow.get(\"Run_Hr_Pump_5\"),\n    Count_Hr_Pump: flow.get(\"Count_Hr_Pump_5\"),\n    Pump_Start_Stop_Reach: flow.get(\"Pump_5_Start_Stop_Reach\"),\n    Pump_Trip: flow.get(\"Pump_5_Trip\"),\n    Pump_Max_Time_Reach: flow.get(\"Pump_5_Max_Time_Reach\"),\n    Dry_Run_VFD: flow.get(\"Dry_Run_VFD_5\"),\n    Main_Contactor_Pump: flow.get(\"Main_Contactor_Pump_5\"),\n    Delta_Contactor_Pump: flow.get(\"Delta_Contactor_Pump_5\"),\n} \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 3320,
        "wires": [
            [
                "18f9d5949bf75297"
            ]
        ]
    },
    {
        "id": "1635787a014fbcf3",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "d": true,
        "g": "c5c5d6bbc7362491",
        "name": "Pump 6",
        "func": "msg.payload = {\n    Status_Pump: flow.get(\"Status_Pump_6\"),\n    Current_Pump: flow.get(\"Current_Pump_6\"),\n    Power_Pump: flow.get(\"Power_Pump_6\"),\n    Output_Speed: flow.get(\"Output_Speed_6\"),\n    Run_Pump: flow.get(\"Run_Mint_Pump_6\")+\"hr_\" +flow.get(\"Run_Hr_Pump_6\")+\"min\",\n    // Run_Mint_Pump: flow.get(\"Run_Mint_Pump_6\"),\n    // Run_Hr_Pump: flow.get(\"Run_Hr_Pump_6\"),\n    Count_Hr_Pump: flow.get(\"Count_Hr_Pump_6\"),\n    Pump_Start_Stop_Reach: flow.get(\"Pump_6_Start_Stop_Reach\"),\n    Pump_Trip: flow.get(\"Pump_6_Trip\"),\n    Pump_Max_Time_Reach: flow.get(\"Pump_6_Max_Time_Reach\"),\n    Dry_Run_VFD: flow.get(\"Dry_Run_VFD_6\"),\n    Main_Contactor_Pump: flow.get(\"Main_Contactor_Pump_6\"),\n    Delta_Contactor_Pump: flow.get(\"Delta_Contactor_Pump_6\")\n} \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 3360,
        "wires": [
            [
                "18f9d5949bf75297"
            ]
        ]
    },
    {
        "id": "80b8eaccfc0f411f",
        "type": "mqtt out",
        "z": "4fcfb5eb3f2ab4ae",
        "d": true,
        "g": "c5c5d6bbc7362491",
        "name": "",
        "topic": "KSB/Pump1",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5f0410d3f06f7681",
        "x": 690,
        "y": 3160,
        "wires": []
    },
    {
        "id": "36660cbe1d9cb823",
        "type": "mqtt out",
        "z": "4fcfb5eb3f2ab4ae",
        "d": true,
        "g": "c5c5d6bbc7362491",
        "name": "",
        "topic": "KSB/Pump4",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5f0410d3f06f7681",
        "x": 710,
        "y": 3320,
        "wires": []
    },
    {
        "id": "535197766c6e65ad",
        "type": "mqtt out",
        "z": "4fcfb5eb3f2ab4ae",
        "d": true,
        "g": "c5c5d6bbc7362491",
        "name": "",
        "topic": "KSB/Pump3",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5f0410d3f06f7681",
        "x": 670,
        "y": 3240,
        "wires": []
    },
    {
        "id": "cf3ac8a5310e5482",
        "type": "mqtt out",
        "z": "4fcfb5eb3f2ab4ae",
        "d": true,
        "g": "c5c5d6bbc7362491",
        "name": "",
        "topic": "KSB/Pump2",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5f0410d3f06f7681",
        "x": 670,
        "y": 3200,
        "wires": []
    },
    {
        "id": "4093c0203da34418",
        "type": "mqtt out",
        "z": "4fcfb5eb3f2ab4ae",
        "d": true,
        "g": "c5c5d6bbc7362491",
        "name": "",
        "topic": "KSB/Pump6",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5f0410d3f06f7681",
        "x": 710,
        "y": 3420,
        "wires": []
    },
    {
        "id": "f861bd103a5522e3",
        "type": "mqtt out",
        "z": "4fcfb5eb3f2ab4ae",
        "d": true,
        "g": "c5c5d6bbc7362491",
        "name": "",
        "topic": "KSB/Pump5",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5f0410d3f06f7681",
        "x": 810,
        "y": 3380,
        "wires": []
    },
    {
        "id": "96ab568f46edd394",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "d": true,
        "g": "c5c5d6bbc7362491",
        "name": "Pump 1",
        "func": "msg.payload = {\n    Status_Pump: flow.get(\"Status_Pump_1\"),\n    Current_Pump: flow.get(\"Current_Pump_1\"),\n    Power_Pump: flow.get(\"Power_Pump_1\"),\n    Output_Speed: flow.get(\"Output_Speed_1\"),\n    Run_Pump: flow.get(\"Run_Mint_Pump_1\")+\"hr_\" +flow.get(\"Run_Hr_Pump_1\")+\"min\",\n    // Run_Hr_Pump: flow.get(\"Run_Hr_Pump_1\"),\n    Count_Hr_Pump: flow.get(\"Count_Hr_Pump_1\"),\n    Pump_Start_Stop_Reach: flow.get(\"Pump_1_Start_Stop_Reach\"),\n    Pump_Trip: flow.get(\"Pump_1_Trip\"),\n    Pump_Max_Time_Reach: flow.get(\"Pump_1_Max_Time_Reach\"),\n    Dry_Run_VFD: flow.get(\"Dry_Run_VFD_1\"),\n    Main_Contactor_Pump: flow.get(\"Main_Contactor_Pump_1\"),\n    Delta_Contactor_Pump: flow.get(\"Delta_Contactor_Pump_1\")\n} \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 3160,
        "wires": [
            [
                "18f9d5949bf75297"
            ]
        ]
    },
    {
        "id": "d1c9508a556b3280",
        "type": "inject",
        "z": "4fcfb5eb3f2ab4ae",
        "d": true,
        "g": "c5c5d6bbc7362491",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 3280,
        "wires": [
            [
                "96ab568f46edd394",
                "de10c15ca37b5d7d",
                "12b197014b40df29",
                "124e65a93e8ff8ff",
                "90de30eb259a99f1",
                "1635787a014fbcf3",
                "96f2ba61a8b584de",
                "7749ccf11f62e0c7"
            ]
        ]
    },
    {
        "id": "18f9d5949bf75297",
        "type": "debug",
        "z": "4fcfb5eb3f2ab4ae",
        "d": true,
        "g": "c5c5d6bbc7362491",
        "name": "debug 117",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 3280,
        "wires": []
    },
    {
        "id": "96f2ba61a8b584de",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "d": true,
        "g": "c5c5d6bbc7362491",
        "name": "Parameters",
        "func": "let statusMap = {\n    0: \"Trip\",\n    1: \"Running\",\n    2: \"Off\",\n    3: \"Under_Maintenance\"\n};\n\nlet systemTypeMap = {\n    0: \"KT\",\n    1: \"VT\",\n    2: \"VTP\"\n};\nlet Status_Pump_1 = statusMap[flow.get(\"Status_Pump_1\")] || \"Unknown\";\nlet Status_Pump_2 = statusMap[flow.get(\"Status_Pump_2\")] || \"Unknown\";\nlet Status_Pump_3 = statusMap[flow.get(\"Status_Pump_3\")] || \"Unknown\";\nlet Status_Pump_4 = statusMap[flow.get(\"Status_Pump_4\")] || \"Unknown\";\nlet Status_Pump_5 = statusMap[flow.get(\"Status_Pump_5\")] || \"Unknown\";\nlet Status_Pump_6 = statusMap[flow.get(\"Status_Pump_6\")] || \"Unknown\";\nlet System_Type = systemTypeMap[flow.get(\"System_Type\")] || \"Unknown\";\nmsg.payload = {\n    Set_Pressure: flow.get(\"Set_Pressure\"),\n    Adaptive_Setting: flow.get(\"Adaptive_Setting\"),\n    Actual_Pressure: flow.get(\"Actual_Pressure\"),\n    System_Flow: flow.get(\"System_Flow\"),\n    Suction_Pressure: flow.get(\"Suction_Pressure\"),\n    Kw: flow.get(\"Kw\"),\n    Load_Percentage: flow.get(\"Load_Percentage\"),\n    Set_No_Of_Pump: flow.get(\"Set_No_Of_Pump\"),\n    Standby_Pump: flow.get(\"Standby_Pump\"),\n    High_Pressure: flow.get(\"High_Pressure\"),\n    Low_Pressure: flow.get(\"Low_Pressure\"),\n    Service_Interval_Reset: flow.get(\"Service_Interval_Reset\"),\n    Sensor_Fail :flow.get(\"Sensor_Fail\"),\n    Alarm_VFD_Overload: flow.get(\"Alarm_VFD_Overload\"),\n    Dry_Run_Alarm: flow.get(\"Dry_Run_Alarm\"),\n    High_Pressure_Alarm: flow.get(\"High_Pressure_Alarm\"),\n    Low_Pressure_Alarm: flow.get(\"Low_Pressure_Alarm\"),\n    Pressure_Sensor_Fail: flow.get(\"Pressure_Sensor_Fail\"),\n    Channel_2_Sensor_Fail: flow.get(\"Channel_2_Sensor_Fail\"),\n    VFD_Dry_Run_Spare: flow.get(\"VFD_Dry_Run_Spare\"),\n    Chut_Off_Pressure_Reach: flow.get(\"Chut_Off_Pressure_Reach\"),\n    Suction_Pr_Low: flow.get(\"Suction_Pr_Low\"),\n    Emergency_Stopped: flow.get(\"Emergency_Stopped\"),\n    VFD_Communication_Fail: flow.get(\"VFD_Communication_Fail\"),\n    Pump_Service_Expired: flow.get(\"Pump_Service_Expired\"),\n    System_Healthy_1: flow.get(\"System_Healthy_1\"),\n    System_Healthy_2: flow.get(\"System_Healthy_2\"),\n    Buzzer: flow.get(\"Buzzer\"),\n    VFD_Run_Spare: flow.get(\"VFD_Run_Spare\"),\n    Status_Pump_1: Status_Pump_1,\n    Status_Pump_2: Status_Pump_2,\n    Status_Pump_3: Status_Pump_3,\n    Status_Pump_4: Status_Pump_4,\n    Status_Pump_5: Status_Pump_5,\n    Status_Pump_6: Status_Pump_6,\n    System_Type: System_Type\n} \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 3400,
        "wires": [
            [
                "18f9d5949bf75297"
            ]
        ]
    },
    {
        "id": "7d960e0a73597c41",
        "type": "mqtt out",
        "z": "4fcfb5eb3f2ab4ae",
        "d": true,
        "g": "c5c5d6bbc7362491",
        "name": "",
        "topic": "KSB/PumpPara",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5f0410d3f06f7681",
        "x": 820,
        "y": 3480,
        "wires": []
    },
    {
        "id": "7749ccf11f62e0c7",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "d": true,
        "g": "c5c5d6bbc7362491",
        "name": "No. of Pump",
        "func": "let Set_No_Of_Pump = Number(flow.get(\"Set_No_Of_Pump\"));\nlet pumps = {};\n\nfor (let i = 1; i <= 6; i++) {\n    pumps[`pump${i}`] = i <= Set_No_Of_Pump ? 1 : 0;\n}\n\nmsg.payload = pumps;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 3440,
        "wires": [
            [
                "c4f759d4ae2041b3"
            ]
        ]
    },
    {
        "id": "c4f759d4ae2041b3",
        "type": "debug",
        "z": "4fcfb5eb3f2ab4ae",
        "d": true,
        "g": "c5c5d6bbc7362491",
        "name": "debug 119",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 3460,
        "wires": []
    },
    {
        "id": "78f5bb5b906b2a00",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "No. of Pump",
        "func": "let Set_No_Of_Pump = Number(flow.get(\"Set_No_Of_Pump\"));\nlet pumps = {};\n\nfor (let i = 1; i <= 6; i++) {\n    pumps[`pump${i}`] = i <= Set_No_Of_Pump ? 1 : 0;\n}\n\nmsg.payload = pumps;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "6283ef19963039c0",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "f417980e4201f509",
        "name": "function 148",
        "func": "let data = msg.payload;\nflow.set(\"Current_Pump_11\", 25.1);\nflow.set(\"Current_Pump_21\", 58.3);\nflow.set(\"Current_Pump_31\", 72.4);\nflow.set(\"Current_Pump_41\", 80.6);\nflow.set(\"Current_Pump_51\", 57.8);\nflow.set(\"Current_Pump_61\", 28.4);\nflow.set(\"Power_Pump_11\", 62.1);\nflow.set(\"Power_Pump_21\", 28.2);\nflow.set(\"Power_Pump_31\", 40.3);\nflow.set(\"Power_Pump_41\", 26.4);\nflow.set(\"Power_Pump_51\", 79.5);\nflow.set(\"Power_Pump_61\", 80.6);\nflow.set(\"Output_Speed_11\", 24.7);\nflow.set(\"Output_Speed_21\", 48.8);\nflow.set(\"Output_Speed_31\", 42.9);\nflow.set(\"Output_Speed_41\", 53.1);\nflow.set(\"Output_Speed_51\", 25.2);\nflow.set(\"Output_Speed_61\", 20.3);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1580,
        "wires": [
            []
        ]
    },
    {
        "id": "f1faa70bf1f18b22",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "f417980e4201f509",
        "name": "function 149",
        "func": "let data = msg.payload;\nflow.set(\"Set_Pressure1\",11.11);\nflow.set(\"Adaptive_Setting1\", 30.11);\nflow.set(\"Actual_Pressure1\", 22.11);\nflow.set(\"System_Flow1\", 69.20);\nflow.set(\"Suction_Pressure1\", 60.11);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1460,
        "wires": [
            []
        ]
    },
    {
        "id": "9fa91f3a18b746de",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "f417980e4201f509",
        "name": "function 150",
        "func": "// let data = msg.payload;\n// flow.set(\"Status_Pump_11\", 1);\n// flow.set(\"Status_Pump_21\", 0);\n// flow.set(\"Status_Pump_31\", 2);\n// flow.set(\"Status_Pump_41\", 0);\n// flow.set(\"Status_Pump_51\", 3);\n// flow.set(\"Status_Pump_61\", 0);\n// return msg;\nlet Set_No_Of_Pump = Number(flow.get(\"Set_No_Of_Pump1\"));\nlet pumps ={};\n\nfor (let i = 1; i <= 6; i++) {\n    pumps[`pump${i}`] = i <= Set_No_Of_Pump ? 1 : 0;\n}\n\n// Set each pump status individually in flow context\nfor (let i = 1; i <= 6; i++) {\n    flow.set(`pump${i}_1`, pumps[`pump${i}`]);\n}\n\n\nlet pump2 = flow.get(\"pump2_1\")\nlet pump1 = flow.get(\"pump1_1\")\nlet pump3 = flow.get(\"pump3_1\")\nlet pump4 = flow.get(\"pump4_1\")\nlet pump5 = flow.get(\"pump5_1\")\nlet pump6 = flow.get(\"pump6_1\")\n\n\n\nif(pump1 === 1){\n    flow.set(\"Status_Pump_11\", 1);\n\n};\nif (pump1 === 0) {\n    flow.set(\"Status_Pump_11\", 4);\n};\n\n\nif (pump2 === 1) {\n   flow.set(\"Status_Pump_21\", 0);\n\n};\nif (pump2 === 0) {\n    flow.set(\"Status_Pump_21\", 4);\n};\n\n\nif (pump3 === 1) {\n    flow.set(\"Status_Pump_31\", 2);\n  \n    \n};\nif (pump3 === 0) {\n    flow.set(\"Status_Pump_31\", 4);\n};\n\n\nif (pump4 === 1) {\n    flow.set(\"Status_Pump_41\", 0);\n   \n};\nif (pump4 === 0) {\n    flow.set(\"Status_Pump_41\", 4);\n};\n\nif (pump5 === 1) {\n    flow.set(\"Status_Pump_51\", 3);\n    \n   \n\n};\nif (pump5 === 0) {\n    flow.set(\"Status_Pump_51\", 4);\n};\n\n\nif (pump6 === 1) {\n    flow.set(\"Status_Pump_61\", 0);\n};\nif (pump6 === 0) {\n    flow.set(\"Status_Pump_61\", 4);\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1500,
        "wires": [
            []
        ]
    },
    {
        "id": "2c1107898f8f9788",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "f417980e4201f509",
        "name": "function 151",
        "func": "let data = msg.payload;\nflow.set(\"Kw1\", 80.22);\nflow.set(\"Load_Percentage1\", 90);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "9e046dec848af17e",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "f417980e4201f509",
        "name": "function 152",
        "func": "let data = msg.payload;\nflow.set(\"Run_Mint_Pump_11\", 1);\nflow.set(\"Run_Mint_Pump_21\", 2);\nflow.set(\"Run_Mint_Pump_31\", 3);\nflow.set(\"Run_Mint_Pump_41\", 4);\nflow.set(\"Run_Mint_Pump_51\", 5);\nflow.set(\"Run_Mint_Pump_61\", 6);\nflow.set(\"Run_Hr_Pump_11\", 7);\nflow.set(\"Run_Hr_Pump_21\", 8);\nflow.set(\"Run_Hr_Pump_31\", 9);\nflow.set(\"Run_Hr_Pump_41\", 10);\nflow.set(\"Run_Hr_Pump_51\", 11);\nflow.set(\"Run_Hr_Pump_61\", 12);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1620,
        "wires": [
            []
        ]
    },
    {
        "id": "76b1186fe316bfac",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "f417980e4201f509",
        "name": "function 153",
        "func": "let data = msg.payload;\nflow.set(\"Set_No_Of_Pump1\", 6);\nflow.set(\"Standby_Pump1\", 0);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "8c6ba61e7edbf195",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "f417980e4201f509",
        "name": "function 154",
        "func": "let data = msg.payload;\nflow.set(\"System_Type1\", 1);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1700,
        "wires": [
            []
        ]
    },
    {
        "id": "7f084d0dd9278afd",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "f417980e4201f509",
        "name": "function 155",
        "func": "let data = msg.payload;\nflow.set(\"Count_Hr_Pump_11\", 2);\nflow.set(\"Count_Hr_Pump_21\", 3);\nflow.set(\"Count_Hr_Pump_31\", 4);\nflow.set(\"Count_Hr_Pump_41\", 5);\nflow.set(\"Count_Hr_Pump_51\", 6);\nflow.set(\"Count_Hr_Pump_61\", 7);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1740,
        "wires": [
            []
        ]
    },
    {
        "id": "125e4be6794201e5",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "f417980e4201f509",
        "name": "function 156",
        "func": "let data = msg.payload;\nflow.set(\"Pump_1_Start_Stop_Reach1\", 1);\nflow.set(\"Pump_2_Start_Stop_Reach1\", 0);\nflow.set(\"Pump_3_Start_Stop_Reach1\", 0);\nflow.set(\"Pump_4_Start_Stop_Reach1\", 0);\nflow.set(\"Pump_5_Start_Stop_Reach1\", 1);\nflow.set(\"Pump_6_Start_Stop_Reach1\", 1);\nflow.set(\"Pump_1_Trip1\", 1);\nflow.set(\"Pump_2_Trip1\", 1);\nflow.set(\"Pump_3_Trip1\", 0);\nflow.set(\"Pump_4_Trip1\", 1);\nflow.set(\"Pump_5_Trip1\", 0);\nflow.set(\"Pump_6_Trip1\", 1);\nflow.set(\"High_Pressure1\", 1);\nflow.set(\"Low_Pressure1\", 0);\nflow.set(\"Service_Interval_Reset1\", 1);\nflow.set(\"Sensor_Fail1\", 0);\nflow.set(\"Pump_1_Max_Time_Reach1\", 1);\nflow.set(\"Pump_2_Max_Time_Reach1\", 0);\nflow.set(\"Pump_3_Max_Time_Reach1\", 0);\nflow.set(\"Pump_4_Max_Time_Reach1\", 1);\nflow.set(\"Pump_5_Max_Time_Reach1\", 0);\nflow.set(\"Pump_6_Max_Time_Reach1\", 1);\nflow.set(\"Alarm_VFD_Overload1\", 1);\nflow.set(\"Dry_Run_Alarm1\", 0);\nflow.set(\"High_Pressure_Alarm1\", 1);\nflow.set(\"Low_Pressure_Alarm1\", 1);\nflow.set(\"Pressure_Sensor_Fail1\", 1);\nflow.set(\"Channel_2_Sensor_Fail1\", 0);\nflow.set(\"VFD_Dry_Run_Spare1\", 0);\nflow.set(\"Chut_Off_Pressure_Reach1\", 0);\nflow.set(\"Suction_Pr_Low1\", 0);\nflow.set(\"Emergency_Stopped1\", 0);\nflow.set(\"VFD_Communication_Fail1\", 0);\nflow.set(\"Pump_Service_Expired1\", 0);\nflow.set(\"Dry_Run_VFD_11\", 0);\nflow.set(\"Dry_Run_VFD_21\", 1);\nflow.set(\"Dry_Run_VFD_31\", 0);\nflow.set(\"Dry_Run_VFD_41\", 0);\nflow.set(\"Dry_Run_VFD_51\", 1);\nflow.set(\"Dry_Run_VFD_61\", 0);\nflow.set(\"System_Healthy_11\",0);\nflow.set(\"System_Healthy_21\", 0);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1780,
        "wires": [
            []
        ]
    },
    {
        "id": "3e001d861478b5c0",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "f417980e4201f509",
        "name": "function 157",
        "func": "let data = msg.payload;\nflow.set(\"Buzzer\", 0);\nflow.set(\"Main_Contactor_Pump_11\", 0);\nflow.set(\"Main_Contactor_Pump_21\", 1);\nflow.set(\"Main_Contactor_Pump_31\", 0);\nflow.set(\"Main_Contactor_Pump_41\", 0);\nflow.set(\"Main_Contactor_Pump_51\", 0);\nflow.set(\"Main_Contactor_Pump_61\", 0);\nflow.set(\"Delta_Contactor_Pump_11\", 1);\nflow.set(\"Delta_Contactor_Pump_21\", 0);\nflow.set(\"Delta_Contactor_Pump_31\", 0);\nflow.set(\"Delta_Contactor_Pump_41\", 1);\nflow.set(\"Delta_Contactor_Pump_51\", 0);\nflow.set(\"Delta_Contactor_Pump_61\", 0);\nflow.set(\"VFD_Run_Spare1\", 0);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1820,
        "wires": [
            []
        ]
    },
    {
        "id": "8d549d78b34cdbec",
        "type": "inject",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "f417980e4201f509",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 1620,
        "wires": [
            [
                "f1faa70bf1f18b22",
                "9fa91f3a18b746de",
                "2c1107898f8f9788",
                "6283ef19963039c0",
                "9e046dec848af17e",
                "76b1186fe316bfac",
                "8c6ba61e7edbf195",
                "7f084d0dd9278afd",
                "125e4be6794201e5",
                "3e001d861478b5c0",
                "73bf289de370e027"
            ]
        ]
    },
    {
        "id": "062b981dc5c8f391",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "function 158",
        "func": "msg.payload = {\n    Set_Pressure: flow.get(\"Set_Pressure1\"),\n    Adaptive_Setting: flow.get(\"Adaptive_Setting1\"),\n    Actual_Pressure: flow.get(\"Actual_Pressure1\"),\n    System_Flow: flow.get(\"System_Flow1\"),\n    Suction_Pressure: flow.get(\"Suction_Pressure1\"),\n    // Status_Pump_1: flow.get(\"Status_Pump_1\"),\n    // Status_Pump_2: flow.get(\"Status_Pump_2\"),\n    // Status_Pump_3: flow.get(\"Status_Pump_3\"),\n    // Status_Pump_4: flow.get(\"Status_Pump_4\"),\n    // Status_Pump_5: flow.get(\"Status_Pump_5\"),\n    // Status_Pump_6: flow.get(\"Status_Pump_6\"),\n    Kw: flow.get(\"Kw1\"),\n    Load_Percentage: flow.get(\"Load_Percentage1\"),\n    Current_Pump_1: flow.get(\"Current_Pump_11\"),\n    Current_Pump_2: flow.get(\"Current_Pump_21\"),\n    Current_Pump_3: flow.get(\"Current_Pump_31\"),\n    Current_Pump_4: flow.get(\"Current_Pump_41\"),\n    Current_Pump_5: flow.get(\"Current_Pump_51\"),\n    Current_Pump_6: flow.get(\"Current_Pump_61\"),\n    Power_Pump_1: flow.get(\"Power_Pump_11\"),\n    Power_Pump_2: flow.get(\"Power_Pump_21\"),\n    Power_Pump_3: flow.get(\"Power_Pump_31\"),\n    Power_Pump_4: flow.get(\"Power_Pump_41\"),\n    Power_Pump_5: flow.get(\"Power_Pump_51\"),\n    Power_Pump_6: flow.get(\"Power_Pump_61\"),\n    Run_Pump_1: flow.get(\"Run_Mint_Pump_11\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_11\")+\"Min\",\n    Run_Pump_2: flow.get(\"Run_Mint_Pump_21\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_21\")+\"Min\",\n    Run_Pump_3: flow.get(\"Run_Mint_Pump_31\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_31\")+\"Min\",\n    Run_Pump_4: flow.get(\"Run_Mint_Pump_41\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_41\")+\"Min\",\n    Run_Pump_5: flow.get(\"Run_Mint_Pump_51\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_51\")+\"Min\",\n    Run_Pump_6: flow.get(\"Run_Mint_Pump_61\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_61\")+\"Min\",\n    // Run_Mint_Pump_1: flow.get(\"Run_Mint_Pump_1\"),\n    // Run_Mint_Pump_2: flow.get(\"Run_Mint_Pump_2\"),\n    // Run_Mint_Pump_3: flow.get(\"Run_Mint_Pump_3\"),\n    // Run_Mint_Pump_4: flow.get(\"Run_Mint_Pump_4\"),\n    // Run_Mint_Pump_5: flow.get(\"Run_Mint_Pump_5\"),\n    // Run_Mint_Pump_6: flow.get(\"Run_Mint_Pump_6\"),\n    // Run_Hr_Pump_1: flow.get(\"Run_Hr_Pump_1\"),\n    // Run_Hr_Pump_2: flow.get(\"Run_Hr_Pump_2\"),\n    // Run_Hr_Pump_3: flow.get(\"Run_Hr_Pump_3\"),\n    // Run_Hr_Pump_4: flow.get(\"Run_Hr_Pump_4\"),\n    // Run_Hr_Pump_5: flow.get(\"Run_Hr_Pump_5\"),\n    // Run_Hr_Pump_6: flow.get(\"Run_Hr_Pump_6\")\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 1500,
        "wires": [
            []
        ]
    },
    {
        "id": "f480fc709da67e3d",
        "type": "inject",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "964d7c3fb11a2e95",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 590,
        "y": 1540,
        "wires": [
            [
                "5dc20b8e0c7ef1dd"
            ]
        ]
    },
    {
        "id": "24af0ef449b142c4",
        "type": "mqtt out",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "964d7c3fb11a2e95",
        "name": "",
        "topic": "office/KSB/2",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5f0410d3f06f7681",
        "x": 1010,
        "y": 1540,
        "wires": []
    },
    {
        "id": "bf537cc3a85d3094",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "function 159",
        "func": "msg.payload= {\n    Set_No_Of_Pump: flow.get(\"Set_No_Of_Pump1\")+\"+\"+flow.get(\"Standby_Pump1\"),\n    // Standby_Pump: flow.get(\"Standby_Pump\"),\n    // System_Type: flow.get(\"System_Type\"),\n    Count_Hr_Pump_1: flow.get(\"Count_Hr_Pump_11\"),\n    Count_Hr_Pump_2: flow.get(\"Count_Hr_Pump_21\"),\n    Count_Hr_Pump_3: flow.get(\"Count_Hr_Pump_31\"),\n    Count_Hr_Pump_4: flow.get(\"Count_Hr_Pump_41\"),\n    Count_Hr_Pump_5: flow.get(\"Count_Hr_Pump_51\"),\n    Count_Hr_Pump_6: flow.get(\"Count_Hr_Pump_61\"),\n    Pump_1_Start_Stop_Reach: flow.get(\"Pump_1_Start_Stop_Reach1\"),\n    Pump_2_Start_Stop_Reach: flow.get(\"Pump_2_Start_Stop_Reach1\"),\n    Pump_3_Start_Stop_Reach: flow.get(\"Pump_3_Start_Stop_Reach1\"),\n    Pump_4_Start_Stop_Reach: flow.get(\"Pump_4_Start_Stop_Reach1\"),\n    Pump_5_Start_Stop_Reach: flow.get(\"Pump_5_Start_Stop_Reach1\"),\n    Pump_6_Start_Stop_Reach: flow.get(\"Pump_6_Start_Stop_Reach1\"),\n    Pump_1_Trip: flow.get(\"Pump_1_Trip1\"),\n    Pump_2_Trip: flow.get(\"Pump_2_Trip1\"),\n    Pump_3_Trip: flow.get(\"Pump_3_Trip1\"),\n    Pump_4_Trip: flow.get(\"Pump_4_Trip1\"),\n    Pump_5_Trip: flow.get(\"Pump_5_Trip1\"),\n    Pump_6_Trip: flow.get(\"Pump_6_Trip1\"),\n    High_Pressure: flow.get(\"High_Pressure1\"),\n    Low_Pressure: flow.get(\"Low_Pressure1\"),\n    Service_Interval_Reset: flow.get(\"Service_Interval_Reset1\"),\n    Sensor_Fail :flow.get(\"Sensor_Fail1\"),\n    Pump_1_Max_Time_Reach: flow.get(\"Pump_1_Max_Time_Reach1\"),\n    Pump_2_Max_Time_Reach: flow.get(\"Pump_2_Max_Time_Reach1\"),\n    Pump_3_Max_Time_Reach: flow.get(\"Pump_3_Max_Time_Reach1\"),\n    Pump_4_Max_Time_Reach: flow.get(\"Pump_4_Max_Time_Reach1\"),\n    Pump_5_Max_Time_Reach: flow.get(\"Pump_5_Max_Time_Reach1\"),\n    Pump_6_Max_Time_Reach: flow.get(\"Pump_6_Max_Time_Reach1\")\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "9d0fb0ccfd9f10cc",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "function 160",
        "func": "msg.payload = {\n    Alarm_VFD_Overload: flow.get(\"Alarm_VFD_Overload1\"),\n    Dry_Run_Alarm: flow.get(\"Dry_Run_Alarm1\"),\n    High_Pressure_Alarm: flow.get(\"High_Pressure_Alarm1\"),\n    Low_Pressure_Alarm: flow.get(\"Low_Pressure_Alarm1\"),\n    Pressure_Sensor_Fail: flow.get(\"Pressure_Sensor_Fail1\"),\n    Channel_2_Sensor_Fail: flow.get(\"Channel_2_Sensor_Fail1\"),\n    VFD_Dry_Run_Spare: flow.get(\"VFD_Dry_Run_Spare1\"),\n    Chut_Off_Pressure_Reach: flow.get(\"Chut_Off_Pressure_Reach1\"),\n    Suction_Pr_Low: flow.get(\"Suction_Pr_Low1\"),\n    Emergency_Stopped: flow.get(\"Emergency_Stopped1\"),\n    VFD_Communication_Fail: flow.get(\"VFD_Communication_Fail1\"),\n    Pump_Service_Expired: flow.get(\"Pump_Service_Expired1\"),\n    Dry_Run_VFD_1: flow.get(\"Dry_Run_VFD_11\"),\n    Dry_Run_VFD_2: flow.get(\"Dry_Run_VFD_21\"),\n    Dry_Run_VFD_3: flow.get(\"Dry_Run_VFD_31\"),\n    Dry_Run_VFD_4: flow.get(\"Dry_Run_VFD_41\"),\n    Dry_Run_VFD_5: flow.get(\"Dry_Run_VFD_51\"),\n    Dry_Run_VFD_6: flow.get(\"Dry_Run_VFD_61\"),\n    System_Healthy_1: flow.get(\"System_Healthy_11\"),\n    System_Healthy_2: flow.get(\"System_Healthy_21\"),\n    Buzzer: flow.get(\"Buzzer1\"),\n    Main_Contactor_Pump_1: flow.get(\"Main_Contactor_Pump_11\"),\n    Main_Contactor_Pump_2: flow.get(\"Main_Contactor_Pump_21\"),\n    Main_Contactor_Pump_3: flow.get(\"Main_Contactor_Pump_31\"),\n    Main_Contactor_Pump_4: flow.get(\"Main_Contactor_Pump_41\"),\n    Main_Contactor_Pump_5: flow.get(\"Main_Contactor_Pump_51\"),\n    Main_Contactor_Pump_6: flow.get(\"Main_Contactor_Pump_61\"),\n    Delta_Contactor_Pump_1: flow.get(\"Delta_Contactor_Pump_11\"),\n    Delta_Contactor_Pump_2: flow.get(\"Delta_Contactor_Pump_21\"),\n    Delta_Contactor_Pump_3: flow.get(\"Delta_Contactor_Pump_31\"),\n    Delta_Contactor_Pump_4: flow.get(\"Delta_Contactor_Pump_41\"),\n    Delta_Contactor_Pump_5: flow.get(\"Delta_Contactor_Pump_51\"),\n    Delta_Contactor_Pump_6: flow.get(\"Delta_Contactor_Pump_61\"),\n    VFD_Run_Spare: flow.get(\"VFD_Run_Spare1\"),\n    Output_Speed_1: flow.get(\"Output_Speed_11\"),\n    Output_Speed_2: flow.get(\"Output_Speed_21\"),\n    Output_Speed_3: flow.get(\"Output_Speed_31\"),\n    Output_Speed_4: flow.get(\"Output_Speed_41\"),\n    Output_Speed_5: flow.get(\"Output_Speed_51\"),\n    Output_Speed_6: flow.get(\"Output_Speed_61\")\n} \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 1580,
        "wires": [
            []
        ]
    },
    {
        "id": "801c8bb86c0cdad9",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "Pump Status",
        "func": "let statusMap = {\n    0: \"TRIP\",\n    1: \"RUNNING\",\n    2: \"OFF\",\n    3: \"UNDER MAINTENANCE\"\n};\n\nlet Status_Pump_1 = statusMap[flow.get(\"Status_Pump_11\")] || \"Unknown\";\nlet Status_Pump_2 = statusMap[flow.get(\"Status_Pump_21\")] || \"Unknown\";\nlet Status_Pump_3 = statusMap[flow.get(\"Status_Pump_31\")] || \"Unknown\";\nlet Status_Pump_4 = statusMap[flow.get(\"Status_Pump_41\")] || \"Unknown\";\nlet Status_Pump_5 = statusMap[flow.get(\"Status_Pump_51\")] || \"Unknown\";\nlet Status_Pump_6 = statusMap[flow.get(\"Status_Pump_61\")] || \"Unknown\";\n\nmsg.payload = {\n    Status_Pump_1: Status_Pump_1,\n    Status_Pump_2: Status_Pump_2,\n    Status_Pump_3: Status_Pump_3,\n    Status_Pump_4: Status_Pump_4,\n    Status_Pump_5: Status_Pump_5,\n    Status_Pump_6: Status_Pump_6\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 1620,
        "wires": [
            []
        ]
    },
    {
        "id": "3c23cdfb6bad8374",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "System Type",
        "func": "let statusMap = {\n    0: \"KT\",\n    1: \"VT\",\n    2: \"VPT\",\n};\n\nlet System_Type = statusMap[flow.get(\"System_Type1\")] || \"Unknown\";\n\nmsg.payload = {\n    System_Type: System_Type,\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "4ac712fc5252fc9e",
        "type": "debug",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "964d7c3fb11a2e95",
        "name": "debug 121",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 1600,
        "wires": []
    },
    {
        "id": "401e85c6aa4f8c21",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "No. of Pump",
        "func": "let Set_No_Of_Pump = Number(flow.get(\"Set_No_Of_Pump1\"));\nlet pumps = {};\n\nfor (let i = 1; i <= 6; i++) {\n    pumps[`pump${i}`] = i <= Set_No_Of_Pump ? 1 : 0;\n}\n\nmsg.payload = pumps;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 1700,
        "wires": [
            []
        ]
    },
    {
        "id": "dabedf0a8c23a4af",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "410eaebcc7fe632c",
        "name": "function 161",
        "func": "let data = msg.payload;\nflow.set(\"Current_Pump_12\", 80.33);\nflow.set(\"Current_Pump_22\", 50.33);\nflow.set(\"Current_Pump_32\", 90.33);\nflow.set(\"Current_Pump_42\", 30.33);\nflow.set(\"Current_Pump_52\", 10.33);\nflow.set(\"Current_Pump_62\", 20.33);\nflow.set(\"Power_Pump_12\", 60.33);\nflow.set(\"Power_Pump_22\", 70.33);\nflow.set(\"Power_Pump_32\", 40.33);\nflow.set(\"Power_Pump_42\", 25.33);\nflow.set(\"Power_Pump_52\", 20.33);\nflow.set(\"Power_Pump_62\", 15.33);\nflow.set(\"Output_Speed_12\", 24.33);\nflow.set(\"Output_Speed_22\", 48.33);\nflow.set(\"Output_Speed_32\", 42.33);\nflow.set(\"Output_Speed_42\", 53.33);\nflow.set(\"Output_Speed_52\", 25.33);\nflow.set(\"Output_Speed_62\", 20.33);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 2100,
        "wires": [
            []
        ]
    },
    {
        "id": "c4de13be4bd0d885",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "410eaebcc7fe632c",
        "name": "function 162",
        "func": "let data = msg.payload;\nflow.set(\"Set_Pressure2\",20.33);\nflow.set(\"Adaptive_Setting2\", 60.33);\nflow.set(\"Actual_Pressure2\", 9.33);\nflow.set(\"System_Flow2\", 11.35);\nflow.set(\"Suction_Pressure2\", 28.33);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1980,
        "wires": [
            []
        ]
    },
    {
        "id": "2d5592b6aeb0771c",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "410eaebcc7fe632c",
        "name": "function 163",
        "func": "// let data = msg.payload;\n// flow.set(\"Status_Pump_12\", 0);\n// flow.set(\"Status_Pump_22\", 0);\n// flow.set(\"Status_Pump_32\", 1);\n// flow.set(\"Status_Pump_42\", 0);\n// flow.set(\"Status_Pump_52\", 2);\n// flow.set(\"Status_Pump_62\", 3);\n\nlet Set_No_Of_Pump = Number(flow.get(\"Set_No_Of_Pump2\"));\nlet pumps ={};\n\nfor (let i = 1; i <= 6; i++) {\n    pumps[`pump${i}`] = i <= Set_No_Of_Pump ? 1 : 0;\n}\n\n// Set each pump status individually in flow context\nfor (let i = 1; i <= 6; i++) {\n    flow.set(`pump${i}_2`, pumps[`pump${i}`]);\n}\n\nlet pump2 = flow.get(\"pump2_2\")\nlet pump1 = flow.get(\"pump1_2\")\nlet pump3 = flow.get(\"pump3_2\")\nlet pump4 = flow.get(\"pump4_2\")\nlet pump5 = flow.get(\"pump5_2\")\nlet pump6 = flow.get(\"pump6_2\")\n\n\n\nif(pump1 === 1){\nflow.set(\"Status_Pump_12\", 0);\n\n\n};\nif (pump1 === 0) {\n    flow.set(\"Status_Pump_12\", 4);\n};\n\n\nif (pump2 === 1) {\n   flow.set(\"Status_Pump_22\", 0);\n\n\n};\nif (pump2 === 0) {\n    flow.set(\"Status_Pump_22\", 4);\n};\n\n\nif (pump3 === 1) {\n    flow.set(\"Status_Pump_32\", 1);\n\n  \n    \n};\nif (pump3 === 0) {\n    flow.set(\"Status_Pump_32\", 4);\n};\n\n\nif (pump4 === 1) {\n   flow.set(\"Status_Pump_42\", 0);\n\n   \n};\nif (pump4 === 0) {\n    flow.set(\"Status_Pump_42\", 4);\n};\n\nif (pump5 === 1) {\n    flow.set(\"Status_Pump_52\", 2);\n};\nif (pump5 === 0) {\n    flow.set(\"Status_Pump_52\", 4);\n};\n\n\nif (pump6 === 1) {\n    flow.set(\"Status_Pump_62\", 3);\n};\nif (pump6 === 0) {\n    flow.set(\"Status_Pump_62\", 4);\n};\nreturn msg;\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 2020,
        "wires": [
            []
        ]
    },
    {
        "id": "c8ac5d6bc2e573fb",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "410eaebcc7fe632c",
        "name": "function 164",
        "func": "let data = msg.payload;\nflow.set(\"Kw2\", 80.22);\nflow.set(\"Load_Percentage2\", 50);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 2060,
        "wires": [
            []
        ]
    },
    {
        "id": "b6dfb2b8295e507a",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "410eaebcc7fe632c",
        "name": "function 165",
        "func": "let data = msg.payload;\nflow.set(\"Run_Mint_Pump_12\", 20);\nflow.set(\"Run_Mint_Pump_22\", 9);\nflow.set(\"Run_Mint_Pump_32\", 4);\nflow.set(\"Run_Mint_Pump_42\", 1);\nflow.set(\"Run_Mint_Pump_52\", 0);\nflow.set(\"Run_Mint_Pump_62\", 5);\nflow.set(\"Run_Hr_Pump_12\", 10);\nflow.set(\"Run_Hr_Pump_22\", 8);\nflow.set(\"Run_Hr_Pump_32\", 7);\nflow.set(\"Run_Hr_Pump_42\", 3);\nflow.set(\"Run_Hr_Pump_52\", 7);\nflow.set(\"Run_Hr_Pump_62\", 5);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 2140,
        "wires": [
            []
        ]
    },
    {
        "id": "68fdbd31d827c2ee",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "410eaebcc7fe632c",
        "name": "function 166",
        "func": "let data = msg.payload;\nflow.set(\"Set_No_Of_Pump2\", 6);\nflow.set(\"Standby_Pump2\", 0);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 2180,
        "wires": [
            []
        ]
    },
    {
        "id": "a3b93213eab1028b",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "410eaebcc7fe632c",
        "name": "function 167",
        "func": "let data = msg.payload;\nflow.set(\"System_Type2\", 0);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 2220,
        "wires": [
            []
        ]
    },
    {
        "id": "ad9467ae62cebac4",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "410eaebcc7fe632c",
        "name": "function 168",
        "func": "let data = msg.payload;\nflow.set(\"Count_Hr_Pump_12\", 3);\nflow.set(\"Count_Hr_Pump_22\", 6);\nflow.set(\"Count_Hr_Pump_32\", 8);\nflow.set(\"Count_Hr_Pump_42\", 1);\nflow.set(\"Count_Hr_Pump_52\", 11);\nflow.set(\"Count_Hr_Pump_62\", 10);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 2260,
        "wires": [
            []
        ]
    },
    {
        "id": "94511fa99dc2bbd3",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "410eaebcc7fe632c",
        "name": "function 169",
        "func": "let data = msg.payload;\nflow.set(\"Pump_1_Start_Stop_Reach2\", 0);\nflow.set(\"Pump_2_Start_Stop_Reach2\", 1);\nflow.set(\"Pump_3_Start_Stop_Reach2\", 0);\nflow.set(\"Pump_4_Start_Stop_Reach2\", 1);\nflow.set(\"Pump_5_Start_Stop_Reach2\", 0);\nflow.set(\"Pump_6_Start_Stop_Reach2\", 0);\nflow.set(\"Pump_1_Trip2\", 1);\nflow.set(\"Pump_2_Trip2\", 0);\nflow.set(\"Pump_3_Trip2\", 0);\nflow.set(\"Pump_4_Trip2\", 1);\nflow.set(\"Pump_5_Trip2\", 0);\nflow.set(\"Pump_6_Trip2\", 0);\nflow.set(\"High_Pressure2\", 0);\nflow.set(\"Low_Pressure2\", 0);\nflow.set(\"Service_Interval_Reset2\", 0);\nflow.set(\"Sensor_Fail2\", 1);\nflow.set(\"Pump_1_Max_Time_Reach2\", 0);\nflow.set(\"Pump_2_Max_Time_Reach2\", 0);\nflow.set(\"Pump_3_Max_Time_Reach2\", 0);\nflow.set(\"Pump_4_Max_Time_Reach2\", 1);\nflow.set(\"Pump_5_Max_Time_Reach2\", 0);\nflow.set(\"Pump_6_Max_Time_Reach2\", 0);\nflow.set(\"Alarm_VFD_Overload2\", 0);\nflow.set(\"Dry_Run_Alarm2\", 0);\nflow.set(\"High_Pressure_Alarm2\", 1);\nflow.set(\"Low_Pressure_Alarm2\", 0);\nflow.set(\"Pressure_Sensor_Fail2\", 0);\nflow.set(\"Channel_2_Sensor_Fail2\", 0);\nflow.set(\"VFD_Dry_Run_Spare2\", 0);\nflow.set(\"Chut_Off_Pressure_Reach2\", 0);\nflow.set(\"Suction_Pr_Low2\", 0);\nflow.set(\"Emergency_Stopped2\", 1);\nflow.set(\"VFD_Communication_Fail2\", 0);\nflow.set(\"Pump_Service_Expired2\", 0);\nflow.set(\"Dry_Run_VFD_12\", 0);\nflow.set(\"Dry_Run_VFD_22\", 0);\nflow.set(\"Dry_Run_VFD_32\", 0);\nflow.set(\"Dry_Run_VFD_42\", 0);\nflow.set(\"Dry_Run_VFD_52\", 0);\nflow.set(\"Dry_Run_VFD_62\", 1);\nflow.set(\"System_Healthy_12\",0);\nflow.set(\"System_Healthy_22\", 0);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 2300,
        "wires": [
            []
        ]
    },
    {
        "id": "24d895ccb29106e9",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "410eaebcc7fe632c",
        "name": "function 170",
        "func": "let data = msg.payload;\nflow.set(\"Buzzer\", 0);\nflow.set(\"Main_Contactor_Pump_12\", 1);\nflow.set(\"Main_Contactor_Pump_22\", 0);\nflow.set(\"Main_Contactor_Pump_32\", 1);\nflow.set(\"Main_Contactor_Pump_42\", 1);\nflow.set(\"Main_Contactor_Pump_52\", 1);\nflow.set(\"Main_Contactor_Pump_62\", 1);\nflow.set(\"Delta_Contactor_Pump_12\", 0);\nflow.set(\"Delta_Contactor_Pump_22\", 1);\nflow.set(\"Delta_Contactor_Pump_32\", 0);\nflow.set(\"Delta_Contactor_Pump_42\", 0);\nflow.set(\"Delta_Contactor_Pump_52\", 0);\nflow.set(\"Delta_Contactor_Pump_62\", 1);\nflow.set(\"VFD_Run_Spare2\", 1);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 2340,
        "wires": [
            []
        ]
    },
    {
        "id": "594806ec4d1fc5e2",
        "type": "inject",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "410eaebcc7fe632c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 2140,
        "wires": [
            [
                "c4de13be4bd0d885",
                "2d5592b6aeb0771c",
                "c8ac5d6bc2e573fb",
                "dabedf0a8c23a4af",
                "b6dfb2b8295e507a",
                "68fdbd31d827c2ee",
                "a3b93213eab1028b",
                "ad9467ae62cebac4",
                "94511fa99dc2bbd3",
                "24d895ccb29106e9",
                "06bfc371eb21679c"
            ]
        ]
    },
    {
        "id": "b8abc81106355d71",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "function 171",
        "func": "msg.payload = {\n    Set_Pressure: flow.get(\"Set_Pressure2\"),\n    Adaptive_Setting: flow.get(\"Adaptive_Setting2\"),\n    Actual_Pressure: flow.get(\"Actual_Pressure2\"),\n    System_Flow: flow.get(\"System_Flow2\"),\n    Suction_Pressure: flow.get(\"Suction_Pressure2\"),\n    // Status_Pump_1: flow.get(\"Status_Pump_1\"),\n    // Status_Pump_2: flow.get(\"Status_Pump_2\"),\n    // Status_Pump_3: flow.get(\"Status_Pump_3\"),\n    // Status_Pump_4: flow.get(\"Status_Pump_4\"),\n    // Status_Pump_5: flow.get(\"Status_Pump_5\"),\n    // Status_Pump_6: flow.get(\"Status_Pump_6\"),\n    Kw: flow.get(\"Kw2\"),\n    Load_Percentage: flow.get(\"Load_Percentage2\"),\n    Current_Pump_1: flow.get(\"Current_Pump_12\"),\n    Current_Pump_2: flow.get(\"Current_Pump_22\"),\n    Current_Pump_3: flow.get(\"Current_Pump_32\"),\n    Current_Pump_4: flow.get(\"Current_Pump_42\"),\n    Current_Pump_5: flow.get(\"Current_Pump_52\"),\n    Current_Pump_6: flow.get(\"Current_Pump_62\"),\n    Power_Pump_1: flow.get(\"Power_Pump_12\"),\n    Power_Pump_2: flow.get(\"Power_Pump_22\"),\n    Power_Pump_3: flow.get(\"Power_Pump_32\"),\n    Power_Pump_4: flow.get(\"Power_Pump_42\"),\n    Power_Pump_5: flow.get(\"Power_Pump_52\"),\n    Power_Pump_6: flow.get(\"Power_Pump_62\"),\n    Run_Pump_1: flow.get(\"Run_Mint_Pump_12\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_12\")+\"Min\",\n    Run_Pump_2: flow.get(\"Run_Mint_Pump_22\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_22\")+\"Min\",\n    Run_Pump_3: flow.get(\"Run_Mint_Pump_32\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_32\")+\"Min\",\n    Run_Pump_4: flow.get(\"Run_Mint_Pump_42\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_42\")+\"Min\",\n    Run_Pump_5: flow.get(\"Run_Mint_Pump_52\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_52\")+\"Min\",\n    Run_Pump_6: flow.get(\"Run_Mint_Pump_62\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_62\")+\"Min\",\n    // Run_Mint_Pump_1: flow.get(\"Run_Mint_Pump_1\"),\n    // Run_Mint_Pump_2: flow.get(\"Run_Mint_Pump_2\"),\n    // Run_Mint_Pump_3: flow.get(\"Run_Mint_Pump_3\"),\n    // Run_Mint_Pump_4: flow.get(\"Run_Mint_Pump_4\"),\n    // Run_Mint_Pump_5: flow.get(\"Run_Mint_Pump_5\"),\n    // Run_Mint_Pump_6: flow.get(\"Run_Mint_Pump_6\"),\n    // Run_Hr_Pump_1: flow.get(\"Run_Hr_Pump_1\"),\n    // Run_Hr_Pump_2: flow.get(\"Run_Hr_Pump_2\"),\n    // Run_Hr_Pump_3: flow.get(\"Run_Hr_Pump_3\"),\n    // Run_Hr_Pump_4: flow.get(\"Run_Hr_Pump_4\"),\n    // Run_Hr_Pump_5: flow.get(\"Run_Hr_Pump_5\"),\n    // Run_Hr_Pump_6: flow.get(\"Run_Hr_Pump_6\")\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 2040,
        "wires": [
            []
        ]
    },
    {
        "id": "1f454f2dcef6011a",
        "type": "inject",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "d675fac31ae93fea",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 590,
        "y": 2060,
        "wires": [
            [
                "401cca24edf1a9d8"
            ]
        ]
    },
    {
        "id": "a5ded0533818dd82",
        "type": "mqtt out",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "d675fac31ae93fea",
        "name": "",
        "topic": "office/KSB/3",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5f0410d3f06f7681",
        "x": 990,
        "y": 2060,
        "wires": []
    },
    {
        "id": "350b3f998ec197bd",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "function 172",
        "func": "msg.payload= {\n    Set_No_Of_Pump: flow.get(\"Set_No_Of_Pump2\")+\"+\"+flow.get(\"Standby_Pump2\"),\n    // Standby_Pump: flow.get(\"Standby_Pump\"),\n    // System_Type: flow.get(\"System_Type\"),\n    Count_Hr_Pump_1: flow.get(\"Count_Hr_Pump_12\"),\n    Count_Hr_Pump_2: flow.get(\"Count_Hr_Pump_22\"),\n    Count_Hr_Pump_3: flow.get(\"Count_Hr_Pump_32\"),\n    Count_Hr_Pump_4: flow.get(\"Count_Hr_Pump_42\"),\n    Count_Hr_Pump_5: flow.get(\"Count_Hr_Pump_52\"),\n    Count_Hr_Pump_6: flow.get(\"Count_Hr_Pump_62\"),\n    Pump_1_Start_Stop_Reach: flow.get(\"Pump_1_Start_Stop_Reach2\"),\n    Pump_2_Start_Stop_Reach: flow.get(\"Pump_2_Start_Stop_Reach2\"),\n    Pump_3_Start_Stop_Reach: flow.get(\"Pump_3_Start_Stop_Reach2\"),\n    Pump_4_Start_Stop_Reach: flow.get(\"Pump_4_Start_Stop_Reach2\"),\n    Pump_5_Start_Stop_Reach: flow.get(\"Pump_5_Start_Stop_Reach2\"),\n    Pump_6_Start_Stop_Reach: flow.get(\"Pump_6_Start_Stop_Reach2\"),\n    Pump_1_Trip: flow.get(\"Pump_1_Trip2\"),\n    Pump_2_Trip: flow.get(\"Pump_2_Trip2\"),\n    Pump_3_Trip: flow.get(\"Pump_3_Trip2\"),\n    Pump_4_Trip: flow.get(\"Pump_4_Trip2\"),\n    Pump_5_Trip: flow.get(\"Pump_5_Trip2\"),\n    Pump_6_Trip: flow.get(\"Pump_6_Trip2\"),\n    High_Pressure: flow.get(\"High_Pressure2\"),\n    Low_Pressure: flow.get(\"Low_Pressure2\"),\n    Service_Interval_Reset: flow.get(\"Service_Interval_Reset2\"),\n    Sensor_Fail :flow.get(\"Sensor_Fail2\"),\n    Pump_1_Max_Time_Reach: flow.get(\"Pump_1_Max_Time_Reach2\"),\n    Pump_2_Max_Time_Reach: flow.get(\"Pump_2_Max_Time_Reach2\"),\n    Pump_3_Max_Time_Reach: flow.get(\"Pump_3_Max_Time_Reach2\"),\n    Pump_4_Max_Time_Reach: flow.get(\"Pump_4_Max_Time_Reach2\"),\n    Pump_5_Max_Time_Reach: flow.get(\"Pump_5_Max_Time_Reach2\"),\n    Pump_6_Max_Time_Reach: flow.get(\"Pump_6_Max_Time_Reach2\")\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 2080,
        "wires": [
            []
        ]
    },
    {
        "id": "d12b823f767363ba",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "function 173",
        "func": "msg.payload = {\n    Alarm_VFD_Overload: flow.get(\"Alarm_VFD_Overload2\"),\n    Dry_Run_Alarm: flow.get(\"Dry_Run_Alarm2\"),\n    High_Pressure_Alarm: flow.get(\"High_Pressure_Alarm2\"),\n    Low_Pressure_Alarm: flow.get(\"Low_Pressure_Alarm2\"),\n    Pressure_Sensor_Fail: flow.get(\"Pressure_Sensor_Fail2\"),\n    Channel_2_Sensor_Fail: flow.get(\"Channel_2_Sensor_Fail2\"),\n    VFD_Dry_Run_Spare: flow.get(\"VFD_Dry_Run_Spare2\"),\n    Chut_Off_Pressure_Reach: flow.get(\"Chut_Off_Pressure_Reach2\"),\n    Suction_Pr_Low: flow.get(\"Suction_Pr_Low2\"),\n    Emergency_Stopped: flow.get(\"Emergency_Stopped2\"),\n    VFD_Communication_Fail: flow.get(\"VFD_Communication_Fail2\"),\n    Pump_Service_Expired: flow.get(\"Pump_Service_Expired2\"),\n    Dry_Run_VFD_1: flow.get(\"Dry_Run_VFD_12\"),\n    Dry_Run_VFD_2: flow.get(\"Dry_Run_VFD_22\"),\n    Dry_Run_VFD_3: flow.get(\"Dry_Run_VFD_32\"),\n    Dry_Run_VFD_4: flow.get(\"Dry_Run_VFD_42\"),\n    Dry_Run_VFD_5: flow.get(\"Dry_Run_VFD_52\"),\n    Dry_Run_VFD_6: flow.get(\"Dry_Run_VFD_62\"),\n    System_Healthy_1: flow.get(\"System_Healthy_12\"),\n    System_Healthy_2: flow.get(\"System_Healthy_22\"),\n    Buzzer: flow.get(\"Buzzer2\"),\n    Main_Contactor_Pump_1: flow.get(\"Main_Contactor_Pump_12\"),\n    Main_Contactor_Pump_2: flow.get(\"Main_Contactor_Pump_22\"),\n    Main_Contactor_Pump_3: flow.get(\"Main_Contactor_Pump_32\"),\n    Main_Contactor_Pump_4: flow.get(\"Main_Contactor_Pump_42\"),\n    Main_Contactor_Pump_5: flow.get(\"Main_Contactor_Pump_52\"),\n    Main_Contactor_Pump_6: flow.get(\"Main_Contactor_Pump_62\"),\n    Delta_Contactor_Pump_1: flow.get(\"Delta_Contactor_Pump_12\"),\n    Delta_Contactor_Pump_2: flow.get(\"Delta_Contactor_Pump_22\"),\n    Delta_Contactor_Pump_3: flow.get(\"Delta_Contactor_Pump_32\"),\n    Delta_Contactor_Pump_4: flow.get(\"Delta_Contactor_Pump_42\"),\n    Delta_Contactor_Pump_5: flow.get(\"Delta_Contactor_Pump_52\"),\n    Delta_Contactor_Pump_6: flow.get(\"Delta_Contactor_Pump_62\"),\n    VFD_Run_Spare: flow.get(\"VFD_Run_Spare2\"),\n    Output_Speed_1: flow.get(\"Output_Speed_12\"),\n    Output_Speed_2: flow.get(\"Output_Speed_22\"),\n    Output_Speed_3: flow.get(\"Output_Speed_32\"),\n    Output_Speed_4: flow.get(\"Output_Speed_42\"),\n    Output_Speed_5: flow.get(\"Output_Speed_52\"),\n    Output_Speed_6: flow.get(\"Output_Speed_62\")\n} \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 2120,
        "wires": [
            []
        ]
    },
    {
        "id": "a9c6958c9982658b",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "Pump Status",
        "func": "let statusMap = {\n    0: \"TRIP\",\n    1: \"RUNNING\",\n    2: \"OFF\",\n    3: \"UNDER MAINTENANCE\"\n};\n\nlet Status_Pump_1 = statusMap[flow.get(\"Status_Pump_12\")] || \"Unknown\";\nlet Status_Pump_2 = statusMap[flow.get(\"Status_Pump_22\")] || \"Unknown\";\nlet Status_Pump_3 = statusMap[flow.get(\"Status_Pump_32\")] || \"Unknown\";\nlet Status_Pump_4 = statusMap[flow.get(\"Status_Pump_42\")] || \"Unknown\";\nlet Status_Pump_5 = statusMap[flow.get(\"Status_Pump_52\")] || \"Unknown\";\nlet Status_Pump_6 = statusMap[flow.get(\"Status_Pump_6\")] || \"Unknown\";\n\nmsg.payload = {\n    Status_Pump_1: Status_Pump_1,\n    Status_Pump_2: Status_Pump_2,\n    Status_Pump_3: Status_Pump_3,\n    Status_Pump_4: Status_Pump_4,\n    Status_Pump_5: Status_Pump_5,\n    Status_Pump_6: Status_Pump_6\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 2160,
        "wires": [
            []
        ]
    },
    {
        "id": "236608c702ab58cd",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "System Type",
        "func": "let statusMap = {\n    0: \"KT\",\n    1: \"VT\",\n    2: \"VPT\",\n};\n\nlet System_Type = statusMap[flow.get(\"System_Type2\")] || \"Unknown\";\n\nmsg.payload = {\n    System_Type: System_Type,\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 2200,
        "wires": [
            []
        ]
    },
    {
        "id": "c423e9f4936733a6",
        "type": "debug",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "d675fac31ae93fea",
        "name": "debug 122",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 2120,
        "wires": []
    },
    {
        "id": "73aa9b7cecc22073",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "No. of Pump",
        "func": "let Set_No_Of_Pump = Number(flow.get(\"Set_No_Of_Pump2\"));\nlet pumps = {};\n\nfor (let i = 1; i <= 6; i++) {\n    pumps[`pump${i}`] = i <= Set_No_Of_Pump ? 1 : 0;\n}\n\nmsg.payload = pumps;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 2240,
        "wires": [
            []
        ]
    },
    {
        "id": "afc3cab9c81b73a7",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "9687b13c30b407e1",
        "name": "function 174",
        "func": "let data = msg.payload;\nflow.set(\"Current_Pump_13\", 80.44);\nflow.set(\"Current_Pump_23\", 50.44);\nflow.set(\"Current_Pump_33\", 90.44);\nflow.set(\"Current_Pump_43\", 30.44);\nflow.set(\"Current_Pump_53\", 10.44);\nflow.set(\"Current_Pump_63\", 10.44);\nflow.set(\"Power_Pump_13\", 60.44);\nflow.set(\"Power_Pump_23\", 70.44);\nflow.set(\"Power_Pump_33\", 40.44);\nflow.set(\"Power_Pump_43\", 25.44);\nflow.set(\"Power_Pump_53\", 20.44);\nflow.set(\"Power_Pump_63\", 15.44);\nflow.set(\"Output_Speed_13\", 24.44);\nflow.set(\"Output_Speed_23\", 48.44);\nflow.set(\"Output_Speed_33\", 42.44);\nflow.set(\"Output_Speed_43\", 53.44);\nflow.set(\"Output_Speed_53\", 25.44);\nflow.set(\"Output_Speed_63\", 20.44);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 2640,
        "wires": [
            []
        ]
    },
    {
        "id": "52e247f56bb2abd9",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "9687b13c30b407e1",
        "name": "function 175",
        "func": "let data = msg.payload;\nflow.set(\"Set_Pressure3\",10.44);\nflow.set(\"Adaptive_Setting3\", 50.44);\nflow.set(\"Actual_Pressure3\", 8.44);\nflow.set(\"System_Flow3\", 35.11);\nflow.set(\"Suction_Pressure3\", 90.44);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 2520,
        "wires": [
            []
        ]
    },
    {
        "id": "757176de3140a7a3",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "9687b13c30b407e1",
        "name": "function 176",
        "func": "// let data = msg.payload;\n// flow.set(\"Status_Pump_13\", 1);\n// flow.set(\"Status_Pump_23\", 2);\n// flow.set(\"Status_Pump_33\", 0);\n// flow.set(\"Status_Pump_43\", 3);\n// flow.set(\"Status_Pump_53\", 2);\n// flow.set(\"Status_Pump_63\", 1);\n// return msg;\n\n\nlet Set_No_Of_Pump = Number(flow.get(\"Set_No_Of_Pump3\"));\nlet pumps ={};\n\nfor (let i = 1; i <= 6; i++) {\n    pumps[`pump${i}`] = i <= Set_No_Of_Pump ? 1 : 0;\n}\n\n// Set each pump status individually in flow context\nfor (let i = 1; i <= 6; i++) {\n    flow.set(`pump${i}_3`, pumps[`pump${i}`]);\n}\n\nlet pump2 = flow.get(\"pump2_3\")\nlet pump1 = flow.get(\"pump1_3\")\nlet pump3 = flow.get(\"pump3_3\")\nlet pump4 = flow.get(\"pump4_3\")\nlet pump5 = flow.get(\"pump5_3\")\nlet pump6 = flow.get(\"pump6_3\")\n\n\n\nif(pump1 === 1){\nflow.set(\"Status_Pump_13\", 1);\n\n\n\n};\nif (pump1 === 0) {\n    flow.set(\"Status_Pump_13\", 4);\n};\n\n\nif (pump2 === 1) {\n    flow.set(\"Status_Pump_23\", 2);\n   \n\n\n};\nif (pump2 === 0) {\n    flow.set(\"Status_Pump_23\", 4);\n};\n\n\nif (pump3 === 1) {\n    flow.set(\"Status_Pump_33\", 0);\n   \n\n  \n    \n};\nif (pump3 === 0) {\n    flow.set(\"Status_Pump_33\", 4);\n};\n\n\nif (pump4 === 1) {\n    flow.set(\"Status_Pump_43\", 3);\n  \n\n   \n};\nif (pump4 === 0) {\n    flow.set(\"Status_Pump_43\", 4);\n};\n\nif (pump5 === 1) {\n    flow.set(\"Status_Pump_53\", 2);\n    \n};\nif (pump5 === 0) {\n    flow.set(\"Status_Pump_53\", 4);\n};\n\n\nif (pump6 === 1) {\n    flow.set(\"Status_Pump_63\", 1);\n};\nif (pump6 === 0) {\n    flow.set(\"Status_Pump_63\", 4);\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 2560,
        "wires": [
            []
        ]
    },
    {
        "id": "c796e0ca830b65b3",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "9687b13c30b407e1",
        "name": "function 177",
        "func": "let data = msg.payload;\nflow.set(\"Kw3\", 80.44);\nflow.set(\"Load_Percentage3\", 20);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 2600,
        "wires": [
            []
        ]
    },
    {
        "id": "fe7bbcf8ba3a65f0",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "9687b13c30b407e1",
        "name": "function 178",
        "func": "let data = msg.payload;\nflow.set(\"Run_Mint_Pump_13\", 20);\nflow.set(\"Run_Mint_Pump_23\", 9);\nflow.set(\"Run_Mint_Pump_33\", 4);\nflow.set(\"Run_Mint_Pump_43\", 1);\nflow.set(\"Run_Mint_Pump_53\", 0);\nflow.set(\"Run_Mint_Pump_63\", 5);\nflow.set(\"Run_Hr_Pump_13\", 10);\nflow.set(\"Run_Hr_Pump_23\", 8);\nflow.set(\"Run_Hr_Pump_33\", 7);\nflow.set(\"Run_Hr_Pump_43\", 3);\nflow.set(\"Run_Hr_Pump_53\", 7);\nflow.set(\"Run_Hr_Pump_63\", 5);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 2680,
        "wires": [
            []
        ]
    },
    {
        "id": "6350608441faef53",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "9687b13c30b407e1",
        "name": "function 179",
        "func": "let data = msg.payload;\nflow.set(\"Set_No_Of_Pump3\", 6);\nflow.set(\"Standby_Pump3\", 1);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 2720,
        "wires": [
            []
        ]
    },
    {
        "id": "928dd49137398212",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "9687b13c30b407e1",
        "name": "function 180",
        "func": "let data = msg.payload;\nflow.set(\"System_Type3\", 2);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 2760,
        "wires": [
            []
        ]
    },
    {
        "id": "da9f71b3e9e7d689",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "9687b13c30b407e1",
        "name": "function 181",
        "func": "let data = msg.payload;\nflow.set(\"Count_Hr_Pump_13\", 3);\nflow.set(\"Count_Hr_Pump_23\", 6);\nflow.set(\"Count_Hr_Pump_33\", 8);\nflow.set(\"Count_Hr_Pump_43\", 1);\nflow.set(\"Count_Hr_Pump_53\", 11);\nflow.set(\"Count_Hr_Pump_63\", 10);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 2800,
        "wires": [
            []
        ]
    },
    {
        "id": "c97605570775976a",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "9687b13c30b407e1",
        "name": "function 182",
        "func": "let data = msg.payload;\nflow.set(\"Pump_1_Start_Stop_Reach3\", 0);\nflow.set(\"Pump_2_Start_Stop_Reach3\", 1);\nflow.set(\"Pump_3_Start_Stop_Reach3\", 0);\nflow.set(\"Pump_4_Start_Stop_Reach3\", 1);\nflow.set(\"Pump_5_Start_Stop_Reach3\", 0);\nflow.set(\"Pump_6_Start_Stop_Reach3\", 0);\nflow.set(\"Pump_1_Trip3\", 1);\nflow.set(\"Pump_2_Trip3\", 0);\nflow.set(\"Pump_3_Trip3\", 0);\nflow.set(\"Pump_4_Trip3\", 1);\nflow.set(\"Pump_5_Trip3\", 0);\nflow.set(\"Pump_6_Trip3\", 0);\nflow.set(\"High_Pressure3\", 0);\nflow.set(\"Low_Pressure3\", 0);\nflow.set(\"Service_Interval_Reset3\", 0);\nflow.set(\"Sensor_Fail3\", 1);\nflow.set(\"Pump_1_Max_Time_Reach3\", 0);\nflow.set(\"Pump_2_Max_Time_Reach3\", 0);\nflow.set(\"Pump_3_Max_Time_Reach3\", 0);\nflow.set(\"Pump_4_Max_Time_Reach3\", 1);\nflow.set(\"Pump_5_Max_Time_Reach3\", 0);\nflow.set(\"Pump_6_Max_Time_Reach3\", 0);\nflow.set(\"Alarm_VFD_Overload3\", 0);\nflow.set(\"Dry_Run_Alarm3\", 0);\nflow.set(\"High_Pressure_Alarm3\", 1);\nflow.set(\"Low_Pressure_Alarm3\", 0);\nflow.set(\"Pressure_Sensor_Fail3\", 0);\nflow.set(\"Channel_2_Sensor_Fail3\", 0);\nflow.set(\"VFD_Dry_Run_Spare3\", 0);\nflow.set(\"Chut_Off_Pressure_Reach3\", 0);\nflow.set(\"Suction_Pr_Low3\", 0);\nflow.set(\"Emergency_Stopped3\", 1);\nflow.set(\"VFD_Communication_Fail3\", 0);\nflow.set(\"Pump_Service_Expired3\", 0);\nflow.set(\"Dry_Run_VFD_13\", 0);\nflow.set(\"Dry_Run_VFD_23\", 0);\nflow.set(\"Dry_Run_VFD_33\", 0);\nflow.set(\"Dry_Run_VFD_43\", 0);\nflow.set(\"Dry_Run_VFD_53\", 0);\nflow.set(\"Dry_Run_VFD_63\", 1);\nflow.set(\"System_Healthy_13\",0);\nflow.set(\"System_Healthy_23\", 0);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 2840,
        "wires": [
            []
        ]
    },
    {
        "id": "ce1d041a42f33ed2",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "9687b13c30b407e1",
        "name": "function 183",
        "func": "let data = msg.payload;\nflow.set(\"Buzzer3\", 0);\nflow.set(\"Main_Contactor_Pump_13\", 1);\nflow.set(\"Main_Contactor_Pump_23\", 0);\nflow.set(\"Main_Contactor_Pump_33\", 1);\nflow.set(\"Main_Contactor_Pump_43\", 1);\nflow.set(\"Main_Contactor_Pump_53\", 1);\nflow.set(\"Main_Contactor_Pump_63\", 1);\nflow.set(\"Delta_Contactor_Pump_13\", 0);\nflow.set(\"Delta_Contactor_Pump_23\", 1);\nflow.set(\"Delta_Contactor_Pump_33\", 0);\nflow.set(\"Delta_Contactor_Pump_43\", 0);\nflow.set(\"Delta_Contactor_Pump_53\", 0);\nflow.set(\"Delta_Contactor_Pump_63\", 1);\nflow.set(\"VFD_Run_Spare3\", 1);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 2880,
        "wires": [
            []
        ]
    },
    {
        "id": "a24e07ec5f65fdce",
        "type": "inject",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "9687b13c30b407e1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 2680,
        "wires": [
            [
                "52e247f56bb2abd9",
                "757176de3140a7a3",
                "c796e0ca830b65b3",
                "afc3cab9c81b73a7",
                "fe7bbcf8ba3a65f0",
                "6350608441faef53",
                "928dd49137398212",
                "da9f71b3e9e7d689",
                "c97605570775976a",
                "ce1d041a42f33ed2",
                "8502cb83a777cd54"
            ]
        ]
    },
    {
        "id": "3f930ca25898af7a",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "function 184",
        "func": "msg.payload = {\n    Set_Pressure: flow.get(\"Set_Pressure4\"),\n    Adaptive_Setting: flow.get(\"Adaptive_Setting4\"),\n    Actual_Pressure: flow.get(\"Actual_Pressure4\"),\n    System_Flow: flow.get(\"System_Flow4\"),\n    Suction_Pressure: flow.get(\"Suction_Pressure4\"),\n    // Status_Pump_1: flow.get(\"Status_Pump_1\"),\n    // Status_Pump_2: flow.get(\"Status_Pump_2\"),\n    // Status_Pump_3: flow.get(\"Status_Pump_3\"),\n    // Status_Pump_4: flow.get(\"Status_Pump_4\"),\n    // Status_Pump_5: flow.get(\"Status_Pump_5\"),\n    // Status_Pump_6: flow.get(\"Status_Pump_6\"),\n    Kw: flow.get(\"Kw4\"),\n    Load_Percentage: flow.get(\"Load_Percentage4\"),\n    Current_Pump_1: flow.get(\"Current_Pump_14\"),\n    Current_Pump_2: flow.get(\"Current_Pump_24\"),\n    Current_Pump_3: flow.get(\"Current_Pump_34\"),\n    Current_Pump_4: flow.get(\"Current_Pump_44\"),\n    Current_Pump_5: flow.get(\"Current_Pump_54\"),\n    Current_Pump_6: flow.get(\"Current_Pump_64\"),\n    Power_Pump_1: flow.get(\"Power_Pump_14\"),\n    Power_Pump_2: flow.get(\"Power_Pump_24\"),\n    Power_Pump_3: flow.get(\"Power_Pump_34\"),\n    Power_Pump_4: flow.get(\"Power_Pump_44\"),\n    Power_Pump_5: flow.get(\"Power_Pump_54\"),\n    Power_Pump_6: flow.get(\"Power_Pump_64\"),\n    Run_Pump_1: flow.get(\"Run_Mint_Pump_14\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_14\")+\"Min\",\n    Run_Pump_2: flow.get(\"Run_Mint_Pump_24\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_24\")+\"Min\",\n    Run_Pump_3: flow.get(\"Run_Mint_Pump_34\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_34\")+\"Min\",\n    Run_Pump_4: flow.get(\"Run_Mint_Pump_44\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_44\")+\"Min\",\n    Run_Pump_5: flow.get(\"Run_Mint_Pump_54\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_54\")+\"Min\",\n    Run_Pump_6: flow.get(\"Run_Mint_Pump_64\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_64\")+\"Min\",\n    // Run_Mint_Pump_1: flow.get(\"Run_Mint_Pump_1\"),\n    // Run_Mint_Pump_2: flow.get(\"Run_Mint_Pump_2\"),\n    // Run_Mint_Pump_3: flow.get(\"Run_Mint_Pump_3\"),\n    // Run_Mint_Pump_4: flow.get(\"Run_Mint_Pump_4\"),\n    // Run_Mint_Pump_5: flow.get(\"Run_Mint_Pump_5\"),\n    // Run_Mint_Pump_6: flow.get(\"Run_Mint_Pump_6\"),\n    // Run_Hr_Pump_1: flow.get(\"Run_Hr_Pump_1\"),\n    // Run_Hr_Pump_2: flow.get(\"Run_Hr_Pump_2\"),\n    // Run_Hr_Pump_3: flow.get(\"Run_Hr_Pump_3\"),\n    // Run_Hr_Pump_4: flow.get(\"Run_Hr_Pump_4\"),\n    // Run_Hr_Pump_5: flow.get(\"Run_Hr_Pump_5\"),\n    // Run_Hr_Pump_6: flow.get(\"Run_Hr_Pump_6\")\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 2560,
        "wires": [
            []
        ]
    },
    {
        "id": "bfd7d2470f0ba57b",
        "type": "inject",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "b3408edc82270c86",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 570,
        "y": 2600,
        "wires": [
            [
                "c06a3f8be61d19c1"
            ]
        ]
    },
    {
        "id": "fcf13b8ade4f9662",
        "type": "mqtt out",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "b3408edc82270c86",
        "name": "",
        "topic": "office/KSB/4",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5f0410d3f06f7681",
        "x": 990,
        "y": 2600,
        "wires": []
    },
    {
        "id": "d9a7ecebe4f633ef",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "function 185",
        "func": "msg.payload= {\n    Set_No_Of_Pump: flow.get(\"Set_No_Of_Pump4\")+\"+\"+flow.get(\"Standby_Pump4\"),\n    // Standby_Pump: flow.get(\"Standby_Pump\"),\n    // System_Type: flow.get(\"System_Type\"),\n    Count_Hr_Pump_1: flow.get(\"Count_Hr_Pump_14\"),\n    Count_Hr_Pump_2: flow.get(\"Count_Hr_Pump_24\"),\n    Count_Hr_Pump_3: flow.get(\"Count_Hr_Pump_34\"),\n    Count_Hr_Pump_4: flow.get(\"Count_Hr_Pump_44\"),\n    Count_Hr_Pump_5: flow.get(\"Count_Hr_Pump_54\"),\n    Count_Hr_Pump_6: flow.get(\"Count_Hr_Pump_64\"),\n    Pump_1_Start_Stop_Reach: flow.get(\"Pump_1_Start_Stop_Reach4\"),\n    Pump_2_Start_Stop_Reach: flow.get(\"Pump_2_Start_Stop_Reach4\"),\n    Pump_3_Start_Stop_Reach: flow.get(\"Pump_3_Start_Stop_Reach4\"),\n    Pump_4_Start_Stop_Reach: flow.get(\"Pump_4_Start_Stop_Reach4\"),\n    Pump_5_Start_Stop_Reach: flow.get(\"Pump_5_Start_Stop_Reach4\"),\n    Pump_6_Start_Stop_Reach: flow.get(\"Pump_6_Start_Stop_Reach4\"),\n    Pump_1_Trip: flow.get(\"Pump_1_Trip4\"),\n    Pump_2_Trip: flow.get(\"Pump_2_Trip4\"),\n    Pump_3_Trip: flow.get(\"Pump_3_Trip4\"),\n    Pump_4_Trip: flow.get(\"Pump_4_Trip4\"),\n    Pump_5_Trip: flow.get(\"Pump_5_Trip4\"),\n    Pump_6_Trip: flow.get(\"Pump_6_Trip4\"),\n    High_Pressure: flow.get(\"High_Pressure4\"),\n    Low_Pressure: flow.get(\"Low_Pressure4\"),\n    Service_Interval_Reset: flow.get(\"Service_Interval_Reset4\"),\n    Sensor_Fail :flow.get(\"Sensor_Fail4\"),\n    Pump_1_Max_Time_Reach: flow.get(\"Pump_1_Max_Time_Reach4\"),\n    Pump_2_Max_Time_Reach: flow.get(\"Pump_2_Max_Time_Reach4\"),\n    Pump_3_Max_Time_Reach: flow.get(\"Pump_3_Max_Time_Reach4\"),\n    Pump_4_Max_Time_Reach: flow.get(\"Pump_4_Max_Time_Reach4\"),\n    Pump_5_Max_Time_Reach: flow.get(\"Pump_5_Max_Time_Reach4\"),\n    Pump_6_Max_Time_Reach: flow.get(\"Pump_6_Max_Time_Reach4\")\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 2600,
        "wires": [
            []
        ]
    },
    {
        "id": "8c6e6b0b31ea01cb",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "function 186",
        "func": "msg.payload = {\n    Alarm_VFD_Overload: flow.get(\"Alarm_VFD_Overload4\"),\n    Dry_Run_Alarm: flow.get(\"Dry_Run_Alarm4\"),\n    High_Pressure_Alarm: flow.get(\"High_Pressure_Alarm4\"),\n    Low_Pressure_Alarm: flow.get(\"Low_Pressure_Alarm4\"),\n    Pressure_Sensor_Fail: flow.get(\"Pressure_Sensor_Fail4\"),\n    Channel_2_Sensor_Fail: flow.get(\"Channel_2_Sensor_Fail4\"),\n    VFD_Dry_Run_Spare: flow.get(\"VFD_Dry_Run_Spare4\"),\n    Chut_Off_Pressure_Reach: flow.get(\"Chut_Off_Pressure_Reac4h\"),\n    Suction_Pr_Low: flow.get(\"Suction_Pr_Low4\"),\n    Emergency_Stopped: flow.get(\"Emergency_Stopped4\"),\n    VFD_Communication_Fail: flow.get(\"VFD_Communication_Fail4\"),\n    Pump_Service_Expired: flow.get(\"Pump_Service_Expired4\"),\n    Dry_Run_VFD_1: flow.get(\"Dry_Run_VFD_14\"),\n    Dry_Run_VFD_2: flow.get(\"Dry_Run_VFD_24\"),\n    Dry_Run_VFD_3: flow.get(\"Dry_Run_VFD_34\"),\n    Dry_Run_VFD_4: flow.get(\"Dry_Run_VFD_44\"),\n    Dry_Run_VFD_5: flow.get(\"Dry_Run_VFD_54\"),\n    Dry_Run_VFD_6: flow.get(\"Dry_Run_VFD_64\"),\n    System_Healthy_1: flow.get(\"System_Healthy_14\"),\n    System_Healthy_2: flow.get(\"System_Healthy_24\"),\n    Buzzer: flow.get(\"Buzzer4\"),\n    Main_Contactor_Pump_1: flow.get(\"Main_Contactor_Pump_14\"),\n    Main_Contactor_Pump_2: flow.get(\"Main_Contactor_Pump_24\"),\n    Main_Contactor_Pump_3: flow.get(\"Main_Contactor_Pump_34\"),\n    Main_Contactor_Pump_4: flow.get(\"Main_Contactor_Pump_44\"),\n    Main_Contactor_Pump_5: flow.get(\"Main_Contactor_Pump_54\"),\n    Main_Contactor_Pump_6: flow.get(\"Main_Contactor_Pump_64\"),\n    Delta_Contactor_Pump_1: flow.get(\"Delta_Contactor_Pump_14\"),\n    Delta_Contactor_Pump_2: flow.get(\"Delta_Contactor_Pump_24\"),\n    Delta_Contactor_Pump_3: flow.get(\"Delta_Contactor_Pump_34\"),\n    Delta_Contactor_Pump_4: flow.get(\"Delta_Contactor_Pump_44\"),\n    Delta_Contactor_Pump_5: flow.get(\"Delta_Contactor_Pump_54\"),\n    Delta_Contactor_Pump_6: flow.get(\"Delta_Contactor_Pump_64\"),\n    VFD_Run_Spare: flow.get(\"VFD_Run_Spare4\"),\n    Output_Speed_1: flow.get(\"Output_Speed_14\"),\n    Output_Speed_2: flow.get(\"Output_Speed_24\"),\n    Output_Speed_3: flow.get(\"Output_Speed_34\"),\n    Output_Speed_4: flow.get(\"Output_Speed_44\"),\n    Output_Speed_5: flow.get(\"Output_Speed_54\"),\n    Output_Speed_6: flow.get(\"Output_Speed_64\")\n} \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 2640,
        "wires": [
            []
        ]
    },
    {
        "id": "e431b6c93cf4915f",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "Pump Status",
        "func": "let statusMap = {\n    0: \"TRIP\",\n    1: \"RUNNING\",\n    2: \"OFF\",\n    3: \"UNDER MAINTENANCE\"\n};\n\nlet Status_Pump_1 = statusMap[flow.get(\"Status_Pump_14\")] || \"Unknown\";\nlet Status_Pump_2 = statusMap[flow.get(\"Status_Pump_24\")] || \"Unknown\";\nlet Status_Pump_3 = statusMap[flow.get(\"Status_Pump_34\")] || \"Unknown\";\nlet Status_Pump_4 = statusMap[flow.get(\"Status_Pump_44\")] || \"Unknown\";\nlet Status_Pump_5 = statusMap[flow.get(\"Status_Pump_54\")] || \"Unknown\";\nlet Status_Pump_6 = statusMap[flow.get(\"Status_Pump_64\")] || \"Unknown\";\n\nmsg.payload = {\n    Status_Pump_1: Status_Pump_1,\n    Status_Pump_2: Status_Pump_2,\n    Status_Pump_3: Status_Pump_3,\n    Status_Pump_4: Status_Pump_4,\n    Status_Pump_5: Status_Pump_5,\n    Status_Pump_6: Status_Pump_6\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 2680,
        "wires": [
            []
        ]
    },
    {
        "id": "68d55fe0d2bcffd3",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "System Type",
        "func": "let statusMap = {\n    0: \"KT\",\n    1: \"VT\",\n    2: \"VPT\",\n};\n\nlet System_Type = statusMap[flow.get(\"System_Type4\")] || \"Unknown\";\n\nmsg.payload = {\n    System_Type: System_Type,\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 2720,
        "wires": [
            []
        ]
    },
    {
        "id": "c78f485209248f41",
        "type": "debug",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "b3408edc82270c86",
        "name": "debug 123",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 2660,
        "wires": []
    },
    {
        "id": "39b0f3dc340d37bb",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "No. of Pump",
        "func": "let Set_No_Of_Pump = Number(flow.get(\"Set_No_Of_Pump4\"));\nlet pumps = {};\n\nfor (let i = 1; i <= 6; i++) {\n    pumps[`pump${i}`] = i <= Set_No_Of_Pump ? 1 : 0;\n}\n\nmsg.payload = pumps;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 2760,
        "wires": [
            []
        ]
    },
    {
        "id": "5ec19074d2883167",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "d02383e94e219d36",
        "name": "Device details",
        "func": "let customerName = flow.set(\"customerName\", \"KSB Limited\");\nlet groupName = flow.set(\"groupName\", \"KSB\");\nlet deviceName = flow.set(\"deviceName\", \"SITE A\");\nlet deviceType = flow.set(\"deviceType\", \"Pumps\");\nflow.set(\"P1\",\"PUMP 1\");\nflow.set( \"latitude\", 19.8791969);\nflow.set(\"longitude\", 73.9793069);\nflow.set(\"address\",\"Plot No, Nashik - Pune Road, E3 & E4, MIDC, Sinnar, Maharashtra 422113\");\nflow.set(\"email\",\"contactusksbindia@ksb.com\");\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1300,
        "wires": [
            []
        ]
    },
    {
        "id": "585e906aeb4b2062",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "1be41bfb03a3b383",
        "name": "Device Details",
        "func": "let customerName = flow.get(\"customerName\");\nlet groupName = flow.get(\"groupName\");\nlet deviceName = flow.get(\"deviceName\");\nlet deviceType = flow.get(\"deviceType\");\nlet P1 = flow.get(\"P1\")\nlet Set_No_Of_Pump = Number(flow.get(\"Set_No_Of_Pump\"));\nlet pumps ={};\n\nfor (let i = 1; i <= 6; i++) {\n    pumps[`pump${i}`] = i <= Set_No_Of_Pump ? 1 : 0;\n}\n\n// Set each pump status individually in flow context\nfor (let i = 1; i <= 6; i++) {\n    flow.set(`pump${i}`, pumps[`pump${i}`]);\n}\n\nlet statusMap = {\n    0: \"KT\",\n    1: \"VT\",\n    2: \"VPT\",\n};\n\nlet System_Type = statusMap[flow.get(\"System_Type\")] || \"Unknown\";\n\nlet statusMap1 = {\n    0: \"TRIP\",\n    1: \"RUNNING\",\n    2: \"OFF\",\n    3: \"MAINTENANCE\",\n    4: \"DISABLED\"\n};\n\nlet Status_Pump_1 = statusMap1[flow.get(\"Status_Pump_1\")] || \"Unknown\";\nlet Status_Pump_2 = statusMap1[flow.get(\"Status_Pump_2\")] || \"Unknown\";\nlet Status_Pump_3 = statusMap1[flow.get(\"Status_Pump_3\")] || \"Unknown\";\nlet Status_Pump_4 = statusMap1[flow.get(\"Status_Pump_4\")] || \"Unknown\";\nlet Status_Pump_5 = statusMap1[flow.get(\"Status_Pump_5\")] || \"Unknown\";\nlet Status_Pump_6 = statusMap1[flow.get(\"Status_Pump_6\")] || \"Unknown\";\nlet latitude = flow.get(\"latitude\");\nlet longitude = flow.get(\"longitude\");\nmsg.payload = {\n    deviceName,\n    deviceType,\n    customerName,\n    groupName,\n    latitude,\n    longitude,\n    // Attributes should be added of pump names.>>>>>>>>>>>>>>>>>>>>>>>>\n    P1,\n    Set_Pressure: flow.get(\"Set_Pressure\"),\n    Adaptive_Setting: flow.get(\"Adaptive_Setting\"),\n    Actual_Pressure: flow.get(\"Actual_Pressure\"),\n    System_Flow: flow.get(\"System_Flow\"),\n    Suction_Pressure: flow.get(\"Suction_Pressure\"),\n    Kw: flow.get(\"Kw\"),\n    Load_Percentage: flow.get(\"Load_Percentage\"),\n    Current_Pump_1: flow.get(\"Current_Pump_1\"),\n    Current_Pump_2: flow.get(\"Current_Pump_2\"),\n    Current_Pump_3: flow.get(\"Current_Pump_3\"),\n    Current_Pump_4: flow.get(\"Current_Pump_4\"),\n    Current_Pump_5: flow.get(\"Current_Pump_5\"),\n    Current_Pump_6: flow.get(\"Current_Pump_6\"),\n    Power_Pump_1: flow.get(\"Power_Pump_1\"),\n    Power_Pump_2: flow.get(\"Power_Pump_2\"),\n    Power_Pump_3: flow.get(\"Power_Pump_3\"),\n    Power_Pump_4: flow.get(\"Power_Pump_4\"),\n    Power_Pump_5: flow.get(\"Power_Pump_5\"),\n    Power_Pump_6: flow.get(\"Power_Pump_6\"),\n    Run_Pump_1: flow.get(\"Run_Mint_Pump_1\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_1\")+\"Min\",\n    Run_Pump_2: flow.get(\"Run_Mint_Pump_2\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_2\")+\"Min\",\n    Run_Pump_3: flow.get(\"Run_Mint_Pump_3\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_3\")+\"Min\",\n    Run_Pump_4: flow.get(\"Run_Mint_Pump_4\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_4\")+\"Min\",\n    Run_Pump_5: flow.get(\"Run_Mint_Pump_5\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_5\")+\"Min\",\n    Run_Pump_6: flow.get(\"Run_Mint_Pump_6\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_6\")+\"Min\",\n    Set_No_Of_Pump: flow.get(\"Set_No_Of_Pump\")+\"W\"+\"+\"+flow.get(\"Standby_Pump\")+\"S\",\n    Count_Hr_Pump_1: flow.get(\"Count_Hr_Pump_1\"),\n    Count_Hr_Pump_2: flow.get(\"Count_Hr_Pump_2\"),\n    Count_Hr_Pump_3: flow.get(\"Count_Hr_Pump_3\"),\n    Count_Hr_Pump_4: flow.get(\"Count_Hr_Pump_4\"),\n    Count_Hr_Pump_5: flow.get(\"Count_Hr_Pump_5\"),\n    Count_Hr_Pump_6: flow.get(\"Count_Hr_Pump_6\"),\n    Pump_1_Start_Stop_Reach: flow.get(\"Pump_1_Start_Stop_Reach\"),\n    Pump_2_Start_Stop_Reach: flow.get(\"Pump_2_Start_Stop_Reach\"),\n    Pump_3_Start_Stop_Reach: flow.get(\"Pump_3_Start_Stop_Reach\"),\n    Pump_4_Start_Stop_Reach: flow.get(\"Pump_4_Start_Stop_Reach\"),\n    Pump_5_Start_Stop_Reach: flow.get(\"Pump_5_Start_Stop_Reach\"),\n    Pump_6_Start_Stop_Reach: flow.get(\"Pump_6_Start_Stop_Reach\"),\n    Pump_1_Trip: flow.get(\"Pump_1_Trip\"),\n    Pump_2_Trip: flow.get(\"Pump_2_Trip\"),\n    Pump_3_Trip: flow.get(\"Pump_3_Trip\"),\n    Pump_4_Trip: flow.get(\"Pump_4_Trip\"),\n    Pump_5_Trip: flow.get(\"Pump_5_Trip\"),\n    Pump_6_Trip: flow.get(\"Pump_6_Trip\"),\n    High_Pressure: flow.get(\"High_Pressure\"),\n    Low_Pressure: flow.get(\"Low_Pressure\"),\n    Service_Interval_Reset: flow.get(\"Service_Interval_Reset\"),\n    Sensor_Fail :flow.get(\"Sensor_Fail\"),\n    Pump_1_Max_Time_Reach: flow.get(\"Pump_1_Max_Time_Reach\"),\n    Pump_2_Max_Time_Reach: flow.get(\"Pump_2_Max_Time_Reach\"),\n    Pump_3_Max_Time_Reach: flow.get(\"Pump_3_Max_Time_Reach\"),\n    Pump_4_Max_Time_Reach: flow.get(\"Pump_4_Max_Time_Reach\"),\n    Pump_5_Max_Time_Reach: flow.get(\"Pump_5_Max_Time_Reach\"),\n    Pump_6_Max_Time_Reach: flow.get(\"Pump_6_Max_Time_Reach\"),\n    Alarm_VFD_Overload: flow.get(\"Alarm_VFD_Overload\"),\n    Dry_Run_Alarm: flow.get(\"Dry_Run_Alarm\"),\n    High_Pressure_Alarm1: flow.get(\"High_Pressure_Alarm\"),\n    Low_Pressure_Alarm1: flow.get(\"Low_Pressure_Alarm\"),\n    Pressure_Sensor_Fail: flow.get(\"Pressure_Sensor_Fail\"),\n    Channel_2_Sensor_Fail: flow.get(\"Channel_2_Sensor_Fail\"),\n    VFD_Dry_Run_Spare: flow.get(\"VFD_Dry_Run_Spare\"),\n    Chut_Off_Pressure_Reach: flow.get(\"Chut_Off_Pressure_Reach\"),\n    Suction_Pr_Low: flow.get(\"Suction_Pr_Low\"),\n    Emergency_Stopped: flow.get(\"Emergency_Stopped\"),\n    VFD_Communication_Fail: flow.get(\"VFD_Communication_Fail\"),\n    Pump_Service_Expired: flow.get(\"Pump_Service_Expired\"),\n    Dry_Run_VFD_1: flow.get(\"Dry_Run_VFD_1\"),\n    Dry_Run_VFD_2: flow.get(\"Dry_Run_VFD_2\"),\n    Dry_Run_VFD_3: flow.get(\"Dry_Run_VFD_3\"),\n    Dry_Run_VFD_4: flow.get(\"Dry_Run_VFD_4\"),\n    Dry_Run_VFD_5: flow.get(\"Dry_Run_VFD_5\"),\n    Dry_Run_VFD_6: flow.get(\"Dry_Run_VFD_6\"),\n    System_Healthy_1: flow.get(\"System_Healthy_1\"),\n    System_Healthy_2: flow.get(\"System_Healthy_2\"),\n    Buzzer: flow.get(\"Buzzer\"),\n    Main_Contactor_Pump_1: flow.get(\"Main_Contactor_Pump_1\"),\n    Main_Contactor_Pump_2: flow.get(\"Main_Contactor_Pump_2\"),\n    Main_Contactor_Pump_3: flow.get(\"Main_Contactor_Pump_3\"),\n    Main_Contactor_Pump_4: flow.get(\"Main_Contactor_Pump_4\"),\n    Main_Contactor_Pump_5: flow.get(\"Main_Contactor_Pump_5\"),\n    Main_Contactor_Pump_6: flow.get(\"Main_Contactor_Pump_6\"),\n    Delta_Contactor_Pump_1: flow.get(\"Delta_Contactor_Pump_1\"),\n    Delta_Contactor_Pump_2: flow.get(\"Delta_Contactor_Pump_2\"),\n    Delta_Contactor_Pump_3: flow.get(\"Delta_Contactor_Pump_3\"),\n    Delta_Contactor_Pump_4: flow.get(\"Delta_Contactor_Pump_4\"),\n    Delta_Contactor_Pump_5: flow.get(\"Delta_Contactor_Pump_5\"),\n    Delta_Contactor_Pump_6: flow.get(\"Delta_Contactor_Pump_6\"),\n    VFD_Run_Spare: flow.get(\"VFD_Run_Spare\"),\n    Output_Speed_1: flow.get(\"Output_Speed_1\"),\n    Output_Speed_2: flow.get(\"Output_Speed_2\"),\n    Output_Speed_3: flow.get(\"Output_Speed_3\"),\n    Output_Speed_4: flow.get(\"Output_Speed_4\"),\n    Output_Speed_5: flow.get(\"Output_Speed_5\"),\n    Output_Speed_6: flow.get(\"Output_Speed_6\"),\n    Status_Pump_1: Status_Pump_1,\n    Status_Pump_2: Status_Pump_2,\n    Status_Pump_3: Status_Pump_3,\n    Status_Pump_4: Status_Pump_4,\n    Status_Pump_5: Status_Pump_5,\n    Status_Pump_6: Status_Pump_6,\n    System_Type: System_Type,\n    pump1:flow.get(\"pump1\"),\n    pump2:flow.get(\"pump2\"),\n    pump3:flow.get(\"pump3\"),\n    pump4:flow.get(\"pump4\"),\n    pump5:flow.get(\"pump5\"),\n    pump6:flow.get(\"pump6\"),\n    address: flow.get(\"address\"),\n    email: flow.get(\"email\")\n    \n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 900,
        "wires": [
            [
                "4f3115d94159b6ce",
                "1928bd3aedd7bfba"
            ]
        ]
    },
    {
        "id": "73bf289de370e027",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "f417980e4201f509",
        "name": "Device details",
        "func": "let customerName = flow.set(\"customerName1\", \"KSB Limited\");\nlet groupName = flow.set(\"groupName1\", \"KSB\");\nlet deviceName = flow.set(\"deviceName1\", \"SITE B\");\nlet deviceType = flow.set(\"deviceType1\", \"Pumps\");\nflow.set(\"latitude1\", 19.14937775046027)\nflow.set(\"longitude1\", 73.00854723791102)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1860,
        "wires": [
            []
        ]
    },
    {
        "id": "06bfc371eb21679c",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "410eaebcc7fe632c",
        "name": "Device details",
        "func": "let customerName = flow.set(\"customerName2\", \"KSB Limited\");\nlet groupName = flow.set(\"groupName2\", \"KSB1\");\nlet deviceName = flow.set(\"deviceName2\", \"SITE C\");\nlet deviceType = flow.set(\"deviceType2\", \"Pumps\");\nflow.set(\"latitude2\", 19.203071275405737)\nflow.set(\"longitude2\", 73.8740658156572)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 2380,
        "wires": [
            []
        ]
    },
    {
        "id": "8502cb83a777cd54",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "9687b13c30b407e1",
        "name": "Device details",
        "func": "let customerName = flow.set(\"customerName3\", \"KSB Limited\");\nlet groupName = flow.set(\"groupName3\", \"KSB1\");\nlet deviceName = flow.set(\"deviceName3\", \"SITE D\");\nlet deviceType = flow.set(\"deviceType3\", \"Pumps\");\nflow.set(\"latitude3\", 19.663468938030697)\nflow.set(\"longitude3\",  73.13271936573248)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 2920,
        "wires": [
            []
        ]
    },
    {
        "id": "5dc20b8e0c7ef1dd",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "964d7c3fb11a2e95",
        "name": "Device Details",
        "func": "let customerName = flow.get(\"customerName1\");\nlet groupName = flow.get(\"groupName1\");\nlet deviceName = flow.get(\"deviceName1\");\nlet deviceType = flow.get(\"deviceType1\");\n\nlet Set_No_Of_Pump = Number(flow.get(\"Set_No_Of_Pump1\"));\nlet pumps ={};\n\nfor (let i = 1; i <= 6; i++) {\n    pumps[`pump${i}`] = i <= Set_No_Of_Pump ? 1 : 0;\n}\n\n// Set each pump status individually in flow context\nfor (let i = 1; i <= 6; i++) {\n    flow.set(`pump${i}_1`, pumps[`pump${i}`]);\n}\n\nlet statusMap = {\n    0: \"KT\",\n    1: \"VT\",\n    2: \"VPT\",\n};\n\nlet System_Type = statusMap[flow.get(\"System_Type1\")] || \"Unknown\";\n\nlet statusMap1 = {\n    0: \"TRIP\",\n    1: \"RUNNING\",\n    2: \"OFF\",\n    3: \"MAINTENANCE\",\n    4: \"DISABLED\"\n};\n\nlet Status_Pump_1 = statusMap1[flow.get(\"Status_Pump_11\")] || \"Unknown\";\nlet Status_Pump_2 = statusMap1[flow.get(\"Status_Pump_21\")] || \"Unknown\";\nlet Status_Pump_3 = statusMap1[flow.get(\"Status_Pump_31\")] || \"Unknown\";\nlet Status_Pump_4 = statusMap1[flow.get(\"Status_Pump_41\")] || \"Unknown\";\nlet Status_Pump_5 = statusMap1[flow.get(\"Status_Pump_51\")] || \"Unknown\";\nlet Status_Pump_6 = statusMap1[flow.get(\"Status_Pump_61\")] || \"Unknown\";\n\n\n\nlet latitude = flow.get(\"latitude1\");\nlet longitude = flow.get(\"longitude1\");\nmsg.payload = {\n    deviceName,\n    deviceType,\n    customerName,\n    groupName,\n    latitude,\n    longitude,\n    Set_Pressure: flow.get(\"Set_Pressure1\"),\n    Adaptive_Setting: flow.get(\"Adaptive_Setting1\"),\n    Actual_Pressure: flow.get(\"Actual_Pressure1\"),\n    System_Flow: flow.get(\"System_Flow1\"),\n    Suction_Pressure: flow.get(\"Suction_Pressure1\"),\n    Kw: flow.get(\"Kw1\"),\n    Load_Percentage: flow.get(\"Load_Percentage1\"),\n    Current_Pump_1: flow.get(\"Current_Pump_11\"),\n    Current_Pump_2: flow.get(\"Current_Pump_21\"),\n    Current_Pump_3: flow.get(\"Current_Pump_31\"),\n    Current_Pump_4: flow.get(\"Current_Pump_41\"),\n    Current_Pump_5: flow.get(\"Current_Pump_51\"),\n    Current_Pump_6: flow.get(\"Current_Pump_61\"),\n    Power_Pump_1: flow.get(\"Power_Pump_11\"),\n    Power_Pump_2: flow.get(\"Power_Pump_21\"),\n    Power_Pump_3: flow.get(\"Power_Pump_31\"),\n    Power_Pump_4: flow.get(\"Power_Pump_41\"),\n    Power_Pump_5: flow.get(\"Power_Pump_51\"),\n    Power_Pump_6: flow.get(\"Power_Pump_61\"),\n    Run_Pump_1: flow.get(\"Run_Mint_Pump_11\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_11\")+\"Min\",\n    Run_Pump_2: flow.get(\"Run_Mint_Pump_21\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_21\")+\"Min\",\n    Run_Pump_3: flow.get(\"Run_Mint_Pump_31\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_31\")+\"Min\",\n    Run_Pump_4: flow.get(\"Run_Mint_Pump_41\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_41\")+\"Min\",\n    Run_Pump_5: flow.get(\"Run_Mint_Pump_51\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_51\")+\"Min\",\n    Run_Pump_6: flow.get(\"Run_Mint_Pump_61\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_61\")+\"Min\",\n    Set_No_Of_Pump: flow.get(\"Set_No_Of_Pump1\")+\"W\"+\"+\"+flow.get(\"Standby_Pump1\")+\"S\",\n    Count_Hr_Pump_1: flow.get(\"Count_Hr_Pump_11\"),\n    Count_Hr_Pump_2: flow.get(\"Count_Hr_Pump_21\"),\n    Count_Hr_Pump_3: flow.get(\"Count_Hr_Pump_31\"),\n    Count_Hr_Pump_4: flow.get(\"Count_Hr_Pump_41\"),\n    Count_Hr_Pump_5: flow.get(\"Count_Hr_Pump_51\"),\n    Count_Hr_Pump_6: flow.get(\"Count_Hr_Pump_61\"),\n    Pump_1_Start_Stop_Reach: flow.get(\"Pump_1_Start_Stop_Reach1\"),\n    Pump_2_Start_Stop_Reach: flow.get(\"Pump_2_Start_Stop_Reach1\"),\n    Pump_3_Start_Stop_Reach: flow.get(\"Pump_3_Start_Stop_Reach1\"),\n    Pump_4_Start_Stop_Reach: flow.get(\"Pump_4_Start_Stop_Reach1\"),\n    Pump_5_Start_Stop_Reach: flow.get(\"Pump_5_Start_Stop_Reach1\"),\n    Pump_6_Start_Stop_Reach: flow.get(\"Pump_6_Start_Stop_Reach1\"),\n    Pump_1_Trip: flow.get(\"Pump_1_Trip1\"),\n    Pump_2_Trip: flow.get(\"Pump_2_Trip1\"),\n    Pump_3_Trip: flow.get(\"Pump_3_Trip1\"),\n    Pump_4_Trip: flow.get(\"Pump_4_Trip1\"),\n    Pump_5_Trip: flow.get(\"Pump_5_Trip1\"),\n    Pump_6_Trip: flow.get(\"Pump_6_Trip1\"),\n    High_Pressure: flow.get(\"High_Pressure1\"),\n    Low_Pressure: flow.get(\"Low_Pressure1\"),\n    Service_Interval_Reset: flow.get(\"Service_Interval_Reset1\"),\n    Sensor_Fail :flow.get(\"Sensor_Fail1\"),\n    Pump_1_Max_Time_Reach: flow.get(\"Pump_1_Max_Time_Reach1\"),\n    Pump_2_Max_Time_Reach: flow.get(\"Pump_2_Max_Time_Reach1\"),\n    Pump_3_Max_Time_Reach: flow.get(\"Pump_3_Max_Time_Reach1\"),\n    Pump_4_Max_Time_Reach: flow.get(\"Pump_4_Max_Time_Reach1\"),\n    Pump_5_Max_Time_Reach: flow.get(\"Pump_5_Max_Time_Reach1\"),\n    Pump_6_Max_Time_Reach: flow.get(\"Pump_6_Max_Time_Reach1\"),\n    Alarm_VFD_Overload: flow.get(\"Alarm_VFD_Overload1\"),\n    Dry_Run_Alarm: flow.get(\"Dry_Run_Alarm1\"),\n    High_Pressure_Alarm2: flow.get(\"High_Pressure_Alarm1\"),\n    Low_Pressure_Alarm2: flow.get(\"Low_Pressure_Alarm1\"),\n    Pressure_Sensor_Fail: flow.get(\"Pressure_Sensor_Fail1\"),\n    Channel_2_Sensor_Fail: flow.get(\"Channel_2_Sensor_Fail1\"),\n    VFD_Dry_Run_Spare: flow.get(\"VFD_Dry_Run_Spare1\"),\n    Chut_Off_Pressure_Reach: flow.get(\"Chut_Off_Pressure_Reach1\"),\n    Suction_Pr_Low: flow.get(\"Suction_Pr_Low1\"),\n    Emergency_Stopped: flow.get(\"Emergency_Stopped1\"),\n    VFD_Communication_Fail: flow.get(\"VFD_Communication_Fail1\"),\n    Pump_Service_Expired: flow.get(\"Pump_Service_Expired1\"),\n    Dry_Run_VFD_1: flow.get(\"Dry_Run_VFD_11\"),\n    Dry_Run_VFD_2: flow.get(\"Dry_Run_VFD_21\"),\n    Dry_Run_VFD_3: flow.get(\"Dry_Run_VFD_31\"),\n    Dry_Run_VFD_4: flow.get(\"Dry_Run_VFD_41\"),\n    Dry_Run_VFD_5: flow.get(\"Dry_Run_VFD_51\"),\n    Dry_Run_VFD_6: flow.get(\"Dry_Run_VFD_61\"),\n    System_Healthy_1: flow.get(\"System_Healthy_11\"),\n    System_Healthy_2: flow.get(\"System_Healthy_21\"),\n    Buzzer: flow.get(\"Buzzer1\"),\n    Main_Contactor_Pump_1: flow.get(\"Main_Contactor_Pump_11\"),\n    Main_Contactor_Pump_2: flow.get(\"Main_Contactor_Pump_21\"),\n    Main_Contactor_Pump_3: flow.get(\"Main_Contactor_Pump_31\"),\n    Main_Contactor_Pump_4: flow.get(\"Main_Contactor_Pump_41\"),\n    Main_Contactor_Pump_5: flow.get(\"Main_Contactor_Pump_51\"),\n    Main_Contactor_Pump_6: flow.get(\"Main_Contactor_Pump_61\"),\n    Delta_Contactor_Pump_1: flow.get(\"Delta_Contactor_Pump_11\"),\n    Delta_Contactor_Pump_2: flow.get(\"Delta_Contactor_Pump_21\"),\n    Delta_Contactor_Pump_3: flow.get(\"Delta_Contactor_Pump_31\"),\n    Delta_Contactor_Pump_4: flow.get(\"Delta_Contactor_Pump_41\"),\n    Delta_Contactor_Pump_5: flow.get(\"Delta_Contactor_Pump_51\"),\n    Delta_Contactor_Pump_6: flow.get(\"Delta_Contactor_Pump_61\"),\n    VFD_Run_Spare: flow.get(\"VFD_Run_Spare1\"),\n    Output_Speed_1: flow.get(\"Output_Speed_11\"),\n    Output_Speed_2: flow.get(\"Output_Speed_21\"),\n    Output_Speed_3: flow.get(\"Output_Speed_31\"),\n    Output_Speed_4: flow.get(\"Output_Speed_41\"),\n    Output_Speed_5: flow.get(\"Output_Speed_51\"),\n    Output_Speed_6: flow.get(\"Output_Speed_61\"),\n    Status_Pump_1: Status_Pump_1,\n    Status_Pump_2: Status_Pump_2,\n    Status_Pump_3: Status_Pump_3,\n    Status_Pump_4: Status_Pump_4,\n    Status_Pump_5: Status_Pump_5,\n    Status_Pump_6: Status_Pump_6,\n    System_Type: System_Type,\n    pump1:flow.get(\"pump1_1\"),\n    pump2:flow.get(\"pump2_1\"),\n    pump3:flow.get(\"pump3_1\"),\n    pump4:flow.get(\"pump4_1\"),\n    pump5:flow.get(\"pump5_1\"),\n    pump6:flow.get(\"pump6_1\"),\n    address: flow.get(\"address\"),\n    email: flow.get(\"email\")\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1540,
        "wires": [
            [
                "24af0ef449b142c4",
                "4ac712fc5252fc9e"
            ]
        ]
    },
    {
        "id": "401cca24edf1a9d8",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "d675fac31ae93fea",
        "name": "Device Details",
        "func": "let customerName = flow.get(\"customerName2\");\nlet groupName = flow.get(\"groupName2\");\nlet deviceName = flow.get(\"deviceName2\");\nlet deviceType = flow.get(\"deviceType2\");\n\n// let Set_No_Of_Pump = Number(flow.get(\"Set_No_Of_Pump2\"));\n// let pumps ={};\n\n// for (let i = 1; i <= 6; i++) {\n//     pumps[`pump${i}`] = i <= Set_No_Of_Pump ? 1 : 0;\n// }\n\n// // Set each pump status individually in flow context\n// for (let i = 1; i <= 6; i++) {\n//     flow.set(`pump${i}_2`, pumps[`pump${i}`]);\n// }\n\n\nlet statusMap = {\n    0: \"KT\",\n    1: \"VT\",\n    2: \"VPT\",\n};\n\nlet System_Type = statusMap[flow.get(\"System_Type2\")] || \"Unknown\";\n\nlet statusMap1 = {\n    0: \"TRIP\",\n    1: \"RUNNING\",\n    2: \"OFF\",\n    3: \"MAINTENANCE\",\n    4: \"DISABLED\"\n};\n\nlet Status_Pump_1 = statusMap1[flow.get(\"Status_Pump_12\")] || \"Unknown\";\nlet Status_Pump_2 = statusMap1[flow.get(\"Status_Pump_22\")] || \"Unknown\";\nlet Status_Pump_3 = statusMap1[flow.get(\"Status_Pump_32\")] || \"Unknown\";\nlet Status_Pump_4 = statusMap1[flow.get(\"Status_Pump_42\")] || \"Unknown\";\nlet Status_Pump_5 = statusMap1[flow.get(\"Status_Pump_52\")] || \"Unknown\";\nlet Status_Pump_6 = statusMap1[flow.get(\"Status_Pump_6\")] || \"Unknown\";\n\n\n\n\nlet latitude = flow.get(\"latitude2\");\nlet longitude = flow.get(\"longitude2\");\nmsg.payload = {\n    deviceName,\n    deviceType,\n    customerName,\n    groupName,\n    latitude,\n    longitude,\n    Set_Pressure: flow.get(\"Set_Pressure2\"),\n    Adaptive_Setting: flow.get(\"Adaptive_Setting2\"),\n    Actual_Pressure: flow.get(\"Actual_Pressure2\"),\n    System_Flow: flow.get(\"System_Flow2\"),\n    Suction_Pressure: flow.get(\"Suction_Pressure2\"),\n    Kw: flow.get(\"Kw2\"),\n    Load_Percentage: flow.get(\"Load_Percentage2\"),\n    Current_Pump_1: flow.get(\"Current_Pump_12\"),\n    Current_Pump_2: flow.get(\"Current_Pump_22\"),\n    Current_Pump_3: flow.get(\"Current_Pump_32\"),\n    Current_Pump_4: flow.get(\"Current_Pump_42\"),\n    Current_Pump_5: flow.get(\"Current_Pump_52\"),\n    Current_Pump_6: flow.get(\"Current_Pump_62\"),\n    Power_Pump_1: flow.get(\"Power_Pump_12\"),\n    Power_Pump_2: flow.get(\"Power_Pump_22\"),\n    Power_Pump_3: flow.get(\"Power_Pump_32\"),\n    Power_Pump_4: flow.get(\"Power_Pump_42\"),\n    Power_Pump_5: flow.get(\"Power_Pump_52\"),\n    Power_Pump_6: flow.get(\"Power_Pump_62\"),\n    Run_Pump_1: flow.get(\"Run_Mint_Pump_12\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_12\")+\"Min\",\n    Run_Pump_2: flow.get(\"Run_Mint_Pump_22\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_22\")+\"Min\",\n    Run_Pump_3: flow.get(\"Run_Mint_Pump_32\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_32\")+\"Min\",\n    Run_Pump_4: flow.get(\"Run_Mint_Pump_42\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_42\")+\"Min\",\n    Run_Pump_5: flow.get(\"Run_Mint_Pump_52\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_52\")+\"Min\",\n    Run_Pump_6: flow.get(\"Run_Mint_Pump_62\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_62\")+\"Min\",\n    Alarm_VFD_Overload: flow.get(\"Alarm_VFD_Overload2\"),\n    Dry_Run_Alarm: flow.get(\"Dry_Run_Alarm2\"),\n    High_Pressure_Alarm3: flow.get(\"High_Pressure_Alarm2\"),\n    Low_Pressure_Alarm3: flow.get(\"Low_Pressure_Alarm2\"),\n    Pressure_Sensor_Fail: flow.get(\"Pressure_Sensor_Fail2\"),\n    Channel_2_Sensor_Fail: flow.get(\"Channel_2_Sensor_Fail2\"),\n    VFD_Dry_Run_Spare: flow.get(\"VFD_Dry_Run_Spare2\"),\n    Chut_Off_Pressure_Reach: flow.get(\"Chut_Off_Pressure_Reach2\"),\n    Suction_Pr_Low: flow.get(\"Suction_Pr_Low2\"),\n    Emergency_Stopped: flow.get(\"Emergency_Stopped2\"),\n    VFD_Communication_Fail: flow.get(\"VFD_Communication_Fail2\"),\n    Pump_Service_Expired: flow.get(\"Pump_Service_Expired2\"),\n    Dry_Run_VFD_1: flow.get(\"Dry_Run_VFD_12\"),\n    Dry_Run_VFD_2: flow.get(\"Dry_Run_VFD_22\"),\n    Dry_Run_VFD_3: flow.get(\"Dry_Run_VFD_32\"),\n    Dry_Run_VFD_4: flow.get(\"Dry_Run_VFD_42\"),\n    Dry_Run_VFD_5: flow.get(\"Dry_Run_VFD_52\"),\n    Dry_Run_VFD_6: flow.get(\"Dry_Run_VFD_62\"),\n    System_Healthy_1: flow.get(\"System_Healthy_12\"),\n    System_Healthy_2: flow.get(\"System_Healthy_22\"),\n    Buzzer: flow.get(\"Buzzer2\"),\n    Main_Contactor_Pump_1: flow.get(\"Main_Contactor_Pump_12\"),\n    Main_Contactor_Pump_2: flow.get(\"Main_Contactor_Pump_22\"),\n    Main_Contactor_Pump_3: flow.get(\"Main_Contactor_Pump_32\"),\n    Main_Contactor_Pump_4: flow.get(\"Main_Contactor_Pump_42\"),\n    Main_Contactor_Pump_5: flow.get(\"Main_Contactor_Pump_52\"),\n    Main_Contactor_Pump_6: flow.get(\"Main_Contactor_Pump_62\"),\n    Delta_Contactor_Pump_1: flow.get(\"Delta_Contactor_Pump_12\"),\n    Delta_Contactor_Pump_2: flow.get(\"Delta_Contactor_Pump_22\"),\n    Delta_Contactor_Pump_3: flow.get(\"Delta_Contactor_Pump_32\"),\n    Delta_Contactor_Pump_4: flow.get(\"Delta_Contactor_Pump_42\"),\n    Delta_Contactor_Pump_5: flow.get(\"Delta_Contactor_Pump_52\"),\n    Delta_Contactor_Pump_6: flow.get(\"Delta_Contactor_Pump_62\"),\n    VFD_Run_Spare: flow.get(\"VFD_Run_Spare2\"),\n    Output_Speed_1: flow.get(\"Output_Speed_12\"),\n    Output_Speed_2: flow.get(\"Output_Speed_22\"),\n    Output_Speed_3: flow.get(\"Output_Speed_32\"),\n    Output_Speed_4: flow.get(\"Output_Speed_42\"),\n    Output_Speed_5: flow.get(\"Output_Speed_52\"),\n    Output_Speed_6: flow.get(\"Output_Speed_62\"),\n    Set_No_Of_Pump: flow.get(\"Set_No_Of_Pump2\")+\"W\"+\"+\"+flow.get(\"Standby_Pump2\")+\"S\",\n    Count_Hr_Pump_1: flow.get(\"Count_Hr_Pump_12\"),\n    Count_Hr_Pump_2: flow.get(\"Count_Hr_Pump_22\"),\n    Count_Hr_Pump_3: flow.get(\"Count_Hr_Pump_32\"),\n    Count_Hr_Pump_4: flow.get(\"Count_Hr_Pump_42\"),\n    Count_Hr_Pump_5: flow.get(\"Count_Hr_Pump_52\"),\n    Count_Hr_Pump_6: flow.get(\"Count_Hr_Pump_62\"),\n    Pump_1_Start_Stop_Reach: flow.get(\"Pump_1_Start_Stop_Reach2\"),\n    Pump_2_Start_Stop_Reach: flow.get(\"Pump_2_Start_Stop_Reach2\"),\n    Pump_3_Start_Stop_Reach: flow.get(\"Pump_3_Start_Stop_Reach2\"),\n    Pump_4_Start_Stop_Reach: flow.get(\"Pump_4_Start_Stop_Reach2\"),\n    Pump_5_Start_Stop_Reach: flow.get(\"Pump_5_Start_Stop_Reach2\"),\n    Pump_6_Start_Stop_Reach: flow.get(\"Pump_6_Start_Stop_Reach2\"),\n    Pump_1_Trip: flow.get(\"Pump_1_Trip2\"),\n    Pump_2_Trip: flow.get(\"Pump_2_Trip2\"),\n    Pump_3_Trip: flow.get(\"Pump_3_Trip2\"),\n    Pump_4_Trip: flow.get(\"Pump_4_Trip2\"),\n    Pump_5_Trip: flow.get(\"Pump_5_Trip2\"),\n    Pump_6_Trip: flow.get(\"Pump_6_Trip2\"),\n    High_Pressure: flow.get(\"High_Pressure2\"),\n    Low_Pressure: flow.get(\"Low_Pressure2\"),\n    Service_Interval_Reset: flow.get(\"Service_Interval_Reset2\"),\n    Sensor_Fail :flow.get(\"Sensor_Fail2\"),\n    Pump_1_Max_Time_Reach: flow.get(\"Pump_1_Max_Time_Reach2\"),\n    Pump_2_Max_Time_Reach: flow.get(\"Pump_2_Max_Time_Reach2\"),\n    Pump_3_Max_Time_Reach: flow.get(\"Pump_3_Max_Time_Reach2\"),\n    Pump_4_Max_Time_Reach: flow.get(\"Pump_4_Max_Time_Reach2\"),\n    Pump_5_Max_Time_Reach: flow.get(\"Pump_5_Max_Time_Reach2\"),\n    Pump_6_Max_Time_Reach: flow.get(\"Pump_6_Max_Time_Reach2\"),\n    Status_Pump_1: Status_Pump_1,\n    Status_Pump_2: Status_Pump_2,\n    Status_Pump_3: Status_Pump_3,\n    Status_Pump_4: Status_Pump_4,\n    Status_Pump_5: Status_Pump_5,\n    Status_Pump_6: Status_Pump_6, \n    System_Type: System_Type,\n    pump1:flow.get(\"pump1_2\"),\n    pump2:flow.get(\"pump2_2\"),\n    pump3:flow.get(\"pump3_2\"),\n    pump4:flow.get(\"pump4_2\"),\n    pump5:flow.get(\"pump5_2\"),\n    pump6:flow.get(\"pump6_2\"),\n    address: flow.get(\"address\"),\n    email: flow.get(\"email\")\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 2060,
        "wires": [
            [
                "a5ded0533818dd82",
                "c423e9f4936733a6"
            ]
        ]
    },
    {
        "id": "c06a3f8be61d19c1",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "b3408edc82270c86",
        "name": "Device Details",
        "func": "let customerName = flow.get(\"customerName3\");\nlet groupName = flow.get(\"groupName3\");\nlet deviceName = flow.get(\"deviceName3\");\nlet deviceType = flow.get(\"deviceType3\");\n\n// let Set_No_Of_Pump = Number(flow.get(\"Set_No_Of_Pump3\"));\n// let pumps ={};\n\n// for (let i = 1; i <= 6; i++) {\n//     pumps[`pump${i}`] = i <= Set_No_Of_Pump ? 1 : 0;\n// }\n\n// // Set each pump status individually in flow context\n// for (let i = 1; i <= 6; i++) {\n//     flow.set(`pump${i}_3`, pumps[`pump${i}`]);\n// }\n\n\nlet statusMap = {\n    0: \"KT\",\n    1: \"VT\",\n    2: \"VPT\",\n};\n\nlet System_Type = statusMap[flow.get(\"System_Type3\")] || \"Unknown\";\n\nlet statusMap1 = {\n    0: \"TRIP\",\n    1: \"RUNNING\",\n    2: \"OFF\",\n    3: \"MAINTENANCE\",\n    4: \"DISABLED\"\n};\n\nlet Status_Pump_1 = statusMap1[flow.get(\"Status_Pump_13\")] || \"Unknown\";\nlet Status_Pump_2 = statusMap1[flow.get(\"Status_Pump_23\")] || \"Unknown\";\nlet Status_Pump_3 = statusMap1[flow.get(\"Status_Pump_33\")] || \"Unknown\";\nlet Status_Pump_4 = statusMap1[flow.get(\"Status_Pump_43\")] || \"Unknown\";\nlet Status_Pump_5 = statusMap1[flow.get(\"Status_Pump_53\")] || \"Unknown\";\nlet Status_Pump_6 = statusMap1[flow.get(\"Status_Pump_63\")] || \"Unknown\";\n\n\n\n\nlet latitude = flow.get(\"latitude3\");\nlet longitude = flow.get(\"longitude3\");\nmsg.payload = {\n    deviceName,\n    deviceType,\n    customerName,\n    groupName,\n    latitude,\n    longitude,\n    Set_Pressure: flow.get(\"Set_Pressure3\"),\n    Adaptive_Setting: flow.get(\"Adaptive_Setting3\"),\n    Actual_Pressure: flow.get(\"Actual_Pressure3\"),\n    System_Flow: flow.get(\"System_Flow3\"),\n    Suction_Pressure: flow.get(\"Suction_Pressure3\"),\n    Kw: flow.get(\"Kw3\"),\n    Load_Percentage: flow.get(\"Load_Percentage3\"),\n    Current_Pump_1: flow.get(\"Current_Pump_13\"),\n    Current_Pump_2: flow.get(\"Current_Pump_23\"),\n    Current_Pump_3: flow.get(\"Current_Pump_33\"),\n    Current_Pump_4: flow.get(\"Current_Pump_43\"),\n    Current_Pump_5: flow.get(\"Current_Pump_53\"),\n    Current_Pump_6: flow.get(\"Current_Pump_63\"),\n    Power_Pump_1: flow.get(\"Power_Pump_13\"),\n    Power_Pump_2: flow.get(\"Power_Pump_23\"),\n    Power_Pump_3: flow.get(\"Power_Pump_33\"),\n    Power_Pump_4: flow.get(\"Power_Pump_43\"),\n    Power_Pump_5: flow.get(\"Power_Pump_53\"),\n    Power_Pump_6: flow.get(\"Power_Pump_63\"),\n    Run_Pump_1: flow.get(\"Run_Mint_Pump_13\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_13\")+\"Min\",\n    Run_Pump_2: flow.get(\"Run_Mint_Pump_23\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_23\")+\"Min\",\n    Run_Pump_3: flow.get(\"Run_Mint_Pump_33\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_33\")+\"Min\",\n    Run_Pump_4: flow.get(\"Run_Mint_Pump_43\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_43\")+\"Min\",\n    Run_Pump_5: flow.get(\"Run_Mint_Pump_53\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_53\")+\"Min\",\n    Run_Pump_6: flow.get(\"Run_Mint_Pump_63\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_63\")+\"Min\",\n    Alarm_VFD_Overload: flow.get(\"Alarm_VFD_Overload3\"),\n    Dry_Run_Alarm: flow.get(\"Dry_Run_Alarm3\"),\n    High_Pressure_Alarm3: flow.get(\"High_Pressure_Alarm3\"),\n    Low_Pressure_Alarm3: flow.get(\"Low_Pressure_Alarm3\"),\n    Pressure_Sensor_Fail: flow.get(\"Pressure_Sensor_Fail3\"),\n    Channel_2_Sensor_Fail: flow.get(\"Channel_2_Sensor_Fail3\"),\n    VFD_Dry_Run_Spare: flow.get(\"VFD_Dry_Run_Spare3\"),\n    Chut_Off_Pressure_Reach: flow.get(\"Chut_Off_Pressure_Reach3\"),\n    Suction_Pr_Low: flow.get(\"Suction_Pr_Low3\"),\n    Emergency_Stopped: flow.get(\"Emergency_Stopped3\"),\n    VFD_Communication_Fail: flow.get(\"VFD_Communication_Fail3\"),\n    Pump_Service_Expired: flow.get(\"Pump_Service_Expired3\"),\n    Dry_Run_VFD_1: flow.get(\"Dry_Run_VFD_13\"),\n    Dry_Run_VFD_2: flow.get(\"Dry_Run_VFD_23\"),\n    Dry_Run_VFD_3: flow.get(\"Dry_Run_VFD_33\"),\n    Dry_Run_VFD_4: flow.get(\"Dry_Run_VFD_43\"),\n    Dry_Run_VFD_5: flow.get(\"Dry_Run_VFD_53\"),\n    Dry_Run_VFD_6: flow.get(\"Dry_Run_VFD_63\"),\n    System_Healthy_1: flow.get(\"System_Healthy_13\"),\n    System_Healthy_2: flow.get(\"System_Healthy_23\"),\n    Buzzer: flow.get(\"Buzzer3\"),\n    Main_Contactor_Pump_1: flow.get(\"Main_Contactor_Pump_13\"),\n    Main_Contactor_Pump_2: flow.get(\"Main_Contactor_Pump_23\"),\n    Main_Contactor_Pump_3: flow.get(\"Main_Contactor_Pump_33\"),\n    Main_Contactor_Pump_4: flow.get(\"Main_Contactor_Pump_43\"),\n    Main_Contactor_Pump_5: flow.get(\"Main_Contactor_Pump_53\"),\n    Main_Contactor_Pump_6: flow.get(\"Main_Contactor_Pump_63\"),\n    Delta_Contactor_Pump_1: flow.get(\"Delta_Contactor_Pump_13\"),\n    Delta_Contactor_Pump_2: flow.get(\"Delta_Contactor_Pump_23\"),\n    Delta_Contactor_Pump_3: flow.get(\"Delta_Contactor_Pump_33\"),\n    Delta_Contactor_Pump_4: flow.get(\"Delta_Contactor_Pump_43\"),\n    Delta_Contactor_Pump_5: flow.get(\"Delta_Contactor_Pump_53\"),\n    Delta_Contactor_Pump_6: flow.get(\"Delta_Contactor_Pump_63\"),\n    VFD_Run_Spare: flow.get(\"VFD_Run_Spare3\"),\n    Output_Speed_1: flow.get(\"Output_Speed_13\"),\n    Output_Speed_2: flow.get(\"Output_Speed_23\"),\n    Output_Speed_3: flow.get(\"Output_Speed_33\"),\n    Output_Speed_4: flow.get(\"Output_Speed_43\"),\n    Output_Speed_5: flow.get(\"Output_Speed_53\"),\n    Output_Speed_6: flow.get(\"Output_Speed_63\"),\n    Set_No_Of_Pump: flow.get(\"Set_No_Of_Pump3\")+\"W\"+\"+\"+flow.get(\"Standby_Pump3\")+\"S\",\n    Count_Hr_Pump_1: flow.get(\"Count_Hr_Pump_13\"),\n    Count_Hr_Pump_2: flow.get(\"Count_Hr_Pump_23\"),\n    Count_Hr_Pump_3: flow.get(\"Count_Hr_Pump_33\"),\n    Count_Hr_Pump_4: flow.get(\"Count_Hr_Pump_43\"),\n    Count_Hr_Pump_5: flow.get(\"Count_Hr_Pump_53\"),\n    Count_Hr_Pump_6: flow.get(\"Count_Hr_Pump_63\"),\n    Pump_1_Start_Stop_Reach: flow.get(\"Pump_1_Start_Stop_Reach3\"),\n    Pump_2_Start_Stop_Reach: flow.get(\"Pump_2_Start_Stop_Reach3\"),\n    Pump_3_Start_Stop_Reach: flow.get(\"Pump_3_Start_Stop_Reach3\"),\n    Pump_4_Start_Stop_Reach: flow.get(\"Pump_4_Start_Stop_Reach3\"),\n    Pump_5_Start_Stop_Reach: flow.get(\"Pump_5_Start_Stop_Reach3\"),\n    Pump_6_Start_Stop_Reach: flow.get(\"Pump_6_Start_Stop_Reach3\"),\n    Pump_1_Trip: flow.get(\"Pump_1_Trip3\"),\n    Pump_2_Trip: flow.get(\"Pump_2_Trip3\"),\n    Pump_3_Trip: flow.get(\"Pump_3_Trip3\"),\n    Pump_4_Trip: flow.get(\"Pump_4_Trip3\"),\n    Pump_5_Trip: flow.get(\"Pump_5_Trip3\"),\n    Pump_6_Trip: flow.get(\"Pump_6_Trip3\"),\n    High_Pressure: flow.get(\"High_Pressure3\"),\n    Low_Pressure: flow.get(\"Low_Pressure3\"),\n    Service_Interval_Reset: flow.get(\"Service_Interval_Reset3\"),\n    Sensor_Fail :flow.get(\"Sensor_Fail3\"),\n    Pump_1_Max_Time_Reach: flow.get(\"Pump_1_Max_Time_Reach3\"),\n    Pump_2_Max_Time_Reach: flow.get(\"Pump_2_Max_Time_Reach3\"),\n    Pump_3_Max_Time_Reach: flow.get(\"Pump_3_Max_Time_Reach3\"),\n    Pump_4_Max_Time_Reach: flow.get(\"Pump_4_Max_Time_Reach3\"),\n    Pump_5_Max_Time_Reach: flow.get(\"Pump_5_Max_Time_Reach3\"),\n    Pump_6_Max_Time_Reach: flow.get(\"Pump_6_Max_Time_Reach3\"),\n    Status_Pump_1: Status_Pump_1,\n    Status_Pump_2: Status_Pump_2,\n    Status_Pump_3: Status_Pump_3,\n    Status_Pump_4: Status_Pump_4,\n    Status_Pump_5: Status_Pump_5,\n    Status_Pump_6: Status_Pump_6, \n    System_Type: System_Type,\n    pump1:flow.get(\"pump1_3\"),\n    pump2:flow.get(\"pump2_3\"),\n    pump3:flow.get(\"pump3_3\"),\n    pump4:flow.get(\"pump4_3\"),\n    pump5:flow.get(\"pump5_3\"),\n    pump6:flow.get(\"pump6_3\"),\n    address: flow.get(\"address\"),\n    email: flow.get(\"email\")\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 2600,
        "wires": [
            [
                "fcf13b8ade4f9662",
                "c78f485209248f41"
            ]
        ]
    },
    {
        "id": "e6ca95a1760b5766",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "d02383e94e219d36",
        "name": "Pump Status",
        "func": "// let data = msg.payload;\n// flow.set(\"Status_Pump_1\", 3);\n// flow.set(\"Status_Pump_2\", 0);\n// flow.set(\"Status_Pump_3\", 1);\n// flow.set(\"Status_Pump_4\", 0);\n// flow.set(\"Status_Pump_5\", 2);\n// flow.set(\"Status_Pump_6\", 4);\nlet Set_No_Of_Pump = Number(flow.get(\"Set_No_Of_Pump\"));\nlet pumps ={};\n\nfor (let i = 1; i <= 6; i++) {\n    pumps[`pump${i}`] = i <= Set_No_Of_Pump ? 1 : 0;\n}\n\n// Set each pump status individually in flow context\nfor (let i = 1; i <= 6; i++) {\n    flow.set(`pump${i}`, pumps[`pump${i}`]);\n}\n\n\nlet pump2 = flow.get(\"pump2\")\nlet pump1 = flow.get(\"pump1\")\nlet pump3 = flow.get(\"pump3\")\nlet pump4 = flow.get(\"pump4\")\nlet pump5 = flow.get(\"pump5\")\nlet pump6 = flow.get(\"pump6\")\n\n\n\nif(pump1 === 1){\n    flow.set(\"Status_Pump_1\", 3);\n};\nif (pump1 === 0) {\n    flow.set(\"Status_Pump_1\", 4);\n};\n\n\nif (pump2 === 1) {\n    flow.set(\"Status_Pump_2\", 0);\n};\nif (pump1 === 0) {\n    flow.set(\"Status_Pump_2\", 4);\n};\n\n\nif (pump3 === 1) {\n    flow.set(\"Status_Pump_3\", 1);\n    \n};\nif (pump3 === 0) {\n    flow.set(\"Status_Pump_3\", 4);\n};\n\n\nif (pump4 === 1) {\n    flow.set(\"Status_Pump_4\", 0);\n};\nif (pump4 === 0) {\n    flow.set(\"Status_Pump_4\", 4);\n};\n\nif (pump5 === 1) {\n    flow.set(\"Status_Pump_5\", 2);\n   \n\n};\nif (pump5 === 0) {\n    flow.set(\"Status_Pump_5\", 4);\n};\n\n\nif (pump6 === 1) {\n    flow.set(\"Status_Pump_6\", 1);\n};\nif (pump6 === 0) {\n    flow.set(\"Status_Pump_6\", 4);\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "4592a460c8c6aebc",
        "type": "inject",
        "z": "5191202c2ef822cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 440,
        "y": 280,
        "wires": [
            [
                "340745f173c2befb"
            ]
        ]
    },
    {
        "id": "41c4ecebcc7a4903",
        "type": "function",
        "z": "5191202c2ef822cf",
        "name": "function 5",
        "func": "// Set your custom timestamp (in milliseconds)\nconst ts = 1720500000000; // or use Date.now() for current time\n\n// Set telemetry value\nconst temperature = 26.5;\n\n// Build the payload (not an array!)\nmsg.payload = {\n    ts: ts,\n    value: temperature\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 300,
        "wires": [
            [
                "d2612ae76904ccba"
            ]
        ]
    },
    {
        "id": "c67b55112ee90ca8",
        "type": "debug",
        "z": "5191202c2ef822cf",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 440,
        "wires": []
    },
    {
        "id": "d2612ae76904ccba",
        "type": "mqtt out",
        "z": "5191202c2ef822cf",
        "name": "",
        "topic": "testtimestamp",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "7f29005b7899d141",
        "x": 900,
        "y": 280,
        "wires": []
    },
    {
        "id": "340745f173c2befb",
        "type": "function",
        "z": "5191202c2ef822cf",
        "name": "function 6",
        "func": "var ts = Date.now() - (24* 60 * 60 * 1000); // 48 hours ago\n\nmsg.payload = {\n    ts: ts,\n    values: {\n        temp: 25.5,\n        hum: 60\n    }\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 440,
        "wires": [
            [
                "c67b55112ee90ca8",
                "d2612ae76904ccba"
            ]
        ]
    },
    {
        "id": "7db15f3418d8527b",
        "type": "function",
        "z": "5191202c2ef822cf",
        "name": "function 124",
        "func": "var ts = Date.now() - (48 * 60 * 60 * 1000); // 48 hours ago\n\nmsg.payload = {\n    ts: ts,\n    values: {\n        temperature: 25.5,\n        humidity: 60\n    }\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "298c5bfd3ea2c6d8",
        "type": "function",
        "z": "f0460a659c6716ef",
        "name": "function 6",
        "func": "msg.path = '/home/ubuntu/.node-red/public/je_em.csv';\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 380,
        "wires": [
            [
                "0fa34b0def90e8f8"
            ]
        ]
    },
    {
        "id": "0fa34b0def90e8f8",
        "type": "file",
        "z": "f0460a659c6716ef",
        "name": "",
        "filename": "path",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 810,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "260e71eaf00f13d8",
        "type": "csv",
        "z": "f0460a659c6716ef",
        "name": "",
        "spec": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\r\\n",
        "temp": "timestamp, voltage, current, power, energy, pf ",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": "",
        "x": 500,
        "y": 380,
        "wires": [
            [
                "298c5bfd3ea2c6d8"
            ]
        ]
    },
    {
        "id": "0450de06610c9220",
        "type": "inject",
        "z": "f0460a659c6716ef",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 260,
        "y": 140,
        "wires": [
            [
                "aae1123db31cc889",
                "2a5bba2e276f6774"
            ]
        ]
    },
    {
        "id": "aae1123db31cc889",
        "type": "function",
        "z": "f0460a659c6716ef",
        "name": "function 127",
        "func": "flow.set(\"abcd\",1);\nflow.set(\"efgh\",23);\nflow.set(\"timestamp\", new Date().toISOString());\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "2a5bba2e276f6774",
        "type": "function",
        "z": "f0460a659c6716ef",
        "name": "function 128",
        "func": "let a = flow.get(\"abcd\");\nlet b = flow.get(\"efgh\");\nlet timestamp =  flow.get(\"timestamp\");\n\nmsg.payload = {\n    a,\n    b,\n    timestamp,\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 280,
        "wires": [
            [
                "a6da68f5d088a49d"
            ]
        ]
    },
    {
        "id": "a6da68f5d088a49d",
        "type": "debug",
        "z": "f0460a659c6716ef",
        "name": "debug 112",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 260,
        "wires": []
    },
    {
        "id": "feb5da3c6043665a",
        "type": "function",
        "z": "f0460a659c6716ef",
        "name": "function 131",
        "func": "// Get current timestamp\nvar now = new Date();\n\n// Format date and time separately\nvar date = now.toLocaleDateString('en-GB');    // \"DD/MM/YYYY\"\nvar time = now.toLocaleTimeString('en-GB');    // \"HH:MM:SS\"\n\n// Add to payload\n// msg.payload.date = date;\n// msg.payload.time = time;\nmsg.payload={\n    // date : date,\n    time : time\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 480,
        "wires": [
            [
                "07ae9a254a56a39c"
            ]
        ]
    },
    {
        "id": "07ae9a254a56a39c",
        "type": "debug",
        "z": "f0460a659c6716ef",
        "name": "debug 114",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 480,
        "wires": []
    },
    {
        "id": "1be4797d9c298354",
        "type": "inject",
        "z": "f0460a659c6716ef",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 400,
        "wires": [
            [
                "feb5da3c6043665a"
            ]
        ]
    },
    {
        "id": "e05c8511da25eacf",
        "type": "debug",
        "z": "17633a1dbc329ae5",
        "name": "debug 126",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 60,
        "wires": []
    },
    {
        "id": "32d72d565f8b74bc",
        "type": "function",
        "z": "17633a1dbc329ae5",
        "name": "",
        "func": "flow.set('toptanklvl', msg.payload.topTank);\nflow.set('utp', msg.payload.underTank);\n// flow.set('toptanklvl', 95);\n// flow.set('utp', 54);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "584fbf739f8378a9",
        "type": "mqtt in",
        "z": "17633a1dbc329ae5",
        "name": "",
        "topic": "datatest/watertank",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "7f29005b7899d141",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 520,
        "y": 60,
        "wires": [
            [
                "e05c8511da25eacf",
                "32d72d565f8b74bc"
            ]
        ]
    },
    {
        "id": "f6a77eee703d830d",
        "type": "inject",
        "z": "17633a1dbc329ae5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 02 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 410,
        "y": 200,
        "wires": [
            [
                "8ae9e67c3c7b9ce3",
                "30ca7348680ded16"
            ]
        ]
    },
    {
        "id": "8ae9e67c3c7b9ce3",
        "type": "function",
        "z": "17633a1dbc329ae5",
        "name": "PUMP ON",
        "func": "let a = msg.payload;\nflow.set(\"temp\",a)\nlet ttp = flow.get(\"toptanklvl\");\nlet prev = flow.get(\"lastTopLevel\") ;\nlet tank = flow.get(\"tank\") || 0;\nlet pump = flow.get(\"pump\");\n\nif(a === true && ttp <= 90 && tank === 1){\n    flow.set(\"pump\", 1);\n   \n}\nif(a === false && ttp <= prev && tank === 1){\n    flow.set(\"pump\", 0);;\n}\n\n\n\n// if(a === false && pump === 1 && ttp >= prev){\n//     flow.set(\"pump\", 0);\n// }\n// if(ttp >= prev){\n//     msg.payload = 1\n// }\n// else{\n//     return null;\n// }\n// if(a !== true || a !== false){\n//     return null;\n// }\n\nmsg.payload = pump\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "ec3c1ab74e907409",
        "type": "inject",
        "z": "17633a1dbc329ae5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "05 03 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 410,
        "y": 320,
        "wires": [
            [
                "8ae9e67c3c7b9ce3"
            ]
        ]
    },
    {
        "id": "30ca7348680ded16",
        "type": "function",
        "z": "17633a1dbc329ae5",
        "name": "LAST LVL",
        "func": "let topTank = flow.get(\"toptanklvl\");\n\nflow.set(\"ltlvl\",topTank);\nmsg.payload = topTank\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "de7e1e9bc0b6dd2b",
        "type": "inject",
        "z": "17633a1dbc329ae5",
        "name": "",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 410,
        "y": 440,
        "wires": [
            [
                "0371d55edc719f81",
                "8353a830033061ee"
            ]
        ]
    },
    {
        "id": "444bb92e23b923a0",
        "type": "inject",
        "z": "17633a1dbc329ae5",
        "name": "",
        "props": [],
        "repeat": "180",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 410,
        "y": 160,
        "wires": [
            [
                "30ca7348680ded16",
                "4f559dc6987e21ee",
                "6f457b1c5c4a436f"
            ]
        ]
    },
    {
        "id": "9cfd5488281d4d3a",
        "type": "inject",
        "z": "17633a1dbc329ae5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 03 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 410,
        "y": 240,
        "wires": [
            [
                "8ae9e67c3c7b9ce3",
                "30ca7348680ded16"
            ]
        ]
    },
    {
        "id": "ad805fcfd17eb04d",
        "type": "inject",
        "z": "17633a1dbc329ae5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "05 02 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 410,
        "y": 280,
        "wires": [
            [
                "8ae9e67c3c7b9ce3"
            ]
        ]
    },
    {
        "id": "0371d55edc719f81",
        "type": "function",
        "z": "17633a1dbc329ae5",
        "name": "PUMP",
        "func": "let a = flow.get(\"toptanklvl\");\nlet prev = flow.get(\"lastTopLevel\") ;\nlet tank = flow.get(\"tank\") || 0;\nlet v = flow.get(\"temp\");\nlet pump = flow.get(\"pump\");\nlet valve = flow.get(\"valve\");\n\nif(pump === 0 && v === false && a >= 90 ){\n    flow.set(\"valveon\", 1);\n}\nif (a <= 90) {\n    flow.set(\"tank\", 1);\n}\nif(v === false && a <= prev && tank === 1){\n    flow.set(\"pump\", 0);;\n}\nmsg.payload = {pump,valve,\"deviceName\": \"button1\",\n    \"deviceType\": \"button1\",\n\n                    } ;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 400,
        "wires": [
            [
                "4133f2b827eee494"
            ]
        ]
    },
    {
        "id": "4f559dc6987e21ee",
        "type": "function",
        "z": "17633a1dbc329ae5",
        "name": "vavlve",
        "func": "let topTank = flow.get(\"utp\");\n\nflow.set(\"lulvl\",topTank);\nmsg.payload = topTank\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "1f4480860d22e269",
        "type": "inject",
        "z": "17633a1dbc329ae5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 04 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 410,
        "y": 540,
        "wires": [
            [
                "d17ebe8555bd234b"
            ]
        ]
    },
    {
        "id": "d17ebe8555bd234b",
        "type": "function",
        "z": "17633a1dbc329ae5",
        "name": "VALVE ON",
        "func": "let a = msg.payload;\nflow.set(\"temp1\",a);\nlet top = flow.get(\"toptanklvl\");\nlet ttp = flow.get(\"utp\");\nlet prev = flow.get(\"lastunderLevel\") ;\nlet tank1 = flow.get(\"tank1\") || 0;\nlet valve = flow.get(\"valve\");\n\nif(a === true && ttp <= 98 && tank1 === 1 && top >= 90){\n    flow.set(\"valve\", 1);\n   \n}\nif(a === false && ttp <= prev && tank1 === 1){\n    flow.set(\"valve\", 0);\n}\n\n\n\n// if(a === false && pump === 1 && ttp >= prev){\n//     flow.set(\"pump\", 0);\n// }\n// if(ttp >= prev){\n//     msg.payload = 1\n// }\n// else{\n//     return null;\n// }\n// if(a !== true || a !== false){\n//     return null;\n// }\n\nmsg.payload = valve,a\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "489e48ce113f6861",
        "type": "inject",
        "z": "17633a1dbc329ae5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "03 05 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 410,
        "y": 660,
        "wires": [
            [
                "d17ebe8555bd234b"
            ]
        ]
    },
    {
        "id": "3d7d5bb0e47f29ca",
        "type": "inject",
        "z": "17633a1dbc329ae5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 05 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 410,
        "y": 580,
        "wires": [
            [
                "d17ebe8555bd234b"
            ]
        ]
    },
    {
        "id": "f57be60e1af42b0f",
        "type": "inject",
        "z": "17633a1dbc329ae5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "03 04 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 410,
        "y": 620,
        "wires": [
            [
                "d17ebe8555bd234b"
            ]
        ]
    },
    {
        "id": "8353a830033061ee",
        "type": "function",
        "z": "17633a1dbc329ae5",
        "name": "VALVE",
        "func": "let a = flow.get(\"utp\");\nlet prev = flow.get(\"lastunderLevel\") ;\nlet tank1 = flow.get(\"tank1\") || 0;\nlet v = flow.get(\"temp1\");\nlet valve = flow.get(\"valve\");\n\nif (a <= 98) {\n    flow.set(\"tank1\", 1);\n}\nif(v === false && a <= prev && tank1 === 1){\n    flow.set(\"valve\", 0);\n}\nmsg.payload = {valve,\"deviceName\": \"button1\",\n    \"deviceType\": \"button1\",\n\n                    } ;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 480,
        "wires": [
            [
                "49ae0350428b0ae1"
            ]
        ]
    },
    {
        "id": "4133f2b827eee494",
        "type": "debug",
        "z": "17633a1dbc329ae5",
        "name": "debug 135",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 750,
        "y": 400,
        "wires": []
    },
    {
        "id": "49ae0350428b0ae1",
        "type": "debug",
        "z": "17633a1dbc329ae5",
        "name": "debug 136",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 750,
        "y": 480,
        "wires": []
    },
    {
        "id": "854647f0f0b4e579",
        "type": "mqtt out",
        "z": "17633a1dbc329ae5",
        "name": "",
        "topic": "absolute/data/button1",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "7f29005b7899d141",
        "x": 1140,
        "y": 760,
        "wires": []
    },
    {
        "id": "c848ace12c2af87b",
        "type": "function",
        "z": "17633a1dbc329ae5",
        "name": "function 198",
        "func": "// Expecting msg.payload = { pump: 0/1, valve: 0/1 }\nlet pumpValue = Number(msg.payload.pump);\n\n// Get last values from flow context\nlet lastPump = flow.get(\"lastPump\") ?? null;\n\n\nlet changes = {};\n\n// Pump change detection\nif (lastPump !== pumpValue) {\n    flow.set(\"lastPump\", pumpValue);\n    changes.pump = pumpValue;\n}\n\n\n\n// Only output if there is at least one change\nif (Object.keys(changes).length > 0) {\n    msg.payload = changes;\n    return msg;\n} else {\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 740,
        "wires": [
            [
                "522ab0aea2406128"
            ]
        ]
    },
    {
        "id": "2a7baac5630373e8",
        "type": "function",
        "z": "17633a1dbc329ae5",
        "name": "function 199",
        "func": "// Expecting msg.payload = { pump: 0/1, valve: 0/1 }\nlet valveValue = Number(msg.payload.valve);\n\n// Get last values from flow context\nlet lastvalve = flow.get(\"lastvalve\") ?? null;\n\n\nlet changes = {};\n\n// Pump change detection\nif (lastvalve !== valveValue) {\n    flow.set(\"lastvalve\", valveValue);\n    changes.valve = valveValue;\n}\n\n\n\n// Only output if there is at least one change\nif (Object.keys(changes).length > 0) {\n    msg.payload = changes;\n    return msg;\n} else {\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 780,
        "wires": [
            [
                "522ab0aea2406128"
            ]
        ]
    },
    {
        "id": "65a6436af17a8e0a",
        "type": "function",
        "z": "17633a1dbc329ae5",
        "name": "function 200",
        "func": "let pump = flow.get(\"pump\");\nlet valve = flow.get(\"valve\");\nmsg.payload = {pump,valve\n\n                    } ;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 760,
        "wires": [
            [
                "c848ace12c2af87b",
                "2a7baac5630373e8"
            ]
        ]
    },
    {
        "id": "ca6a8cbd35afd9fd",
        "type": "inject",
        "z": "17633a1dbc329ae5",
        "name": "",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 410,
        "y": 760,
        "wires": [
            [
                "65a6436af17a8e0a"
            ]
        ]
    },
    {
        "id": "0852f24b2c7911e0",
        "type": "debug",
        "z": "17633a1dbc329ae5",
        "name": "debug 137",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 700,
        "wires": []
    },
    {
        "id": "522ab0aea2406128",
        "type": "function",
        "z": "17633a1dbc329ae5",
        "name": "function 202",
        "func": "let pump = Number(msg.payload.pump);\nlet valve = Number(msg.payload.valve);\nmsg.payload = {pump,valve,\"deviceName\": \"button1\",\n    \"deviceType\": \"button1\",\n\n                    } ;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 760,
        "wires": [
            [
                "854647f0f0b4e579"
            ]
        ]
    },
    {
        "id": "6f457b1c5c4a436f",
        "type": "delay",
        "z": "17633a1dbc329ae5",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 580,
        "y": 200,
        "wires": [
            [
                "c7d2afd4385a951a",
                "25d21be52030ec6c"
            ]
        ]
    },
    {
        "id": "c7d2afd4385a951a",
        "type": "function",
        "z": "17633a1dbc329ae5",
        "name": "function 203",
        "func": "let lastTopLevel = flow.get(\"ltlvl\");\nflow.set(\"lastTopLevel\",lastTopLevel);\nmsg.payload= lastTopLevel;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 180,
        "wires": [
            [
                "6d0fc2c7fcca7e3b"
            ]
        ]
    },
    {
        "id": "6d0fc2c7fcca7e3b",
        "type": "debug",
        "z": "17633a1dbc329ae5",
        "name": "debug 139",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 930,
        "y": 180,
        "wires": []
    },
    {
        "id": "25d21be52030ec6c",
        "type": "function",
        "z": "17633a1dbc329ae5",
        "name": "function 204",
        "func": "let lastunderLevel = flow.get(\"lulvl\");\nflow.set(\"lastunderLevel\",lastunderLevel);\nmsg.payload= lastunderLevel;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 220,
        "wires": [
            [
                "5290dc456fee879c"
            ]
        ]
    },
    {
        "id": "5290dc456fee879c",
        "type": "debug",
        "z": "17633a1dbc329ae5",
        "name": "debug 140",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 930,
        "y": 240,
        "wires": []
    }
]